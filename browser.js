var $bFvJb$process = require("process");
var $bFvJb$buffer = require("buffer");
var $bFvJb$events = require("events");
var $bFvJb$stream = require("stream");
var $bFvJb$string_decoder = require("string_decoder");
var $bFvJb$node_url = require("node_url");
var $bFvJb$net = require("net");
var $bFvJb$tls = require("tls");
var $bFvJb$assert = require("assert");
var $bFvJb$util = require("util");
var $bFvJb$fs = require("fs");
var $bFvJb$http = require("http");

function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequire2d5e"];
if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequire2d5e"] = parcelRequire;
}
parcelRequire.register("aSbYK", function(module, exports) {
"use strict";
var $7ea83d426f1da145$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $7ea83d426f1da145$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) $7ea83d426f1da145$var$__createBinding(exports1, m, p);
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.BigSegmentStoreStatusProviderImpl = module.exports.LDClientImpl = module.exports.platform = module.exports.integrations = void 0;

var $henhl = parcelRequire("henhl");
module.exports.BigSegmentStoreStatusProviderImpl = $henhl.default;

var $ataGt = parcelRequire("ataGt");
module.exports.LDClientImpl = $ataGt.default;

module.exports.integrations = (parcelRequire("c5IsF"));

module.exports.platform = (parcelRequire("74cHE"));

$7ea83d426f1da145$var$__exportStar((parcelRequire("3mSl7")), module.exports);

$7ea83d426f1da145$var$__exportStar((parcelRequire("b52vr")), module.exports);

$7ea83d426f1da145$var$__exportStar((parcelRequire("irFpt")), module.exports);

$7ea83d426f1da145$var$__exportStar((parcelRequire("74cHE")), module.exports);

});
parcelRequire.register("henhl", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * @ignore
 */ class $c8b5cd28c811c4e3$var$BigSegmentStoreStatusProviderImpl {
    constructor(onRequestStatus){
        this.onRequestStatus = onRequestStatus;
    }
    /**
     * Gets the current status of the store, if known.
     *
     * @returns a {@link BigSegmentStoreStatus}, or `undefined` if the SDK has not yet queried the
     *   Big Segment store status
     */ getStatus() {
        return this.lastStatus;
    }
    /**
     * Gets the current status of the store, querying it if the status has not already been queried.
     *
     * @returns a Promise for the status of the store
     */ async requireStatus() {
        if (!this.lastStatus) await this.onRequestStatus();
        // Status will be defined at this point.
        return this.lastStatus;
    }
    notify() {
        var _a;
        if (this.lastStatus) (_a = this.listener) === null || _a === void 0 || _a.call(this, this.lastStatus);
    }
    setListener(listener) {
        this.listener = listener;
    }
    setStatus(status) {
        this.lastStatus = status;
    }
}
module.exports.default = $c8b5cd28c811c4e3$var$BigSegmentStoreStatusProviderImpl;

});

parcelRequire.register("ataGt", function(module, exports) {
"use strict";
/* eslint-disable @typescript-eslint/no-unused-vars */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $74cHE = parcelRequire("74cHE");

var $5FZac = parcelRequire("5FZac");

var $lwuMM = parcelRequire("lwuMM");

var $bJX1P = parcelRequire("bJX1P");

var $hEqNQ = parcelRequire("hEqNQ");

var $d4Nzv = parcelRequire("d4Nzv");

var $f117l = parcelRequire("f117l");

var $Cgtb1 = parcelRequire("Cgtb1");

var $8vEDz = parcelRequire("8vEDz");

var $fli9D = parcelRequire("fli9D");

var $15nMV = parcelRequire("15nMV");

var $d7Uly = parcelRequire("d7Uly");

var $Ki2yH = parcelRequire("Ki2yH");

var $492nF = parcelRequire("492nF");

var $5zw6v = parcelRequire("5zw6v");

var $bZA90 = parcelRequire("bZA90");

var $eiNwf = parcelRequire("eiNwf");

var $fOMAn = parcelRequire("fOMAn");

var $jSXv1 = parcelRequire("jSXv1");

var $bVvT9 = parcelRequire("bVvT9");

var $k3fB8 = parcelRequire("k3fB8");

var $b52vr = parcelRequire("b52vr");

var $h1AVT = parcelRequire("h1AVT");
var $79f4e67805bec289$var$InitState;
(function(InitState) {
    InitState[InitState["Initializing"] = 0] = "Initializing";
    InitState[InitState["Initialized"] = 1] = "Initialized";
    InitState[InitState["Failed"] = 2] = "Failed";
})($79f4e67805bec289$var$InitState || ($79f4e67805bec289$var$InitState = {}));
/**
 * @ignore
 */ class $79f4e67805bec289$var$LDClientImpl {
    constructor(sdkKey, platform, options, callbacks){
        var _a, _b, _c, _d, _e;
        this.sdkKey = sdkKey;
        this.platform = platform;
        this.initState = $79f4e67805bec289$var$InitState.Initializing;
        this.eventFactoryDefault = new $bZA90.default(false);
        this.eventFactoryWithReasons = new $bZA90.default(true);
        this.onError = callbacks.onError;
        this.onFailed = callbacks.onFailed;
        this.onReady = callbacks.onReady;
        const { onUpdate: onUpdate, hasEventListeners: hasEventListeners } = callbacks;
        const config = new $k3fB8.default(options);
        if (!sdkKey && !config.offline) throw new Error("You must configure the client with an SDK key");
        this.config = config;
        this.logger = config.logger;
        const clientContext = new $74cHE.ClientContext(sdkKey, config, platform);
        const featureStore = config.featureStoreFactory(clientContext);
        this.asyncFeatureStore = new $b52vr.AsyncStoreFacade(featureStore);
        const dataSourceUpdates = new $bJX1P.default(featureStore, hasEventListeners, onUpdate);
        if (config.sendEvents && !config.offline && !config.diagnosticOptOut) this.diagnosticsManager = new $5zw6v.default(sdkKey, config, platform, featureStore);
        const makeDefaultProcessor = ()=>config.stream ? new $Cgtb1.default(sdkKey, config, this.platform.requests, this.platform.info, dataSourceUpdates, this.diagnosticsManager) : new $d4Nzv.default(config, new $f117l.default(sdkKey, config, this.platform.info, this.platform.requests), dataSourceUpdates);
        if (config.offline || config.useLdd) this.updateProcessor = new $hEqNQ.default();
        else this.updateProcessor = (_b = (_a = config.updateProcessorFactory) === null || _a === void 0 ? void 0 : _a.call(config, clientContext, dataSourceUpdates)) !== null && _b !== void 0 ? _b : makeDefaultProcessor();
        if (!config.sendEvents || config.offline) this.eventProcessor = new $jSXv1.default();
        else this.eventProcessor = new $74cHE.internal.EventProcessor(config, clientContext, new $eiNwf.default(config, clientContext), new $492nF.default(config), this.diagnosticsManager);
        this.featureStore = featureStore;
        const manager = new $5FZac.default((_d = (_c = config.bigSegments) === null || _c === void 0 ? void 0 : _c.store) === null || _d === void 0 ? void 0 : _d.call(_c, clientContext), (_e = config.bigSegments) !== null && _e !== void 0 ? _e : {}, config.logger, this.platform.crypto);
        this.bigSegmentsManager = manager;
        this.bigSegmentStatusProviderInternal = manager.statusProvider;
        const queries = {
            getFlag (key, cb) {
                featureStore.get($h1AVT.default.Features, key, (item)=>cb(item));
            },
            getSegment (key, cb) {
                featureStore.get($h1AVT.default.Segments, key, (item)=>cb(item));
            },
            getBigSegmentsMembership (userKey) {
                return manager.getUserMembership(userKey);
            }
        };
        this.evaluator = new $Ki2yH.default(this.platform, queries);
        this.updateProcessor.start((err)=>{
            var _a, _b;
            if (err) {
                let error;
                if (err.status && err.status === 401 || err.code && err.code === 401) error = new Error("Authentication failed. Double check your SDK key.");
                else error = err;
                this.onError(error);
                this.onFailed(error);
                (_a = this.initReject) === null || _a === void 0 || _a.call(this, error);
                this.initState = $79f4e67805bec289$var$InitState.Failed;
            } else if (!this.initialized()) {
                this.initState = $79f4e67805bec289$var$InitState.Initialized;
                (_b = this.initResolve) === null || _b === void 0 || _b.call(this, this);
                this.onReady();
            }
        });
    }
    initialized() {
        return this.initState === $79f4e67805bec289$var$InitState.Initialized;
    }
    waitForInitialization() {
        if (this.initState === $79f4e67805bec289$var$InitState.Initialized) return Promise.resolve(this);
        if (!this.initializedPromise) this.initializedPromise = new Promise((resolve, reject)=>{
            this.initResolve = resolve;
            this.initReject = reject;
        });
        return this.initializedPromise;
    }
    variation(key, context, defaultValue, callback) {
        return new Promise((resolve)=>{
            this.evaluateIfPossible(key, context, defaultValue, this.eventFactoryDefault, (res)=>{
                resolve(res.detail.value);
                callback === null || callback === void 0 || callback(null, res.detail.value);
            });
        });
    }
    variationDetail(key, context, defaultValue, callback) {
        return new Promise((resolve)=>{
            this.evaluateIfPossible(key, context, defaultValue, this.eventFactoryWithReasons, (res)=>{
                resolve(res.detail);
                callback === null || callback === void 0 || callback(null, res.detail);
            });
        });
    }
    allFlagsState(context, options, callback) {
        var _a, _b, _c;
        if (this.config.offline) {
            (_a = this.logger) === null || _a === void 0 || _a.info("allFlagsState() called in offline mode. Returning empty state.");
            const allFlagState = new $bVvT9.default(false, false).build();
            callback === null || callback === void 0 || callback(null, allFlagState);
            return Promise.resolve(allFlagState);
        }
        const evalContext = $74cHE.Context.fromLDContext(context);
        if (!evalContext.valid) {
            (_b = this.logger) === null || _b === void 0 || _b.info(`${(_c = evalContext.message) !== null && _c !== void 0 ? _c : "Invalid context."}. Returning empty state.`);
            return Promise.resolve(new $bVvT9.default(false, false).build());
        }
        return new Promise((resolve)=>{
            const doEval = (valid)=>this.featureStore.all($h1AVT.default.Features, (allFlags)=>{
                    const builder = new $bVvT9.default(valid, !!(options === null || options === void 0 ? void 0 : options.withReasons));
                    const clientOnly = !!(options === null || options === void 0 ? void 0 : options.clientSideOnly);
                    const detailsOnlyIfTracked = !!(options === null || options === void 0 ? void 0 : options.detailsOnlyForTrackedFlags);
                    (0, $fli9D.allAsync)(Object.values(allFlags), (storeItem, iterCb)=>{
                        const flag = storeItem;
                        if (clientOnly && !flag.clientSide) {
                            iterCb(true);
                            return;
                        }
                        this.evaluator.evaluateCb(flag, evalContext, (res)=>{
                            var _a;
                            if (res.isError) this.onError(new Error(`Error for feature flag "${flag.key}" while evaluating all flags: ${res.message}`));
                            const requireExperimentData = (0, $fOMAn.default)(flag, res.detail.reason);
                            builder.addFlag(flag, res.detail.value, (_a = res.detail.variationIndex) !== null && _a !== void 0 ? _a : undefined, res.detail.reason, flag.trackEvents || requireExperimentData, requireExperimentData, detailsOnlyIfTracked);
                            iterCb(true);
                        });
                    }, ()=>{
                        const res = builder.build();
                        callback === null || callback === void 0 || callback(null, res);
                        resolve(res);
                    });
                });
            if (!this.initialized()) this.featureStore.initialized((storeInitialized)=>{
                var _a, _b;
                let valid = true;
                if (storeInitialized) (_a = this.logger) === null || _a === void 0 || _a.warn("Called allFlagsState before client initialization; using last known values from data store");
                else {
                    (_b = this.logger) === null || _b === void 0 || _b.warn("Called allFlagsState before client initialization. Data store not available; returning empty state");
                    valid = false;
                }
                doEval(valid);
            });
            else doEval(true);
        });
    }
    secureModeHash(context) {
        const checkedContext = $74cHE.Context.fromLDContext(context);
        const key = checkedContext.valid ? checkedContext.canonicalKey : undefined;
        const hmac = this.platform.crypto.createHmac("sha256", this.sdkKey);
        if (key === undefined) throw new $8vEDz.LDClientError("Could not generate secure mode hash for invalid context");
        hmac.update(key);
        return hmac.digest("hex");
    }
    close() {
        this.eventProcessor.close();
        this.updateProcessor.close();
        this.featureStore.close();
        this.bigSegmentsManager.close();
    }
    isOffline() {
        return this.config.offline;
    }
    track(key, context, data, metricValue) {
        var _a;
        const checkedContext = $74cHE.Context.fromLDContext(context);
        if (!checkedContext.valid) {
            (_a = this.logger) === null || _a === void 0 || _a.warn($lwuMM.default.missingContextKeyNoEvent);
            return;
        }
        this.eventProcessor.sendEvent(this.eventFactoryDefault.customEvent(key, checkedContext, data, metricValue));
    }
    identify(context) {
        var _a;
        const checkedContext = $74cHE.Context.fromLDContext(context);
        if (!checkedContext.valid) {
            (_a = this.logger) === null || _a === void 0 || _a.warn($lwuMM.default.missingContextKeyNoEvent);
            return;
        }
        this.eventProcessor.sendEvent(this.eventFactoryDefault.identifyEvent(checkedContext));
    }
    async flush(callback) {
        try {
            await this.eventProcessor.flush();
        } catch (err) {
            callback === null || callback === void 0 || callback(err, false);
        }
        callback === null || callback === void 0 || callback(null, true);
    }
    variationInternal(flagKey, context, defaultValue, eventFactory, cb) {
        var _a, _b;
        if (this.config.offline) {
            (_a = this.logger) === null || _a === void 0 || _a.info("Variation called in offline mode. Returning default value.");
            cb($d7Uly.default.forError($15nMV.default.ClientNotReady, undefined, defaultValue));
            return;
        }
        const evalContext = $74cHE.Context.fromLDContext(context);
        if (!evalContext.valid) {
            this.onError(new $8vEDz.LDClientError(`${(_b = evalContext.message) !== null && _b !== void 0 ? _b : "Context not valid;"} returning default value.`));
            cb($d7Uly.default.forError($15nMV.default.UserNotSpecified, undefined, defaultValue));
            return;
        }
        this.featureStore.get($h1AVT.default.Features, flagKey, (item)=>{
            const flag = item;
            if (!flag) {
                const error = new $8vEDz.LDClientError(`Unknown feature flag "${flagKey}"; returning default value`);
                this.onError(error);
                const result = $d7Uly.default.forError($15nMV.default.FlagNotFound, undefined, defaultValue);
                this.eventProcessor.sendEvent(this.eventFactoryDefault.unknownFlagEvent(flagKey, evalContext, result.detail));
                cb(result);
                return;
            }
            this.evaluator.evaluateCb(flag, evalContext, (evalRes)=>{
                var _a, _b;
                if (evalRes.detail.variationIndex === undefined || evalRes.detail.variationIndex === null) {
                    (_a = this.logger) === null || _a === void 0 || _a.debug("Result value is null in variation");
                    evalRes.setDefault(defaultValue);
                }
                (_b = evalRes.events) === null || _b === void 0 || _b.forEach((event)=>{
                    this.eventProcessor.sendEvent(event);
                });
                this.eventProcessor.sendEvent(eventFactory.evalEvent(flag, evalContext, evalRes.detail, defaultValue));
                cb(evalRes);
            }, eventFactory);
        });
    }
    evaluateIfPossible(flagKey, context, defaultValue, eventFactory, cb) {
        if (!this.initialized()) {
            this.featureStore.initialized((storeInitialized)=>{
                var _a, _b;
                if (storeInitialized) {
                    (_a = this.logger) === null || _a === void 0 || _a.warn("Variation called before LaunchDarkly client initialization completed (did you wait for the 'ready' event?) - using last known values from feature store");
                    this.variationInternal(flagKey, context, defaultValue, eventFactory, cb);
                    return;
                }
                (_b = this.logger) === null || _b === void 0 || _b.warn("Variation called before LaunchDarkly client initialization completed (did you wait for the'ready' event?) - using default value");
                cb($d7Uly.default.forError($15nMV.default.ClientNotReady, undefined, defaultValue));
            });
            return;
        }
        this.variationInternal(flagKey, context, defaultValue, eventFactory, cb);
    }
}
module.exports.default = $79f4e67805bec289$var$LDClientImpl;

});
parcelRequire.register("74cHE", function(module, exports) {
"use strict";
var $5252c2af26c2ba5a$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $5252c2af26c2ba5a$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) $5252c2af26c2ba5a$var$__createBinding(exports1, m, p);
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.ContextFilter = module.exports.Context = module.exports.AttributeReference = module.exports.internal = void 0;

var $1ZWUf = parcelRequire("1ZWUf");
module.exports.AttributeReference = $1ZWUf.default;

var $8WVm2 = parcelRequire("8WVm2");
module.exports.Context = $8WVm2.default;

var $fIlfZ = parcelRequire("fIlfZ");
module.exports.ContextFilter = $fIlfZ.default;

$5252c2af26c2ba5a$var$__exportStar((parcelRequire("a21vu")), module.exports);

$5252c2af26c2ba5a$var$__exportStar((parcelRequire("bf4hr")), module.exports);

$5252c2af26c2ba5a$var$__exportStar((parcelRequire("bLwGw")), module.exports);

$5252c2af26c2ba5a$var$__exportStar((parcelRequire("h5MiK")), module.exports);

$5252c2af26c2ba5a$var$__exportStar((parcelRequire("aXJyX")), module.exports);

module.exports.internal = (parcelRequire("1aCcX"));

});
parcelRequire.register("1ZWUf", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * Converts a literal to a ref string.
 * @param value
 * @returns An escaped literal which can be used as a ref.
 */ function $17492e8201ffe04c$var$toRefString(value) {
    return `/${value.replace(/~/g, "~0").replace(/\//g, "~1")}`;
}
/**
 * Produce a literal from a ref component.
 * @param ref
 * @returns A literal version of the ref.
 */ function $17492e8201ffe04c$var$unescape(ref) {
    return ref.indexOf("~") ? ref.replace(/~1/g, "/").replace(/~0/g, "~") : ref;
}
function $17492e8201ffe04c$var$getComponents(reference) {
    const referenceWithoutPrefix = reference.startsWith("/") ? reference.substring(1) : reference;
    return referenceWithoutPrefix.split("/").map((component)=>$17492e8201ffe04c$var$unescape(component));
}
function $17492e8201ffe04c$var$isLiteral(reference) {
    return !reference.startsWith("/");
}
function $17492e8201ffe04c$var$validate(reference) {
    return !reference.match(/\/\/|(^\/.*~[^0|^1])|~$/);
}
class $17492e8201ffe04c$var$AttributeReference {
    /**
     * Take an attribute reference string, or literal string, and produce
     * an attribute reference.
     *
     * Legacy user objects would have been created with names not
     * references. So, in that case, we need to use them as a component
     * without escaping them.
     *
     * e.g. A user could contain a custom attribute of `/a` which would
     * become the literal `a` if treated as a reference. Which would cause
     * it to no longer be redacted.
     * @param refOrLiteral The attribute reference string or literal string.
     * @param literal it true the value should be treated as a literal.
     */ constructor(refOrLiteral, literal = false){
        if (!literal) {
            this.redactionName = refOrLiteral;
            if (refOrLiteral === "" || refOrLiteral === "/" || !$17492e8201ffe04c$var$validate(refOrLiteral)) {
                this.isValid = false;
                this.components = [];
                return;
            }
            if ($17492e8201ffe04c$var$isLiteral(refOrLiteral)) this.components = [
                refOrLiteral
            ];
            else if (refOrLiteral.indexOf("/", 1) < 0) this.components = [
                $17492e8201ffe04c$var$unescape(refOrLiteral.slice(1))
            ];
            else this.components = $17492e8201ffe04c$var$getComponents(refOrLiteral);
            // The items inside of '_meta' are not intended to be addressable.
            // Excluding it as a valid reference means that we can make it non-addressable
            // without having to copy all the attributes out of the context object
            // provided by the user.
            if (this.components[0] === "_meta") this.isValid = false;
            else this.isValid = true;
        } else {
            const literalVal = refOrLiteral;
            this.components = [
                literalVal
            ];
            this.isValid = literalVal !== "";
            // Literals which start with '/' need escaped to prevent ambiguity.
            this.redactionName = literalVal.startsWith("/") ? $17492e8201ffe04c$var$toRefString(literalVal) : literalVal;
        }
    }
    get(target) {
        const { components: components, isValid: isValid } = this;
        if (!isValid) return undefined;
        let current = target;
        // This doesn't use a range based for loops, because those use generators.
        // See `no-restricted-syntax`.
        // It also doesn't use a collection method because this logic is more
        // straightforward with a loop.
        for(let index = 0; index < components.length; index += 1){
            const component = components[index];
            if (current !== null && current !== undefined && // See https://eslint.org/docs/rules/no-prototype-builtins
            Object.prototype.hasOwnProperty.call(current, component) && typeof current === "object" && // We do not want to allow indexing into an array.
            !Array.isArray(current)) current = current[component];
            else return undefined;
        }
        return current;
    }
    getComponent(depth) {
        return this.components[depth];
    }
    get depth() {
        return this.components.length;
    }
    get isKind() {
        return this.components.length === 1 && this.components[0] === "kind";
    }
    compare(other) {
        return this.depth === other.depth && this.components.every((value, index)=>value === other.getComponent(index));
    }
}
/**
 * For use as invalid references when deserializing Flag/Segment data.
 */ $17492e8201ffe04c$var$AttributeReference.invalidReference = new $17492e8201ffe04c$var$AttributeReference("");
module.exports.default = $17492e8201ffe04c$var$AttributeReference;

});

parcelRequire.register("8WVm2", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $1ZWUf = parcelRequire("1ZWUf");

var $bf4hr = parcelRequire("bf4hr");
// The general strategy for the context is to transform the passed in context
// as little as possible. We do convert the legacy users to a single kind
// context, but we do not translate all passed contexts into a rigid structure.
// The context will have to be copied for events, but we want to avoid any
// copying that we can.
// So we validate that the information we are given is correct, and then we
// just proxy calls with a nicely typed interface.
// This is to reduce work on the hot-path. Later, for event processing, deeper
// cloning of the context will be done.
// Validates a kind excluding check that it isn't "kind".
const $68403ae4629ad89b$var$KindValidator = $bf4hr.TypeValidators.stringMatchingRegex(/^(\w|\.|-)+$/);
// When no kind is specified, then this kind will be used.
const $68403ae4629ad89b$var$DEFAULT_KIND = "user";
// The API allows for calling with an `LDContext` which is
// `LDUser | LDSingleKindContext | LDMultiKindContext`. When ingesting a context
// first the type must be determined to allow us to put it into a consistent type.
/**
 * The partial URL encoding is needed because : is a valid character in context keys.
 *
 * Partial encoding is the replacement of all colon (:) characters with the URL
 * encoded equivalent (%3A) and all percent (%) characters with the URL encoded
 * equivalent (%25).
 * @param key The key to encode.
 * @returns Partially URL encoded key.
 */ function $68403ae4629ad89b$var$encodeKey(key) {
    if (key.includes("%") || key.includes(":")) return key.replace(/%/g, "%25").replace(/:/g, "%3A");
    return key;
}
/**
 * Check if a context is a single kind context.
 * @param context
 * @returns true if the context is a single kind context.
 */ function $68403ae4629ad89b$var$isSingleKind(context) {
    if ("kind" in context) return $bf4hr.TypeValidators.String.is(context.kind) && context.kind !== "multi";
    return false;
}
/**
 * Check if a context is a multi-kind context.
 * @param context
 * @returns true if it is a multi-kind context.
 */ function $68403ae4629ad89b$var$isMultiKind(context) {
    if ("kind" in context) return $bf4hr.TypeValidators.String.is(context.kind) && context.kind === "multi";
    return false;
}
/**
 * Check if a context is a legacy user context.
 * @param context
 * @returns true if it is a legacy user context.
 */ function $68403ae4629ad89b$var$isLegacyUser(context) {
    return !("kind" in context) || context.kind === null || context.kind === undefined;
}
/**
 * Check if the given value is a LDContextCommon.
 * @param kindOrContext
 * @returns true if it is an LDContextCommon
 *
 * Due to a limitation in the expressiveness of these highly polymorphic types any field
 * in a multi-kind context can either be a context or 'kind'. So we need to re-assure
 * the compiler that it isn't the word multi.
 *
 * Because we do not allow top level values in a multi-kind context we can validate
 * that as well.
 */ function $68403ae4629ad89b$var$isContextCommon(kindOrContext) {
    return kindOrContext && $bf4hr.TypeValidators.Object.is(kindOrContext);
}
/**
 * Validate a context kind.
 * @param kind
 * @returns true if the kind is valid.
 */ function $68403ae4629ad89b$var$validKind(kind) {
    return $68403ae4629ad89b$var$KindValidator.is(kind) && kind !== "kind";
}
/**
 * Validate a context key.
 * @param key
 * @returns true if the key is valid.
 */ function $68403ae4629ad89b$var$validKey(key) {
    return $bf4hr.TypeValidators.String.is(key) && key !== "";
}
function $68403ae4629ad89b$var$processPrivateAttributes(privateAttributes, literals = false) {
    if (privateAttributes) return privateAttributes.map((privateAttribute)=>new $1ZWUf.default(privateAttribute, literals));
    return [];
}
function $68403ae4629ad89b$var$defined(value) {
    return value !== null && value !== undefined;
}
/**
 * Convert a legacy user to a single kind context.
 * @param user
 * @returns A single kind context.
 */ function $68403ae4629ad89b$var$legacyToSingleKind(user) {
    const singleKindContext = Object.assign(Object.assign({}, user.custom || []), {
        kind: "user",
        key: String(user.key)
    });
    // For legacy users we never established a difference between null
    // and undefined for inputs. Because anonymous can be used in evaluations
    // we would want it to not possibly match true/false unless defined.
    // Which is different than coercing a null/undefined anonymous as `false`.
    if ($68403ae4629ad89b$var$defined(user.anonymous)) {
        const anonymous = !!user.anonymous;
        delete singleKindContext.anonymous;
        singleKindContext.anonymous = anonymous;
    }
    if (user.name !== null && user.name !== undefined) singleKindContext.name = user.name;
    if (user.ip !== null && user.ip !== undefined) singleKindContext.ip = user.ip;
    if (user.firstName !== null && user.firstName !== undefined) singleKindContext.firstName = user.firstName;
    if (user.lastName !== null && user.lastName !== undefined) singleKindContext.lastName = user.lastName;
    if (user.email !== null && user.email !== undefined) singleKindContext.email = user.email;
    if (user.avatar !== null && user.avatar !== undefined) singleKindContext.avatar = user.avatar;
    if (user.country !== null && user.country !== undefined) singleKindContext.country = user.country;
    // We are not pulling private attributes over because we will serialize
    // those from attribute references for events.
    return singleKindContext;
}
/**
 * Container for a context/contexts. Because contexts come from external code
 * they must be thoroughly validated and then formed to comply with
 * the type system.
 */ class $68403ae4629ad89b$var$Context {
    /**
     * Contexts should be created using the static factory method {@link Context.fromLDContext}.
     * @param kind The kind of the context.
     *
     * The factory methods are static functions within the class because they access private
     * implementation details, so they cannot be free functions.
     */ constructor(valid, kind, message){
        this.isMulti = false;
        this.isUser = false;
        this.wasLegacy = false;
        this.contexts = {};
        this.kind = kind;
        this.valid = valid;
        this.message = message;
    }
    static contextForError(kind, message) {
        return new $68403ae4629ad89b$var$Context(false, kind, message);
    }
    static getValueFromContext(reference, context) {
        if (!context || !reference.isValid) return undefined;
        if (reference.depth === 1 && reference.getComponent(0) === "anonymous") return !!(context === null || context === void 0 ? void 0 : context.anonymous);
        return reference.get(context);
    }
    contextForKind(kind) {
        if (this.isMulti) return this.contexts[kind];
        if (this.kind === kind) return this.context;
        return undefined;
    }
    static fromMultiKindContext(context) {
        const kinds = Object.keys(context).filter((key)=>key !== "kind");
        const kindsValid = kinds.every($68403ae4629ad89b$var$validKind);
        if (!kinds.length) return $68403ae4629ad89b$var$Context.contextForError("multi", "A multi-kind context must contain at least one kind");
        if (!kindsValid) return $68403ae4629ad89b$var$Context.contextForError("multi", "Context contains invalid kinds");
        const privateAttributes = {};
        let contextsAreObjects = true;
        const contexts = kinds.reduce((acc, kind)=>{
            var _a;
            const singleContext = context[kind];
            if ($68403ae4629ad89b$var$isContextCommon(singleContext)) {
                acc[kind] = singleContext;
                privateAttributes[kind] = $68403ae4629ad89b$var$processPrivateAttributes((_a = singleContext._meta) === null || _a === void 0 ? void 0 : _a.privateAttributes);
            } else // No early break isn't the most efficient, but it is an error condition.
            contextsAreObjects = false;
            return acc;
        }, {});
        if (!contextsAreObjects) return $68403ae4629ad89b$var$Context.contextForError("multi", "Context contained contexts that were not objects");
        if (!Object.values(contexts).every((part)=>$68403ae4629ad89b$var$validKey(part.key))) return $68403ae4629ad89b$var$Context.contextForError("multi", "Context contained invalid keys");
        // There was only a single kind in the multi-kind context.
        // So we can just translate this to a single-kind context.
        if (kinds.length === 1) {
            const kind = kinds[0];
            const created = new $68403ae4629ad89b$var$Context(true, kind);
            created.context = contexts[kind];
            created.privateAttributeReferences = privateAttributes;
            created.isUser = kind === "user";
            return created;
        }
        const created = new $68403ae4629ad89b$var$Context(true, context.kind);
        created.contexts = contexts;
        created.privateAttributeReferences = privateAttributes;
        created.isMulti = true;
        return created;
    }
    static fromSingleKindContext(context) {
        var _a;
        const { key: key, kind: kind } = context;
        const kindValid = $68403ae4629ad89b$var$validKind(kind);
        const keyValid = $68403ae4629ad89b$var$validKey(key);
        if (!kindValid) return $68403ae4629ad89b$var$Context.contextForError(kind !== null && kind !== void 0 ? kind : "unknown", "The kind was not valid for the context");
        if (!keyValid) return $68403ae4629ad89b$var$Context.contextForError(kind, "The key for the context was not valid");
        // The JSON interfaces uses dangling _.
        // eslint-disable-next-line no-underscore-dangle
        const privateAttributeReferences = $68403ae4629ad89b$var$processPrivateAttributes((_a = context._meta) === null || _a === void 0 ? void 0 : _a.privateAttributes);
        const created = new $68403ae4629ad89b$var$Context(true, kind);
        created.isUser = kind === "user";
        created.context = context;
        created.privateAttributeReferences = {
            [kind]: privateAttributeReferences
        };
        return created;
    }
    static fromLegacyUser(context) {
        const keyValid = context.key !== undefined && context.key !== null;
        // For legacy users we allow empty keys.
        if (!keyValid) return $68403ae4629ad89b$var$Context.contextForError("user", "The key for the context was not valid");
        const created = new $68403ae4629ad89b$var$Context(true, "user");
        created.isUser = true;
        created.wasLegacy = true;
        created.context = $68403ae4629ad89b$var$legacyToSingleKind(context);
        created.privateAttributeReferences = {
            user: $68403ae4629ad89b$var$processPrivateAttributes(context.privateAttributeNames, true)
        };
        return created;
    }
    /**
     * Attempt to create a {@link Context} from an {@link LDContext}.
     * @param context The input context to create a Context from.
     * @returns a {@link Context}, if the context was not valid, then the returned contexts `valid`
     * property will be false.
     */ static fromLDContext(context) {
        if (!context) return $68403ae4629ad89b$var$Context.contextForError("unknown", "No context specified. Returning default value");
        if ($68403ae4629ad89b$var$isSingleKind(context)) return $68403ae4629ad89b$var$Context.fromSingleKindContext(context);
        if ($68403ae4629ad89b$var$isMultiKind(context)) return $68403ae4629ad89b$var$Context.fromMultiKindContext(context);
        if ($68403ae4629ad89b$var$isLegacyUser(context)) return $68403ae4629ad89b$var$Context.fromLegacyUser(context);
        return $68403ae4629ad89b$var$Context.contextForError("unknown", "Context was not of a valid kind");
    }
    /**
     * Attempt to get a value for the given context kind using the given reference.
     * @param reference The reference to the value to get.
     * @param kind The kind of the context to get the value for.
     * @returns a value or `undefined` if one is not found.
     */ valueForKind(reference, kind = $68403ae4629ad89b$var$DEFAULT_KIND) {
        if (reference.isKind) return this.kinds;
        return $68403ae4629ad89b$var$Context.getValueFromContext(reference, this.contextForKind(kind));
    }
    /**
     * Attempt to get a key for the specified kind.
     * @param kind The kind to get a key for.
     * @returns The key for the specified kind, or undefined.
     */ key(kind = $68403ae4629ad89b$var$DEFAULT_KIND) {
        var _a;
        return (_a = this.contextForKind(kind)) === null || _a === void 0 ? void 0 : _a.key;
    }
    /**
     * True if this is a multi-kind context.
     */ get isMultiKind() {
        return this.isMulti;
    }
    /**
     * Get the canonical key for this context.
     */ get canonicalKey() {
        if (this.isUser) return this.context.key;
        if (this.isMulti) return Object.keys(this.contexts).sort().map((key)=>`${key}:${$68403ae4629ad89b$var$encodeKey(this.contexts[key].key)}`).join(":");
        return `${this.kind}:${$68403ae4629ad89b$var$encodeKey(this.context.key)}`;
    }
    /**
     * Get the kinds of this context.
     */ get kinds() {
        if (this.isMulti) return Object.keys(this.contexts);
        return [
            this.kind
        ];
    }
    /**
     * Get the kinds, and their keys, for this context.
     */ get kindsAndKeys() {
        if (this.isMulti) return Object.entries(this.contexts).reduce((acc, [kind, context])=>{
            acc[kind] = context.key;
            return acc;
        }, {});
        return {
            [this.kind]: this.context.key
        };
    }
    /**
     * Get the attribute references.
     *
     * @param kind
     */ privateAttributes(kind) {
        var _a;
        return ((_a = this.privateAttributeReferences) === null || _a === void 0 ? void 0 : _a[kind]) || [];
    }
    /**
     * Get the underlying context objects from this context.
     *
     * This method is intended to be used in event generation.
     *
     * The returned objects should not be modified.
     */ getContexts() {
        if (this.isMulti) return Object.entries(this.contexts);
        return [
            [
                this.kind,
                this.context
            ]
        ];
    }
    get legacy() {
        return this.wasLegacy;
    }
}
$68403ae4629ad89b$var$Context.userKind = $68403ae4629ad89b$var$DEFAULT_KIND;
module.exports.default = $68403ae4629ad89b$var$Context;

});
parcelRequire.register("bf4hr", function(module, exports) {
"use strict";
/* eslint-disable class-methods-use-this */ /* eslint-disable max-classes-per-file */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.TypeValidators = module.exports.DateValidator = module.exports.Function = module.exports.StringMatchingRegex = module.exports.NumberWithMinimum = module.exports.TypeArray = module.exports.Type = module.exports.FactoryOrInstance = void 0;
/**
 * Validate a factory or instance.
 */ class $82f46a6cfa4d6e57$var$FactoryOrInstance {
    is(factoryOrInstance) {
        if (Array.isArray(factoryOrInstance)) return false;
        const anyFactory = factoryOrInstance;
        const typeOfFactory = typeof anyFactory;
        return typeOfFactory === "function" || typeOfFactory === "object";
    }
    getType() {
        return "factory method or object";
    }
}
module.exports.FactoryOrInstance = $82f46a6cfa4d6e57$var$FactoryOrInstance;
/**
 * Validate a basic type.
 */ class $82f46a6cfa4d6e57$var$Type {
    constructor(typeName, example){
        this.typeName = typeName;
        this.typeOf = typeof example;
    }
    is(u) {
        if (Array.isArray(u)) return false;
        return typeof u === this.typeOf;
    }
    getType() {
        return this.typeName;
    }
}
module.exports.Type = $82f46a6cfa4d6e57$var$Type;
/**
 * Validate an array of the specified type.
 *
 * This does not validate instances of types. All class instances
 * of classes will simply objects.
 */ class $82f46a6cfa4d6e57$var$TypeArray {
    constructor(typeName, example){
        this.typeName = typeName;
        this.typeOf = typeof example;
    }
    is(u) {
        if (Array.isArray(u)) {
            if (u.length > 0) return u.every((val)=>typeof val === this.typeOf);
            return true;
        }
        return false;
    }
    getType() {
        return this.typeName;
    }
}
module.exports.TypeArray = $82f46a6cfa4d6e57$var$TypeArray;
/**
 * Validate a value is a number and is greater or eval than a minimum.
 */ class $82f46a6cfa4d6e57$var$NumberWithMinimum extends $82f46a6cfa4d6e57$var$Type {
    constructor(min){
        super(`number with minimum value of ${min}`, 0);
        this.min = min;
    }
    is(u) {
        return typeof u === this.typeOf && u >= this.min;
    }
}
module.exports.NumberWithMinimum = $82f46a6cfa4d6e57$var$NumberWithMinimum;
/**
 * Validate a value is a string and it matches the given expression.
 */ class $82f46a6cfa4d6e57$var$StringMatchingRegex extends $82f46a6cfa4d6e57$var$Type {
    constructor(expression){
        super(`string matching ${expression}`, "");
        this.expression = expression;
    }
    is(u) {
        return !!u.match(this.expression);
    }
}
module.exports.StringMatchingRegex = $82f46a6cfa4d6e57$var$StringMatchingRegex;
/**
 * Validate a value is a function.
 */ class $82f46a6cfa4d6e57$var$Function {
    is(u) {
        // We cannot inspect the parameters and there isn't really
        // a generic function type we can instantiate.
        // So the type guard is here just to make TS comfortable
        // calling something after using this guard.
        return typeof u === "function";
    }
    getType() {
        return "function";
    }
}
module.exports.Function = $82f46a6cfa4d6e57$var$Function;
// Our reference SDK, Go, parses date/time strings with the time.RFC3339Nano format.
// This regex should match strings that are valid in that format, and no others.
// Acceptable:
//   2019-10-31T23:59:59Z, 2019-10-31T23:59:59.100Z,
//   2019-10-31T23:59:59-07, 2019-10-31T23:59:59-07:00, etc.
// Unacceptable: no "T", no time zone designation
const $82f46a6cfa4d6e57$var$DATE_REGEX = /^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d\d*)?(Z|[-+]\d\d(:\d\d)?)/;
/**
 * Validate a value is a date. Values which are numbers are treated as dates and any string
 * which if compliant with `time.RFC3339Nano` is a date.
 */ class $82f46a6cfa4d6e57$var$DateValidator {
    is(u) {
        return typeof u === "number" || typeof u === "string" && $82f46a6cfa4d6e57$var$DATE_REGEX.test(u);
    }
    getType() {
        return "date";
    }
}
module.exports.DateValidator = $82f46a6cfa4d6e57$var$DateValidator;
/**
 * A set of standard type validators.
 */ class $82f46a6cfa4d6e57$var$TypeValidators {
    static numberWithMin(min) {
        return new $82f46a6cfa4d6e57$var$NumberWithMinimum(min);
    }
    static stringMatchingRegex(expression) {
        return new $82f46a6cfa4d6e57$var$StringMatchingRegex(expression);
    }
}
module.exports.TypeValidators = $82f46a6cfa4d6e57$var$TypeValidators;
$82f46a6cfa4d6e57$var$TypeValidators.String = new $82f46a6cfa4d6e57$var$Type("string", "");
$82f46a6cfa4d6e57$var$TypeValidators.Number = new $82f46a6cfa4d6e57$var$Type("number", 0);
$82f46a6cfa4d6e57$var$TypeValidators.ObjectOrFactory = new $82f46a6cfa4d6e57$var$FactoryOrInstance();
$82f46a6cfa4d6e57$var$TypeValidators.Object = new $82f46a6cfa4d6e57$var$Type("object", {});
$82f46a6cfa4d6e57$var$TypeValidators.StringArray = new $82f46a6cfa4d6e57$var$TypeArray("string[]", "");
$82f46a6cfa4d6e57$var$TypeValidators.Boolean = new $82f46a6cfa4d6e57$var$Type("boolean", true);
$82f46a6cfa4d6e57$var$TypeValidators.Function = new $82f46a6cfa4d6e57$var$Function();
$82f46a6cfa4d6e57$var$TypeValidators.Date = new $82f46a6cfa4d6e57$var$DateValidator();

});


parcelRequire.register("fIlfZ", function(module, exports) {
"use strict";
// _meta is part of the specification.
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $1ZWUf = parcelRequire("1ZWUf");
// These attributes cannot be removed via a private attribute.
const $b70b743f5690821d$var$protectedAttributes = [
    "key",
    "kind",
    "_meta",
    "anonymous"
].map((str)=>new $1ZWUf.default(str, true));
// Attributes that should be stringified for legacy users.
const $b70b743f5690821d$var$legacyTopLevelCopyAttributes = [
    "name",
    "ip",
    "firstName",
    "lastName",
    "email",
    "avatar",
    "country"
];
function $b70b743f5690821d$var$compare(a, b) {
    return a.depth === b.length && b.every((value, index)=>value === a.getComponent(index));
}
function $b70b743f5690821d$var$cloneWithRedactions(target, references) {
    const stack = [];
    const cloned = {};
    const excluded = [];
    stack.push(...Object.keys(target).map((key)=>({
            key: key,
            ptr: [
                key
            ],
            source: target,
            parent: cloned,
            visited: [
                target
            ]
        })));
    while(stack.length){
        const item = stack.pop();
        const redactRef = references.find((ref)=>$b70b743f5690821d$var$compare(ref, item.ptr));
        if (!redactRef) {
            const value = item.source[item.key];
            // Handle null because it overlaps with object, which we will want to handle later.
            if (value === null) item.parent[item.key] = value;
            else if (Array.isArray(value)) item.parent[item.key] = [
                ...value
            ];
            else if (typeof value === "object") // Arrays and null must already be handled.
            // Prevent cycles by not visiting the same object
            // with in the same branch. Different branches
            // may contain the same object.
            //
            // Same object visited twice in different branches.
            // A -> B -> D
            //   -> C -> D
            // This is fine, which is why it doesn't just check if the object
            // was visited ever.
            {
                if (!item.visited.includes(value)) {
                    item.parent[item.key] = {};
                    stack.push(...Object.keys(value).map((key)=>({
                            key: key,
                            ptr: [
                                ...item.ptr,
                                key
                            ],
                            source: value,
                            parent: item.parent[item.key],
                            visited: [
                                ...item.visited,
                                value
                            ]
                        })));
                }
            } else item.parent[item.key] = value;
        } else excluded.push(redactRef.redactionName);
    }
    return {
        cloned: cloned,
        excluded: excluded.sort()
    };
}
class $b70b743f5690821d$var$ContextFilter {
    constructor(allAttributesPrivate, privateAttributes){
        this.allAttributesPrivate = allAttributesPrivate;
        this.privateAttributes = privateAttributes;
    }
    filter(context) {
        const contexts = context.getContexts();
        if (contexts.length === 1) return this.filterSingleKind(context, contexts[0][1], contexts[0][0]);
        const filteredMulti = {
            kind: "multi"
        };
        contexts.forEach(([kind, single])=>{
            filteredMulti[kind] = this.filterSingleKind(context, single, kind);
        });
        return filteredMulti;
    }
    getAttributesToFilter(context, single, kind) {
        return (this.allAttributesPrivate ? Object.keys(single).map((k)=>new $1ZWUf.default(k, true)) : [
            ...this.privateAttributes,
            ...context.privateAttributes(kind)
        ]).filter((attr)=>!$b70b743f5690821d$var$protectedAttributes.some((protectedAttr)=>protectedAttr.compare(attr)));
    }
    filterSingleKind(context, single, kind) {
        const { cloned: cloned, excluded: excluded } = $b70b743f5690821d$var$cloneWithRedactions(single, this.getAttributesToFilter(context, single, kind));
        if (context.legacy) $b70b743f5690821d$var$legacyTopLevelCopyAttributes.forEach((name)=>{
            if (name in cloned) cloned[name] = String(cloned[name]);
        });
        if (excluded.length) {
            if (!cloned._meta) cloned._meta = {};
            cloned._meta.redactedAttributes = excluded;
        }
        if (cloned._meta) {
            delete cloned._meta.privateAttributes;
            if (Object.keys(cloned._meta).length === 0) delete cloned._meta;
        }
        return cloned;
    }
}
module.exports.default = $b70b743f5690821d$var$ContextFilter;

});

parcelRequire.register("a21vu", function(module, exports) {
"use strict";
var $01e281129de1fe89$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $01e281129de1fe89$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) $01e281129de1fe89$var$__createBinding(exports1, m, p);
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.subsystem = void 0;

$01e281129de1fe89$var$__exportStar((parcelRequire("hwhcz")), module.exports);

$01e281129de1fe89$var$__exportStar((parcelRequire("5URkg")), module.exports);

$01e281129de1fe89$var$__exportStar((parcelRequire("1wr3l")), module.exports);

$01e281129de1fe89$var$__exportStar((parcelRequire("1l8XU")), module.exports);

$01e281129de1fe89$var$__exportStar((parcelRequire("co9yn")), module.exports);

module.exports.subsystem = (parcelRequire("lXhd8"));

});
parcelRequire.register("hwhcz", function(module, exports) {
"use strict";
var $cc12c4c0efa00891$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $cc12c4c0efa00891$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) $cc12c4c0efa00891$var$__createBinding(exports1, m, p);
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

$cc12c4c0efa00891$var$__exportStar((parcelRequire("7SUVX")), module.exports);

$cc12c4c0efa00891$var$__exportStar((parcelRequire("kE0ZD")), module.exports);

$cc12c4c0efa00891$var$__exportStar((parcelRequire("eXFy2")), module.exports);

$cc12c4c0efa00891$var$__exportStar((parcelRequire("ivCj3")), module.exports);

$cc12c4c0efa00891$var$__exportStar((parcelRequire("7FbY8")), module.exports);

$cc12c4c0efa00891$var$__exportStar((parcelRequire("74qsh")), module.exports);

});
parcelRequire.register("7SUVX", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("kE0ZD", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("eXFy2", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("ivCj3", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("7FbY8", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("74qsh", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});


parcelRequire.register("5URkg", function(module, exports) {
"use strict";
var $44eb8c1c4d933a06$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $44eb8c1c4d933a06$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) $44eb8c1c4d933a06$var$__createBinding(exports1, m, p);
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

$44eb8c1c4d933a06$var$__exportStar((parcelRequire("e0AyU")), module.exports);

$44eb8c1c4d933a06$var$__exportStar((parcelRequire("cCFtN")), module.exports);

$44eb8c1c4d933a06$var$__exportStar((parcelRequire("dPEtb")), module.exports);

});
parcelRequire.register("e0AyU", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("cCFtN", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("dPEtb", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});


parcelRequire.register("1wr3l", function(module, exports) {
"use strict";
var $11bdc3c56eedd2a9$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $11bdc3c56eedd2a9$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) $11bdc3c56eedd2a9$var$__createBinding(exports1, m, p);
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

$11bdc3c56eedd2a9$var$__exportStar((parcelRequire("aGvMB")), module.exports);

$11bdc3c56eedd2a9$var$__exportStar((parcelRequire("jKe24")), module.exports);

$11bdc3c56eedd2a9$var$__exportStar((parcelRequire("1ww48")), module.exports);

$11bdc3c56eedd2a9$var$__exportStar((parcelRequire("bVnsg")), module.exports);

});
parcelRequire.register("aGvMB", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("jKe24", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("1ww48", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("bVnsg", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});


parcelRequire.register("1l8XU", function(module, exports) {
"use strict";
// Lint issue is because there is 1 item currently. We do not want to default export it.
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("co9yn", function(module, exports) {
"use strict";
var $904f2312430f2214$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $904f2312430f2214$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) $904f2312430f2214$var$__createBinding(exports1, m, p);
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

$904f2312430f2214$var$__exportStar((parcelRequire("fbIkL")), module.exports);

$904f2312430f2214$var$__exportStar((parcelRequire("dUkPT")), module.exports);

$904f2312430f2214$var$__exportStar((parcelRequire("k26kz")), module.exports);

$904f2312430f2214$var$__exportStar((parcelRequire("gYRK3")), module.exports);

$904f2312430f2214$var$__exportStar((parcelRequire("7wO67")), module.exports);

$904f2312430f2214$var$__exportStar((parcelRequire("cb06k")), module.exports);

});
parcelRequire.register("fbIkL", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("dUkPT", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("k26kz", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("gYRK3", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("7wO67", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("cb06k", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});


parcelRequire.register("lXhd8", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.LDEventType = module.exports.LDDeliveryStatus = void 0;

var $338in = parcelRequire("338in");
Object.defineProperty(module.exports, "LDDeliveryStatus", {
    enumerable: true,
    get: function() {
        return $338in.LDDeliveryStatus;
    }
});
Object.defineProperty(module.exports, "LDEventType", {
    enumerable: true,
    get: function() {
        return $338in.LDEventType;
    }
});

});
parcelRequire.register("338in", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.LDDeliveryStatus = module.exports.LDEventType = void 0;
var $238816338df7cc6e$var$LDEventType;
(function(LDEventType) {
    LDEventType[LDEventType["AnalyticsEvents"] = 0] = "AnalyticsEvents";
    LDEventType[LDEventType["DiagnosticEvent"] = 1] = "DiagnosticEvent";
})($238816338df7cc6e$var$LDEventType || (module.exports.LDEventType = $238816338df7cc6e$var$LDEventType = {}));
var $238816338df7cc6e$var$LDDeliveryStatus;
(function(LDDeliveryStatus) {
    LDDeliveryStatus[LDDeliveryStatus["Succeeded"] = 0] = "Succeeded";
    LDDeliveryStatus[LDDeliveryStatus["Failed"] = 1] = "Failed";
    LDDeliveryStatus[LDDeliveryStatus["FailedAndMustShutDown"] = 2] = "FailedAndMustShutDown";
})($238816338df7cc6e$var$LDDeliveryStatus || (module.exports.LDDeliveryStatus = $238816338df7cc6e$var$LDDeliveryStatus = {}));

});



parcelRequire.register("bLwGw", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.SafeLogger = module.exports.BasicLogger = void 0;

var $4UrEE = parcelRequire("4UrEE");
module.exports.BasicLogger = $4UrEE.default;

var $1IZqe = parcelRequire("1IZqe");
module.exports.SafeLogger = $1IZqe.default;

});
parcelRequire.register("4UrEE", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $2Difs = parcelRequire("2Difs");
const $3931d8003bc65f00$var$LogPriority = {
    debug: 0,
    info: 1,
    warn: 2,
    error: 3,
    none: 4
};
const $3931d8003bc65f00$var$LevelNames = [
    "debug",
    "info",
    "warn",
    "error",
    "none"
];
/**
 * A basic logger which handles filtering by level.
 *
 * With the default options it will write to `console.error`
 * and it will use the formatting provided by `console.error`.
 * If the destination is overwritten, then it will use an included
 * formatter similar to `util.format`.
 *
 * If a formatter is available, then that should be overridden
 * as well for performance.
 */ class $3931d8003bc65f00$var$BasicLogger {
    /**
     * This should only be used as a default fallback and not as a convenient
     * solution. In most cases you should construct a new instance with the
     * appropriate options for your specific needs.
     */ static get() {
        return new $3931d8003bc65f00$var$BasicLogger({});
    }
    constructor(options){
        var _a, _b, _c;
        this.logLevel = (_b = $3931d8003bc65f00$var$LogPriority[(_a = options.level) !== null && _a !== void 0 ? _a : "info"]) !== null && _b !== void 0 ? _b : $3931d8003bc65f00$var$LogPriority.info;
        this.name = (_c = options.name) !== null && _c !== void 0 ? _c : "LaunchDarkly";
        // eslint-disable-next-line no-console
        this.destination = options.destination;
        this.formatter = options.formatter;
    }
    tryFormat(...args) {
        var _a;
        try {
            if (this.formatter) // In case the provided formatter fails.
            return (_a = this.formatter) === null || _a === void 0 ? void 0 : _a.call(this, ...args);
            return (0, $2Difs.default)(...args);
        } catch (_b) {
            return (0, $2Difs.default)(...args);
        }
    }
    tryWrite(msg) {
        try {
            this.destination(msg);
        } catch (_a) {
            // eslint-disable-next-line no-console
            console.error(msg);
        }
    }
    log(level, args) {
        if (level >= this.logLevel) {
            const prefix = `${$3931d8003bc65f00$var$LevelNames[level]}: [${this.name}]`;
            try {
                if (this.destination) this.tryWrite(`${prefix} ${this.tryFormat(...args)}`);
                else // `console.error` has its own formatter.
                // So we don't need to do anything.
                // eslint-disable-next-line no-console
                console.error(...args);
            } catch (_a) {
                // If all else fails do not break.
                // eslint-disable-next-line no-console
                console.error(...args);
            }
        }
    }
    error(...args) {
        this.log($3931d8003bc65f00$var$LogPriority.error, args);
    }
    warn(...args) {
        this.log($3931d8003bc65f00$var$LogPriority.warn, args);
    }
    info(...args) {
        this.log($3931d8003bc65f00$var$LogPriority.info, args);
    }
    debug(...args) {
        this.log($3931d8003bc65f00$var$LogPriority.debug, args);
    }
}
module.exports.default = $3931d8003bc65f00$var$BasicLogger;

});
parcelRequire.register("2Difs", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $bf4hr = parcelRequire("bf4hr");
/**
 * Attempt to produce a string representation of a value.
 * The format should be roughly comparable to `util.format`
 * aside from object which will be JSON versus the `util.inspect`
 * format.
 * @param val
 * @returns A string representation of the value if possible.
 */ function $1ead61096d9d6f65$var$tryStringify(val) {
    if (typeof val === "string") return val;
    if (val === undefined) return "undefined";
    if (val === null) return "null";
    if (Object.prototype.hasOwnProperty.call(val, "toString")) try {
        return val.toString();
    } catch (_a) {
    /* Keep going */ }
    if (typeof val === "bigint") return `${val}n`;
    try {
        return JSON.stringify(val);
    } catch (error) {
        if (error instanceof TypeError && error.message.indexOf("circular") >= 0) return "[Circular]";
        return "[Not Stringifiable]";
    }
}
/**
 * Attempt to produce a numeric representation.
 * BigInts have an `n` suffix.
 * @param val
 * @returns The numeric representation or 'NaN' if not numeric.
 */ function $1ead61096d9d6f65$var$toNumber(val) {
    // Symbol has to be treated special because it will
    // throw an exception if an attempt is made to convert it.
    if (typeof val === "symbol") return "NaN";
    if (typeof val === "bigint") return `${val}n`;
    return String(Number(val));
}
/**
 * Attempt to produce an integer representation.
 * BigInts have an `n` suffix.
 * @param val
 * @returns The integer representation or 'NaN' if not numeric.
 */ function $1ead61096d9d6f65$var$toInt(val) {
    if (typeof val === "symbol") return "NaN";
    if (typeof val === "bigint") return `${val}n`;
    return String(parseInt(val, 10));
}
/**
 * Attempt to produce a float representation.
 * BigInts have an `n` suffix.
 * @param val
 * @returns The integer representation or 'NaN' if not numeric.
 */ function $1ead61096d9d6f65$var$toFloat(val) {
    if (typeof val === "symbol") return "NaN";
    return String(parseFloat(val));
}
// Based on:
// https://nodejs.org/api/util.html#utilformatformat-args
// The result will not match node exactly, but it should get the
// right information through.
const $1ead61096d9d6f65$var$escapes = {
    s: (val)=>$1ead61096d9d6f65$var$tryStringify(val),
    d: (val)=>$1ead61096d9d6f65$var$toNumber(val),
    i: (val)=>$1ead61096d9d6f65$var$toInt(val),
    f: (val)=>$1ead61096d9d6f65$var$toFloat(val),
    j: (val)=>$1ead61096d9d6f65$var$tryStringify(val),
    o: (val)=>$1ead61096d9d6f65$var$tryStringify(val),
    O: (val)=>$1ead61096d9d6f65$var$tryStringify(val),
    c: ()=>""
};
/**
 * A basic formatted for use where `util.format` is not available.
 * This will not be as performant, but it will produce formatted
 * messages.
 *
 * @internal
 *
 * @param args
 * @returns Formatted string.
 */ function $1ead61096d9d6f65$var$format(...args) {
    var _a;
    const formatString = args.shift();
    if ($bf4hr.TypeValidators.String.is(formatString)) {
        let out = "";
        let i = 0;
        while(i < formatString.length){
            const char = formatString.charAt(i);
            if (char === "%") {
                const nextIndex = i + 1;
                if (nextIndex < formatString.length) {
                    const nextChar = formatString.charAt(i + 1);
                    if (nextChar in $1ead61096d9d6f65$var$escapes && args.length) {
                        const value = args.shift();
                        // This rule is for math.
                        // eslint-disable-next-line no-unsafe-optional-chaining
                        out += (_a = $1ead61096d9d6f65$var$escapes[nextChar]) === null || _a === void 0 ? void 0 : _a.call($1ead61096d9d6f65$var$escapes, value);
                    } else if (nextChar === "%") out += "%";
                    else out += `%${nextChar}`;
                    i += 2;
                }
            } else {
                out += char;
                i += 1;
            }
        }
        // If there are any args left after we exhaust the format string
        // then just stick those on the end.
        if (args.length) {
            if (out.length) out += " ";
            out += args.map($1ead61096d9d6f65$var$tryStringify).join(" ");
        }
        return out;
    }
    return args.map($1ead61096d9d6f65$var$tryStringify).join(" ");
}
module.exports.default = $1ead61096d9d6f65$var$format;

});


parcelRequire.register("1IZqe", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $bf4hr = parcelRequire("bf4hr");
const $14198ba170dc07a9$var$loggerRequirements = {
    error: $bf4hr.TypeValidators.Function,
    warn: $bf4hr.TypeValidators.Function,
    info: $bf4hr.TypeValidators.Function,
    debug: $bf4hr.TypeValidators.Function
};
/**
 * The safeLogger logic exists because we allow the application to pass in a custom logger, but
 * there is no guarantee that the logger works correctly and if it ever throws exceptions there
 * could be serious consequences (e.g. an uncaught exception within an error event handler, due
 * to the SDK trying to log the error, can terminate the application). An exception could result
 * from faulty logic in the logger implementation, or it could be that this is not a logger at
 * all but some other kind of object; the former is handled by a catch block that logs an error
 * message to the SDK's default logger, and we can at least partly guard against the latter by
 * checking for the presence of required methods at configuration time.
 */ class $14198ba170dc07a9$var$SafeLogger {
    /**
     * Construct a safe logger with the specified logger.
     * @param logger The logger to use.
     * @param fallback A fallback logger to use in case an issue is  encountered using
     * the provided logger.
     */ constructor(logger, fallback){
        Object.entries($14198ba170dc07a9$var$loggerRequirements).forEach(([level, validator])=>{
            if (!validator.is(logger[level])) throw new Error(`Provided logger instance must support logger.${level}(...) method`);
        });
        this.logger = logger;
        this.fallback = fallback;
    }
    log(level, args) {
        try {
            this.logger[level](...args);
        } catch (_a) {
            // If all else fails do not break.
            this.fallback[level](...args);
        }
    }
    error(...args) {
        this.log("error", args);
    }
    warn(...args) {
        this.log("warn", args);
    }
    info(...args) {
        this.log("info", args);
    }
    debug(...args) {
        this.log("debug", args);
    }
}
module.exports.default = $14198ba170dc07a9$var$SafeLogger;

});


parcelRequire.register("h5MiK", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.ClientContext = module.exports.ServiceEndpoints = module.exports.OptionMessages = module.exports.ApplicationTags = void 0;

var $fQ8fD = parcelRequire("fQ8fD");
module.exports.ApplicationTags = $fQ8fD.default;

var $eTxTg = parcelRequire("eTxTg");
module.exports.ClientContext = $eTxTg.default;

var $csIZc = parcelRequire("csIZc");
module.exports.OptionMessages = $csIZc.default;

var $bNU7L = parcelRequire("bNU7L");
module.exports.ServiceEndpoints = $bNU7L.default;

});
parcelRequire.register("fQ8fD", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $bf4hr = parcelRequire("bf4hr");

var $csIZc = parcelRequire("csIZc");
/**
 * Expression to validate characters that are allowed in tag keys and values.
 */ const $b8821cd7c3622450$var$allowedTagCharacters = /^(\w|\.|-)+$/;
const $b8821cd7c3622450$var$regexValidator = $bf4hr.TypeValidators.stringMatchingRegex($b8821cd7c3622450$var$allowedTagCharacters);
const $b8821cd7c3622450$var$tagValidator = {
    is: (u, name)=>{
        if ($b8821cd7c3622450$var$regexValidator.is(u)) {
            if (u.length > 64) return {
                valid: false,
                message: $csIZc.default.tagValueTooLong(name)
            };
            return {
                valid: true
            };
        }
        return {
            valid: false,
            message: $csIZc.default.invalidTagValue(name)
        };
    }
};
/**
 * Class for managing tags.
 */ class $b8821cd7c3622450$var$ApplicationTags {
    constructor(options){
        var _a, _b;
        const tags = {};
        const application = options === null || options === void 0 ? void 0 : options.application;
        if ((application === null || application === void 0 ? void 0 : application.id) !== null && (application === null || application === void 0 ? void 0 : application.id) !== undefined) {
            const { valid: valid, message: message } = $b8821cd7c3622450$var$tagValidator.is(application.id, "application.id");
            if (!valid) (_a = options.logger) === null || _a === void 0 || _a.warn(message);
            else tags["application-id"] = [
                application.id
            ];
        }
        if ((application === null || application === void 0 ? void 0 : application.version) !== null && (application === null || application === void 0 ? void 0 : application.version) !== undefined) {
            const { valid: valid, message: message } = $b8821cd7c3622450$var$tagValidator.is(application.version, "application.version");
            if (!valid) (_b = options.logger) === null || _b === void 0 || _b.warn(message);
            else tags["application-version"] = [
                application.version
            ];
        }
        const tagKeys = Object.keys(tags);
        if (tagKeys.length) this.value = tagKeys.sort().flatMap((key)=>tags[key].sort().map((value)=>`${key}/${value}`)).join(" ");
    }
}
module.exports.default = $b8821cd7c3622450$var$ApplicationTags;

});
parcelRequire.register("csIZc", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * Messages for issues which can be encountered from processing the configuration options.
 */ class $912afedc241c310d$var$OptionMessages {
    static deprecated(oldName, newName) {
        return `"${oldName}" is deprecated, please use "${newName}"`;
    }
    static optionBelowMinimum(name, value, min) {
        return `Config option "${name}" had invalid value of ${value}, using minimum of ${min} instead`;
    }
    static unknownOption(name) {
        return `Ignoring unknown config option "${name}"`;
    }
    static wrongOptionType(name, expectedType, actualType) {
        return `Config option "${name}" should be of type ${expectedType}, got ${actualType}, using default value`;
    }
    static wrongOptionTypeBoolean(name, actualType) {
        return `Config option "${name}" should be a boolean, got ${actualType}, converting to boolean`;
    }
    static invalidTagValue(name) {
        return `Config option "${name}" must only contain letters, numbers, ., _ or -.`;
    }
    static tagValueTooLong(name) {
        return `Value of "${name}" was longer than 64 characters and was discarded.`;
    }
    static partialEndpoint(name) {
        return `You have set custom uris without specifying the ${name} URI; connections may not work properly`;
    }
}
module.exports.default = $912afedc241c310d$var$OptionMessages;

});


parcelRequire.register("eTxTg", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * The client context provides basic configuration and platform support which are required
 * when building SDK components.
 */ class $ad807da879ca87da$var$ClientContext {
    constructor(sdkKey, configuration, platform){
        this.platform = platform;
        this.basicConfiguration = {
            logger: configuration.logger,
            offline: configuration.offline,
            sdkKey: sdkKey,
            serviceEndpoints: configuration.serviceEndpoints
        };
    }
}
module.exports.default = $ad807da879ca87da$var$ClientContext;

});

parcelRequire.register("bNU7L", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
function $897fce6df0805951$var$canonicalizeUri(uri) {
    return uri.replace(/\/+$/, "");
}
/**
 * Specifies the base service URIs used by SDK components.
 */ class $897fce6df0805951$var$ServiceEndpoints {
    constructor(streaming, polling, events){
        this.streaming = $897fce6df0805951$var$canonicalizeUri(streaming);
        this.polling = $897fce6df0805951$var$canonicalizeUri(polling);
        this.events = $897fce6df0805951$var$canonicalizeUri(events);
    }
}
module.exports.default = $897fce6df0805951$var$ServiceEndpoints;

});


parcelRequire.register("aXJyX", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.noop = void 0;

var $c0EeG = parcelRequire("c0EeG");
module.exports.noop = $c0EeG.default;

});
parcelRequire.register("c0EeG", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.default = ()=>{};

});


parcelRequire.register("1aCcX", function(module, exports) {
"use strict";
var $0da45cf09db0573b$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $0da45cf09db0573b$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) $0da45cf09db0573b$var$__createBinding(exports1, m, p);
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

$0da45cf09db0573b$var$__exportStar((parcelRequire("92Rdg")), module.exports);

});
parcelRequire.register("92Rdg", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.EventProcessor = module.exports.InputIdentifyEvent = module.exports.InputEvalEvent = module.exports.InputCustomEvent = void 0;

var $5ouil = parcelRequire("5ouil");
module.exports.EventProcessor = $5ouil.default;

var $jhfhP = parcelRequire("jhfhP");
module.exports.InputCustomEvent = $jhfhP.default;

var $f3ji1 = parcelRequire("f3ji1");
module.exports.InputEvalEvent = $f3ji1.default;

var $afMo7 = parcelRequire("afMo7");
module.exports.InputIdentifyEvent = $afMo7.default;

});
parcelRequire.register("5ouil", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $338in = parcelRequire("338in");

var $1ZWUf = parcelRequire("1ZWUf");

var $fIlfZ = parcelRequire("fIlfZ");

var $dLncl = parcelRequire("dLncl");

var $f4Euz = parcelRequire("f4Euz");

var $gMvZM = parcelRequire("gMvZM");
class $3ed6b1972a0b462a$var$EventProcessor {
    constructor(config, clientContext, eventSender, contextDeduplicator, diagnosticsManager){
        this.eventSender = eventSender;
        this.contextDeduplicator = contextDeduplicator;
        this.diagnosticsManager = diagnosticsManager;
        this.summarizer = new $dLncl.default();
        this.queue = [];
        this.lastKnownPastTime = 0;
        this.droppedEvents = 0;
        this.deduplicatedUsers = 0;
        this.exceededCapacity = false;
        this.eventsInLastBatch = 0;
        this.shutdown = false;
        this.flushUsersTimer = null;
        this.capacity = config.eventsCapacity;
        this.logger = clientContext.basicConfiguration.logger;
        this.contextFilter = new $fIlfZ.default(config.allAttributesPrivate, config.privateAttributes.map((ref)=>new $1ZWUf.default(ref)));
        if (this.contextDeduplicator.flushInterval !== undefined) this.flushUsersTimer = setInterval(()=>{
            this.contextDeduplicator.flush();
        }, this.contextDeduplicator.flushInterval * 1000);
        this.flushTimer = setInterval(async ()=>{
            try {
                await this.flush();
            } catch (_a) {
            // Eat the errors.
            }
        }, config.flushInterval * 1000);
        if (this.diagnosticsManager) {
            const initEvent = diagnosticsManager.createInitEvent();
            this.postDiagnosticEvent(initEvent);
            this.diagnosticsTimer = setInterval(()=>{
                const statsEvent = this.diagnosticsManager.createStatsEventAndReset(this.droppedEvents, this.deduplicatedUsers, this.eventsInLastBatch);
                this.droppedEvents = 0;
                this.deduplicatedUsers = 0;
                this.postDiagnosticEvent(statsEvent);
            }, config.diagnosticRecordingInterval * 1000);
        }
    }
    postDiagnosticEvent(event) {
        this.eventSender.sendEventData($338in.LDEventType.DiagnosticEvent, event);
    }
    close() {
        clearInterval(this.flushTimer);
        if (this.flushUsersTimer) clearInterval(this.flushUsersTimer);
        if (this.diagnosticsTimer) clearInterval(this.diagnosticsTimer);
    }
    async flush() {
        var _a;
        if (this.shutdown) throw new $gMvZM.default("Events cannot be posted because SDK key is invalid");
        const eventsToFlush = this.queue;
        this.queue = [];
        const summary = this.summarizer.getSummary();
        this.summarizer.clearSummary();
        if (Object.keys(summary.features).length) eventsToFlush.push(summary);
        if (!eventsToFlush.length) return;
        this.eventsInLastBatch = eventsToFlush.length;
        (_a = this.logger) === null || _a === void 0 || _a.debug("Flushing %d events", eventsToFlush.length);
        await this.tryPostingEvents(eventsToFlush);
    }
    sendEvent(inputEvent) {
        if (this.shutdown) return;
        this.summarizer.summarizeEvent(inputEvent);
        const isFeatureEvent = (0, $f4Euz.isFeature)(inputEvent);
        const addFullEvent = isFeatureEvent && inputEvent.trackEvents || !isFeatureEvent;
        const addDebugEvent = this.shouldDebugEvent(inputEvent);
        const isIdentifyEvent = (0, $f4Euz.isIdentify)(inputEvent);
        const shouldNotDeduplicate = this.contextDeduplicator.processContext(inputEvent.context);
        // If there is no cache, then it will never be in the cache.
        if (!shouldNotDeduplicate) {
            if (!isIdentifyEvent) this.deduplicatedUsers += 1;
        }
        const addIndexEvent = shouldNotDeduplicate && !isIdentifyEvent;
        if (addIndexEvent) this.enqueue({
            kind: "index",
            creationDate: inputEvent.creationDate,
            context: this.contextFilter.filter(inputEvent.context)
        });
        if (addFullEvent) this.enqueue(this.makeOutputEvent(inputEvent, false));
        if (addDebugEvent) this.enqueue(this.makeOutputEvent(inputEvent, true));
    }
    makeOutputEvent(event, debug) {
        switch(event.kind){
            case "feature":
                {
                    const out = {
                        kind: debug ? "debug" : "feature",
                        creationDate: event.creationDate,
                        key: event.key,
                        value: event.value,
                        default: event.default,
                        prereqOf: event.prereqOf
                    };
                    if (event.variation !== undefined) out.variation = event.variation;
                    if (event.version !== undefined) out.version = event.version;
                    if (event.reason) out.reason = event.reason;
                    if (debug) out.context = this.contextFilter.filter(event.context);
                    else out.contextKeys = event.context.kindsAndKeys;
                    return out;
                }
            case "identify":
                return {
                    kind: "identify",
                    creationDate: event.creationDate,
                    context: this.contextFilter.filter(event.context)
                };
            case "custom":
                {
                    const out = {
                        kind: "custom",
                        creationDate: event.creationDate,
                        key: event.key,
                        contextKeys: event.context.kindsAndKeys
                    };
                    if (event.data !== undefined) out.data = event.data;
                    if (event.metricValue !== undefined) out.metricValue = event.metricValue;
                    return out;
                }
            default:
                // This would happen during the addition of a new event type to the SDK.
                return event;
        }
    }
    enqueue(event) {
        var _a;
        if (this.queue.length < this.capacity) {
            this.queue.push(event);
            this.exceededCapacity = false;
        } else {
            if (!this.exceededCapacity) {
                this.exceededCapacity = true;
                (_a = this.logger) === null || _a === void 0 || _a.warn("Exceeded event queue capacity. Increase capacity to avoid dropping events.");
            }
            this.droppedEvents += 1;
        }
    }
    shouldDebugEvent(event) {
        return (0, $f4Euz.isFeature)(event) && event.debugEventsUntilDate && event.debugEventsUntilDate > this.lastKnownPastTime && event.debugEventsUntilDate > Date.now();
    }
    async tryPostingEvents(events) {
        const res = await this.eventSender.sendEventData($338in.LDEventType.AnalyticsEvents, events);
        if (res.status === $338in.LDDeliveryStatus.FailedAndMustShutDown) this.shutdown = true;
        if (res.serverTime) this.lastKnownPastTime = res.serverTime;
        if (res.error) throw res.error;
    }
}
module.exports.default = $3ed6b1972a0b462a$var$EventProcessor;

});
parcelRequire.register("dLncl", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $f4Euz = parcelRequire("f4Euz");

var $dR2PZ = parcelRequire("dR2PZ");
function $a051a8d5175f16c8$var$counterKey(event) {
    return `${event.key}:${event.variation !== null && event.variation !== undefined ? event.variation : ""}:${event.version !== null && event.version !== undefined ? event.version : ""}`;
}
/**
 * @internal
 */ class $a051a8d5175f16c8$var$EventSummarizer {
    constructor(){
        this.startDate = 0;
        this.endDate = 0;
        this.counters = {};
        this.contextKinds = {};
    }
    summarizeEvent(event) {
        if ((0, $f4Euz.isFeature)(event)) {
            const countKey = $a051a8d5175f16c8$var$counterKey(event);
            const counter = this.counters[countKey];
            let kinds = this.contextKinds[event.key];
            if (!kinds) {
                kinds = new Set();
                this.contextKinds[event.key] = kinds;
            }
            event.context.kinds.forEach((kind)=>kinds.add(kind));
            if (counter) counter.increment();
            else this.counters[countKey] = new $dR2PZ.default(1, event.key, event.value, event.default, event.version, event.variation);
            if (this.startDate === 0 || event.creationDate < this.startDate) this.startDate = event.creationDate;
            if (event.creationDate > this.endDate) this.endDate = event.creationDate;
        }
    }
    getSummary() {
        const features = Object.values(this.counters).reduce((acc, counter)=>{
            let flagSummary = acc[counter.key];
            if (!flagSummary) {
                flagSummary = {
                    default: counter.default,
                    counters: [],
                    contextKinds: [
                        ...this.contextKinds[counter.key]
                    ]
                };
                acc[counter.key] = flagSummary;
            }
            const counterOut = {
                value: counter.value,
                count: counter.count
            };
            if (counter.variation !== undefined && counter.variation !== null) counterOut.variation = counter.variation;
            if (counter.version !== undefined && counter.version !== null) counterOut.version = counter.version;
            else counterOut.unknown = true;
            flagSummary.counters.push(counterOut);
            return acc;
        }, {});
        return {
            startDate: this.startDate,
            endDate: this.endDate,
            features: features,
            kind: "summary"
        };
    }
    clearSummary() {
        this.startDate = 0;
        this.endDate = 0;
        this.counters = {};
        this.contextKinds = {};
    }
}
module.exports.default = $a051a8d5175f16c8$var$EventSummarizer;

});
parcelRequire.register("f4Euz", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.isIdentify = module.exports.isCustom = module.exports.isFeature = void 0;
function $af96a3a4abb46b0c$var$isFeature(u) {
    return u.kind === "feature";
}
module.exports.isFeature = $af96a3a4abb46b0c$var$isFeature;
function $af96a3a4abb46b0c$var$isCustom(u) {
    return u.kind === "custom";
}
module.exports.isCustom = $af96a3a4abb46b0c$var$isCustom;
function $af96a3a4abb46b0c$var$isIdentify(u) {
    return u.kind === "identify";
}
module.exports.isIdentify = $af96a3a4abb46b0c$var$isIdentify;

});

parcelRequire.register("dR2PZ", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * @internal
 */ class $a1626d14fb782b67$var$SummaryCounter {
    constructor(count, key, value, defValue, version, variation){
        this.count = count;
        this.key = key;
        this.value = value;
        this.version = version;
        this.variation = variation;
        this.default = defValue;
    }
    increment() {
        this.count += 1;
    }
}
module.exports.default = $a1626d14fb782b67$var$SummaryCounter;

});


parcelRequire.register("gMvZM", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
class $c379f2a9cae4fe13$var$LDInvalidSDKKeyError extends Error {
    constructor(message){
        super(message);
        this.name = "LaunchDarklyInvalidSDKKeyError";
    }
}
module.exports.default = $c379f2a9cae4fe13$var$LDInvalidSDKKeyError;

});


parcelRequire.register("jhfhP", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
class $e08b766db539a566$var$InputCustomEvent {
    constructor(context, key, data, metricValue){
        this.key = key;
        this.data = data;
        this.metricValue = metricValue;
        this.kind = "custom";
        this.creationDate = Date.now();
        this.context = context;
    }
}
module.exports.default = $e08b766db539a566$var$InputCustomEvent;

});

parcelRequire.register("f3ji1", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
class $af56195ee6ad44ac$var$InputEvalEvent {
    constructor(withReasons, context, key, defValue, detail, version, variation, trackEvents, prereqOf, reason, debugEventsUntilDate){
        var _a;
        this.key = key;
        this.kind = "feature";
        this.creationDate = Date.now();
        this.context = context;
        this.default = defValue;
        this.variation = (_a = detail.variationIndex) !== null && _a !== void 0 ? _a : undefined;
        this.value = detail.value;
        if (version !== undefined) this.version = version;
        if (variation !== undefined) this.variation = variation;
        if (trackEvents !== undefined) this.trackEvents = trackEvents;
        if (prereqOf !== undefined) this.prereqOf = prereqOf;
        if (reason !== undefined) this.reason = reason;
        if (debugEventsUntilDate !== undefined) this.debugEventsUntilDate = debugEventsUntilDate;
    }
}
module.exports.default = $af56195ee6ad44ac$var$InputEvalEvent;

});

parcelRequire.register("afMo7", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
class $7770d6f541b471b9$var$InputIdentifyEvent {
    constructor(context){
        this.kind = "identify";
        this.creationDate = Date.now();
        this.context = context;
    }
}
module.exports.default = $7770d6f541b471b9$var$InputIdentifyEvent;

});




parcelRequire.register("5FZac", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $74cHE = parcelRequire("74cHE");

var $henhl = parcelRequire("henhl");

var $34z57 = parcelRequire("34z57");
const $422039e07e524b49$var$DEFAULT_STALE_AFTER_SECONDS = 120;
const $422039e07e524b49$var$DEFAULT_STATUS_POLL_INTERVAL_SECONDS = 5;
const $422039e07e524b49$var$DEFAULT_USER_CACHE_SIZE = 1000;
const $422039e07e524b49$var$DEFAULT_USER_CACHE_TIME_SECONDS = 5;
class $422039e07e524b49$var$BigSegmentsManager {
    constructor(store, // The store will have been created before the manager is instantiated, so we do not need
    // it in the options at this stage.
    config, logger, crypto){
        this.store = store;
        this.logger = logger;
        this.crypto = crypto;
        this.statusProvider = new $henhl.default(async ()=>this.pollStoreAndUpdateStatus());
        this.staleTimeMs = ($74cHE.TypeValidators.Number.is(config.staleAfter) && config.staleAfter > 0 ? config.staleAfter : $422039e07e524b49$var$DEFAULT_STALE_AFTER_SECONDS) * 1000;
        const pollIntervalMs = ($74cHE.TypeValidators.Number.is(config.statusPollInterval) && config.statusPollInterval > 0 ? config.statusPollInterval : $422039e07e524b49$var$DEFAULT_STATUS_POLL_INTERVAL_SECONDS) * 1000;
        this.pollHandle = store ? setInterval(()=>this.pollStoreAndUpdateStatus(), pollIntervalMs) : null;
        if (store) this.cache = new $34z57.default({
            max: config.userCacheSize || $422039e07e524b49$var$DEFAULT_USER_CACHE_SIZE,
            maxAge: (config.userCacheTime || $422039e07e524b49$var$DEFAULT_USER_CACHE_TIME_SECONDS) * 1000
        });
    }
    close() {
        if (this.pollHandle) {
            clearInterval(this.pollHandle);
            this.pollHandle = undefined;
        }
        if (this.store) this.store.close();
    }
    async getUserMembership(userKey) {
        var _a, _b, _c;
        if (!this.store) return undefined;
        const memberCache = (_a = this.cache) === null || _a === void 0 ? void 0 : _a.get(userKey);
        let membership;
        if (!memberCache) try {
            membership = await this.store.getUserMembership(this.hashForUserKey(userKey));
            const cacheItem = {
                membership: membership
            };
            (_b = this.cache) === null || _b === void 0 || _b.set(userKey, cacheItem);
        } catch (err) {
            (_c = this.logger) === null || _c === void 0 || _c.error(`Big Segment store membership query returned error: ${err}`);
            return [
                null,
                "STORE_ERROR"
            ];
        }
        else membership = memberCache.membership;
        if (!this.statusProvider.getStatus()) await this.pollStoreAndUpdateStatus();
        // Status will be present, because polling is done earlier in this method if it is not.
        const lastStatus = this.statusProvider.getStatus();
        if (!lastStatus.available) return [
            membership || null,
            "STORE_ERROR"
        ];
        return [
            membership || null,
            lastStatus.stale ? "STALE" : "HEALTHY"
        ];
    }
    async pollStoreAndUpdateStatus() {
        var _a, _b, _c;
        if (!this.store) {
            this.statusProvider.setStatus({
                available: false,
                stale: false
            });
            return;
        }
        (_a = this.logger) === null || _a === void 0 || _a.debug("Querying Big Segment store status");
        let newStatus;
        try {
            const metadata = await this.store.getMetadata();
            newStatus = {
                available: true,
                stale: !metadata || !metadata.lastUpToDate || this.isStale(metadata.lastUpToDate)
            };
        } catch (err) {
            (_b = this.logger) === null || _b === void 0 || _b.error(`Big Segment store status query returned error: ${err}`);
            newStatus = {
                available: false,
                stale: false
            };
        }
        const lastStatus = this.statusProvider.getStatus();
        if (!lastStatus || lastStatus.available !== newStatus.available || lastStatus.stale !== newStatus.stale) {
            (_c = this.logger) === null || _c === void 0 || _c.debug("Big Segment store status changed from %s to %s", JSON.stringify(lastStatus), JSON.stringify(newStatus));
            this.statusProvider.setStatus(newStatus);
            this.statusProvider.notify();
        }
    }
    hashForUserKey(userKey) {
        const hasher = this.crypto.createHash("sha256");
        hasher.update(userKey);
        return hasher.digest("base64");
    }
    isStale(timestamp) {
        return Date.now() - timestamp >= this.staleTimeMs;
    }
}
module.exports.default = $422039e07e524b49$var$BigSegmentsManager;

});
parcelRequire.register("34z57", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * @internal
 */ class $23ccf5482e0ce2ef$var$LruCache {
    constructor(options){
        this.keyMap = new Map();
        this.head = 0;
        this.tail = 0;
        this.size = 0;
        const { max: max } = options;
        this.max = max;
        // This is effectively a struct-of-arrays implementation
        // of a linked list. All the nodes exist statically and then
        // the links between them are changed by updating the previous/next
        // arrays.
        this.values = new Array(max);
        this.keys = new Array(max);
        this.next = new Uint32Array(max);
        this.prev = new Uint32Array(max);
        if (options.maxAge) {
            this.lastUpdated = new Array(max).fill(0);
            this.maxAge = options.maxAge;
        } else {
            // To please linting.
            this.lastUpdated = [];
            this.maxAge = 0;
        }
    }
    set(key, val) {
        let index = this.keyMap.get(key);
        if (index === undefined) {
            index = this.index();
            this.keys[index] = key;
            this.keyMap.set(key, index);
            this.next[this.tail] = index;
            this.prev[index] = this.tail;
            this.tail = index;
            this.size += 1;
        } else this.setTail(index);
        this.values[index] = val;
        if (this.maxAge) this.lastUpdated[index] = Date.now();
    }
    get(key) {
        const index = this.keyMap.get(key);
        if (index !== undefined) {
            if (this.maxAge) {
                const lastUpdated = this.lastUpdated[index];
                if (Date.now() - lastUpdated > this.maxAge) // The oldest items are always the head, so they get incrementally
                // replaced. This would not be the case if we supported per item TTL.
                return undefined;
            }
            this.setTail(index);
            if (this.maxAge) this.lastUpdated[index] = Date.now();
            return this.values[index];
        }
        return undefined;
    }
    clear() {
        this.head = 0;
        this.tail = 0;
        this.size = 0;
        this.values.fill(undefined);
        this.keys.fill(undefined);
        this.next.fill(0);
        this.prev.fill(0);
    }
    index() {
        if (this.size === 0) return this.tail;
        if (this.size === this.max) return this.evict();
        // The initial list is being populated, so we can just continue increasing size.
        return this.size;
    }
    evict() {
        const { head: head } = this;
        const k = this.keys[head];
        this.head = this.next[head];
        this.keyMap.delete(k);
        this.size -= 1;
        return head;
    }
    link(p, n) {
        this.prev[n] = p;
        this.next[p] = n;
    }
    setTail(index) {
        // If it is already the tail, then there is nothing to do.
        if (index !== this.tail) {
            // If this is the head, then we change the next item
            // to the head.
            if (index === this.head) this.head = this.next[index];
            else // Link the previous item to the next item, effectively removing
            // the current node.
            this.link(this.prev[index], this.next[index]);
            // Connect the current tail to this node.
            this.link(this.tail, index);
            this.tail = index;
        }
    }
}
module.exports.default = $23ccf5482e0ce2ef$var$LruCache;

});


parcelRequire.register("lwuMM", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * Messages for issues which can be encountered processing client requests.
 *
 * @internal
 */ class $040b2b38069e114a$var$ClientMessages {
}
$040b2b38069e114a$var$ClientMessages.missingContextKeyNoEvent = "Context was unspecified or had no key; event will not be sent";
module.exports.default = $040b2b38069e114a$var$ClientMessages;

});

parcelRequire.register("bJX1P", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $h1AVT = parcelRequire("h1AVT");

var $b0f7J = parcelRequire("b0f7J");

var $ekxij = parcelRequire("ekxij");
function $88c1af8844046588$var$computeDependencies(namespace, item) {
    var _a, _b;
    const ret = new $ekxij.default();
    const isFlag = namespace === $h1AVT.default.Features.namespace;
    const isSegment = namespace === $h1AVT.default.Segments.namespace;
    if (isFlag) {
        const flag = item;
        (_a = flag === null || flag === void 0 ? void 0 : flag.prerequisites) === null || _a === void 0 || _a.forEach((prereq)=>{
            ret.set(namespace, prereq.key, true);
        });
    }
    if (isFlag || isSegment) {
        const itemWithRuleClauses = item;
        (_b = itemWithRuleClauses === null || itemWithRuleClauses === void 0 ? void 0 : itemWithRuleClauses.rules) === null || _b === void 0 || _b.forEach((rule)=>{
            var _a;
            (_a = rule.clauses) === null || _a === void 0 || _a.forEach((clause)=>{
                if (clause.op === "segmentMatch") clause.values.forEach((value)=>{
                    ret.set($h1AVT.default.Segments.namespace, value, true);
                });
            });
        });
    }
    return ret;
}
/**
 * @internal
 */ class $88c1af8844046588$var$DataSourceUpdates {
    constructor(featureStore, hasEventListeners, onChange){
        this.featureStore = featureStore;
        this.hasEventListeners = hasEventListeners;
        this.onChange = onChange;
        this.dependencyTracker = new $b0f7J.default();
    }
    init(allData, callback) {
        const checkForChanges = this.hasEventListeners();
        const doInit = (oldData)=>{
            this.featureStore.init(allData, ()=>{
                this.dependencyTracker.reset();
                Object.entries(allData).forEach(([namespace, items])=>{
                    Object.keys(items || {}).forEach((key)=>{
                        const item = items[key];
                        this.dependencyTracker.updateDependenciesFrom(namespace, key, $88c1af8844046588$var$computeDependencies(namespace, item));
                    });
                });
                if (checkForChanges) {
                    const updatedItems = new $ekxij.default();
                    Object.keys(allData).forEach((namespace)=>{
                        const oldDataForKind = (oldData === null || oldData === void 0 ? void 0 : oldData[namespace]) || {};
                        const newDataForKind = allData[namespace];
                        const mergedData = Object.assign(Object.assign({}, oldDataForKind), newDataForKind);
                        Object.keys(mergedData).forEach((key)=>{
                            this.addIfModified(namespace, key, oldDataForKind && oldDataForKind[key], newDataForKind && newDataForKind[key], updatedItems);
                        });
                    });
                    this.sendChangeEvents(updatedItems);
                }
                callback === null || callback === void 0 || callback();
            });
        };
        if (checkForChanges) this.featureStore.all($h1AVT.default.Features, (oldFlags)=>{
            this.featureStore.all($h1AVT.default.Segments, (oldSegments)=>{
                const oldData = {
                    [$h1AVT.default.Features.namespace]: oldFlags,
                    [$h1AVT.default.Segments.namespace]: oldSegments
                };
                doInit(oldData);
            });
        });
        else doInit();
    }
    upsert(kind, data, callback) {
        const { key: key } = data;
        const checkForChanges = this.hasEventListeners();
        const doUpsert = (oldItem)=>{
            this.featureStore.upsert(kind, data, ()=>{
                this.dependencyTracker.updateDependenciesFrom(kind.namespace, key, $88c1af8844046588$var$computeDependencies(kind.namespace, data));
                if (checkForChanges) {
                    const updatedItems = new $ekxij.default();
                    this.addIfModified(kind.namespace, key, oldItem, data, updatedItems);
                    this.sendChangeEvents(updatedItems);
                }
                callback === null || callback === void 0 || callback();
            });
        };
        if (checkForChanges) this.featureStore.get(kind, key, doUpsert);
        else doUpsert();
    }
    addIfModified(namespace, key, oldValue, newValue, toDataSet) {
        if (newValue && oldValue && newValue.version <= oldValue.version) return;
        this.dependencyTracker.updateModifiedItems(toDataSet, namespace, key);
    }
    sendChangeEvents(dataSet) {
        dataSet.enumerate((namespace, key)=>{
            if (namespace === $h1AVT.default.Features.namespace) this.onChange(key);
        });
    }
}
module.exports.default = $88c1af8844046588$var$DataSourceUpdates;

});
parcelRequire.register("h1AVT", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
class $c64f2dc24f226f5d$var$VersionedDataKinds {
}
$c64f2dc24f226f5d$var$VersionedDataKinds.Features = {
    namespace: "features",
    streamApiPath: "/flags/",
    requestPath: "/sdk/latest-flags/"
};
$c64f2dc24f226f5d$var$VersionedDataKinds.Segments = {
    namespace: "segments",
    streamApiPath: "/segments/",
    requestPath: "/sdk/latest-segments/"
};
module.exports.default = $c64f2dc24f226f5d$var$VersionedDataKinds;

});

parcelRequire.register("b0f7J", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $ekxij = parcelRequire("ekxij");
/**
 * @internal
 */ class $802b6d0b4d5f0395$var$DependencyTracker {
    constructor(){
        this.dependenciesFrom = new $ekxij.default();
        this.dependenciesTo = new $ekxij.default();
    }
    updateDependenciesFrom(namespace, key, newDependencySet) {
        const oldDependencySet = this.dependenciesFrom.get(namespace, key);
        oldDependencySet === null || oldDependencySet === void 0 || oldDependencySet.enumerate((depNs, depKey)=>{
            const depsToThisDep = this.dependenciesTo.get(depNs, depKey);
            depsToThisDep === null || depsToThisDep === void 0 || depsToThisDep.remove(namespace, key);
        });
        this.dependenciesFrom.set(namespace, key, newDependencySet);
        newDependencySet === null || newDependencySet === void 0 || newDependencySet.enumerate((depNs, depKey)=>{
            let depsToThisDep = this.dependenciesTo.get(depNs, depKey);
            if (!depsToThisDep) {
                depsToThisDep = new $ekxij.default();
                this.dependenciesTo.set(depNs, depKey, depsToThisDep);
            }
            depsToThisDep.set(namespace, key, true);
        });
    }
    updateModifiedItems(inDependencySet, modifiedNamespace, modifiedKey) {
        if (!inDependencySet.get(modifiedNamespace, modifiedKey)) {
            inDependencySet.set(modifiedNamespace, modifiedKey, true);
            const affectedItems = this.dependenciesTo.get(modifiedNamespace, modifiedKey);
            affectedItems === null || affectedItems === void 0 || affectedItems.enumerate((namespace, key)=>{
                this.updateModifiedItems(inDependencySet, namespace, key);
            });
        }
    }
    reset() {
        this.dependenciesFrom.removeAll();
        this.dependenciesTo.removeAll();
    }
}
module.exports.default = $802b6d0b4d5f0395$var$DependencyTracker;

});
parcelRequire.register("ekxij", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * @internal
 */ class $a6ecc28763e5594e$var$NamespacedDataSet {
    constructor(){
        this.itemsByNamespace = {};
    }
    get(namespace, key) {
        var _a;
        return (_a = this.itemsByNamespace[namespace]) === null || _a === void 0 ? void 0 : _a[key];
    }
    set(namespace, key, value) {
        if (!(namespace in this.itemsByNamespace)) this.itemsByNamespace[namespace] = {};
        this.itemsByNamespace[namespace][key] = value;
    }
    remove(namespace, key) {
        const items = this.itemsByNamespace[namespace];
        if (items) delete items[key];
    }
    removeAll() {
        this.itemsByNamespace = {};
    }
    enumerate(callback) {
        Object.entries(this.itemsByNamespace).forEach(([namespace, values])=>{
            Object.entries(values).forEach(([key, value])=>{
                callback(namespace, key, value);
            });
        });
    }
    mergeFrom(other) {
        other.enumerate(this.set.bind(this));
    }
}
module.exports.default = $a6ecc28763e5594e$var$NamespacedDataSet;

});



parcelRequire.register("hEqNQ", function(module, exports) {
"use strict";
// This is an empty implementation, so it doesn't use this, and it has empty methods, and it
// has unused variables.
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
class $cd9af6956dfafa71$var$NullUpdateProcessor {
    start(fn) {
        // Deferring the start callback should allow client construction to complete before we start
        // emitting events. Allowing the client an opportunity to register events.
        setTimeout(()=>fn === null || fn === void 0 ? void 0 : fn(), 0);
    }
    stop() {}
    close() {}
}
module.exports.default = $cd9af6956dfafa71$var$NullUpdateProcessor;

});

parcelRequire.register("d4Nzv", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $8vEDz = parcelRequire("8vEDz");

var $2nRBQ = parcelRequire("2nRBQ");

var $h1AVT = parcelRequire("h1AVT");

var $98WuW = parcelRequire("98WuW");
/**
 * @internal
 */ class $985219f618be6685$var$PollingProcessor {
    constructor(config, requestor, featureStore){
        this.requestor = requestor;
        this.featureStore = featureStore;
        this.stopped = false;
        this.logger = config.logger;
        this.pollInterval = config.pollInterval;
        this.featureStore = featureStore;
    }
    poll(fn) {
        var _a;
        if (this.stopped) return;
        const reportJsonError = (data)=>{
            var _a, _b;
            (_a = this.logger) === null || _a === void 0 || _a.error("Polling received invalid data");
            (_b = this.logger) === null || _b === void 0 || _b.debug(`Invalid JSON follows: ${data}`);
            fn === null || fn === void 0 || fn(new $8vEDz.LDPollingError("Malformed JSON data in polling response"));
        };
        const startTime = Date.now();
        (_a = this.logger) === null || _a === void 0 || _a.debug("Polling LaunchDarkly for feature flag updates");
        this.requestor.requestAllData((err, body)=>{
            var _a, _b, _c;
            const elapsed = Date.now() - startTime;
            const sleepFor = Math.max(this.pollInterval * 1000 - elapsed, 0);
            (_a = this.logger) === null || _a === void 0 || _a.debug("Elapsed: %d ms, sleeping for %d ms", elapsed, sleepFor);
            if (err) {
                if (err.status && !(0, $8vEDz.isHttpRecoverable)(err.status)) {
                    const message = (0, $98WuW.default)(err, "polling request");
                    (_b = this.logger) === null || _b === void 0 || _b.error(message);
                    fn === null || fn === void 0 || fn(new $8vEDz.LDPollingError(message));
                    // It is not recoverable, return and do not trigger another
                    // poll.
                    return;
                }
                (_c = this.logger) === null || _c === void 0 || _c.warn((0, $98WuW.default)(err, "polling request", "will retry"));
            } else if (body) {
                const parsed = (0, $2nRBQ.deserializePoll)(body);
                if (!parsed) // We could not parse this JSON. Report the problem and fallthrough to
                // start another poll.
                reportJsonError(body);
                else {
                    const initData = {
                        [$h1AVT.default.Features.namespace]: parsed.flags,
                        [$h1AVT.default.Segments.namespace]: parsed.segments
                    };
                    this.featureStore.init(initData, ()=>{
                        fn === null || fn === void 0 || fn();
                        // Triggering the next poll after the init has completed.
                        this.timeoutHandle = setTimeout(()=>{
                            this.poll(fn);
                        }, sleepFor);
                    });
                    // The poll will be triggered by  the feature store initialization
                    // completing.
                    return;
                }
            }
            // Falling through, there was some type of error and we need to trigger
            // a new poll.
            this.timeoutHandle = setTimeout(()=>{
                this.poll(fn);
            }, sleepFor);
        });
    }
    start(fn) {
        this.poll(fn);
    }
    stop() {
        if (this.timeoutHandle) {
            clearTimeout(this.timeoutHandle);
            this.timeoutHandle = undefined;
        }
        this.stopped = true;
    }
    close() {
        this.stop();
    }
}
module.exports.default = $985219f618be6685$var$PollingProcessor;

});
parcelRequire.register("8vEDz", function(module, exports) {
"use strict";
// These classes are of trivial complexity. If they become
// more complex, then they could be independent files.
/* eslint-disable max-classes-per-file */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.isHttpRecoverable = module.exports.LDClientError = module.exports.LDUnexpectedResponseError = module.exports.LDStreamingError = module.exports.LDPollingError = void 0;
class $6320bdaf986a2b16$var$LDPollingError extends Error {
    constructor(message){
        super(message);
        this.name = "LaunchDarklyPollingError";
    }
}
module.exports.LDPollingError = $6320bdaf986a2b16$var$LDPollingError;
class $6320bdaf986a2b16$var$LDStreamingError extends Error {
    constructor(message, code){
        super(message);
        this.code = code;
        this.name = "LaunchDarklyStreamingError";
    }
}
module.exports.LDStreamingError = $6320bdaf986a2b16$var$LDStreamingError;
class $6320bdaf986a2b16$var$LDUnexpectedResponseError extends Error {
    constructor(message){
        super(message);
        this.name = "LaunchDarklyUnexpectedResponseError";
    }
}
module.exports.LDUnexpectedResponseError = $6320bdaf986a2b16$var$LDUnexpectedResponseError;
class $6320bdaf986a2b16$var$LDClientError extends Error {
    constructor(message){
        super(message);
        this.name = "LaunchDarklyClientError";
    }
}
module.exports.LDClientError = $6320bdaf986a2b16$var$LDClientError;
function $6320bdaf986a2b16$var$isHttpRecoverable(status) {
    if (status >= 400 && status < 500) return status === 400 || status === 408 || status === 429;
    return true;
}
module.exports.isHttpRecoverable = $6320bdaf986a2b16$var$isHttpRecoverable;

});

parcelRequire.register("2nRBQ", function(module, exports) {
"use strict";
// The deserialization will be updating parameter values, so we don't need this
// warning in this file.
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.deserializeSegment = module.exports.serializeSegment = module.exports.deserializeFlag = module.exports.serializeFlag = module.exports.deserializeDelete = module.exports.deserializePatch = module.exports.deserializePoll = module.exports.deserializeAll = module.exports.processSegment = module.exports.processFlag = module.exports.replacer = module.exports.reviver = void 0;

var $74cHE = parcelRequire("74cHE");

var $h1AVT = parcelRequire("h1AVT");
// The max size where we use an array instead of a set.
const $1bc750728f7ad2ba$var$TARGET_LIST_ARRAY_CUTOFF = 100;
/**
 * @internal
 */ function $1bc750728f7ad2ba$var$reviver(key, value) {
    // Whenever a null is included we want to remove the field.
    // In this way validation checks do not have to consider null, only undefined.
    if (value === null) return undefined;
    return value;
}
module.exports.reviver = $1bc750728f7ad2ba$var$reviver;
/**
 * For use when serializing flags/segments. This will ensure local types
 * are converted to the appropriate JSON representation.
 * @param this The scope containing the key/value.
 * @param key The key of the item being visited.
 * @param value The value of the item being visited.
 * @returns A transformed value for serialization.
 *
 * @internal
 */ function $1bc750728f7ad2ba$var$replacer(key, value) {
    if (value instanceof $74cHE.AttributeReference) return undefined;
    if (Array.isArray(value)) {
        if (value[0] && value[0] instanceof $74cHE.AttributeReference) return undefined;
    }
    if (value.generated_includedSet) {
        value.included = [
            ...value.generated_includedSet
        ];
        delete value.generated_includedSet;
    }
    if (value.generated_excludedSet) {
        value.excluded = [
            ...value.generated_excludedSet
        ];
        delete value.generated_excludedSet;
    }
    if (value.includedContexts) value.includedContexts.forEach((target)=>{
        if (target.generated_valuesSet) target.values = [
            ...target.generated_valuesSet
        ];
        delete target.generated_valuesSet;
    });
    if (value.excludedContexts) value.excludedContexts.forEach((target)=>{
        if (target.generated_valuesSet) target.values = [
            ...target.generated_valuesSet
        ];
        delete target.generated_valuesSet;
    });
    return value;
}
module.exports.replacer = $1bc750728f7ad2ba$var$replacer;
function $1bc750728f7ad2ba$var$processRollout(rollout) {
    if (rollout && rollout.bucketBy) rollout.bucketByAttributeReference = new $74cHE.AttributeReference(rollout.bucketBy, !rollout.contextKind);
}
/**
 * @internal
 */ function $1bc750728f7ad2ba$var$processFlag(flag) {
    var _a;
    if (flag.fallthrough && flag.fallthrough.rollout) {
        const rollout = flag.fallthrough.rollout;
        $1bc750728f7ad2ba$var$processRollout(rollout);
    }
    (_a = flag === null || flag === void 0 ? void 0 : flag.rules) === null || _a === void 0 || _a.forEach((rule)=>{
        var _a;
        $1bc750728f7ad2ba$var$processRollout(rule.rollout);
        (_a = rule === null || rule === void 0 ? void 0 : rule.clauses) === null || _a === void 0 || _a.forEach((clause)=>{
            if (clause && clause.attribute) // Clauses before U2C would have had literals for attributes.
            // So use the contextKind to indicate if this is new or old data.
            clause.attributeReference = new $74cHE.AttributeReference(clause.attribute, !clause.contextKind);
            else if (clause) clause.attributeReference = $74cHE.AttributeReference.invalidReference;
        });
    });
}
module.exports.processFlag = $1bc750728f7ad2ba$var$processFlag;
/**
 * @internal
 */ function $1bc750728f7ad2ba$var$processSegment(segment) {
    var _a, _b, _c, _d, _e;
    if (((_a = segment === null || segment === void 0 ? void 0 : segment.included) === null || _a === void 0 ? void 0 : _a.length) && segment.included.length > $1bc750728f7ad2ba$var$TARGET_LIST_ARRAY_CUTOFF) {
        segment.generated_includedSet = new Set(segment.included);
        delete segment.included;
    }
    if (((_b = segment === null || segment === void 0 ? void 0 : segment.excluded) === null || _b === void 0 ? void 0 : _b.length) && segment.excluded.length > $1bc750728f7ad2ba$var$TARGET_LIST_ARRAY_CUTOFF) {
        segment.generated_excludedSet = new Set(segment.excluded);
        delete segment.excluded;
    }
    if ((_c = segment === null || segment === void 0 ? void 0 : segment.includedContexts) === null || _c === void 0 ? void 0 : _c.length) segment.includedContexts.forEach((target)=>{
        var _a;
        if (((_a = target === null || target === void 0 ? void 0 : target.values) === null || _a === void 0 ? void 0 : _a.length) && target.values.length > $1bc750728f7ad2ba$var$TARGET_LIST_ARRAY_CUTOFF) {
            target.generated_valuesSet = new Set(target.values);
            // Currently typing is non-optional, so we don't delete it.
            target.values = [];
        }
    });
    if ((_d = segment === null || segment === void 0 ? void 0 : segment.excludedContexts) === null || _d === void 0 ? void 0 : _d.length) segment.excludedContexts.forEach((target)=>{
        var _a;
        if (((_a = target === null || target === void 0 ? void 0 : target.values) === null || _a === void 0 ? void 0 : _a.length) && target.values.length > $1bc750728f7ad2ba$var$TARGET_LIST_ARRAY_CUTOFF) {
            target.generated_valuesSet = new Set(target.values);
            // Currently typing is non-optional, so we don't delete it.
            target.values = [];
        }
    });
    (_e = segment === null || segment === void 0 ? void 0 : segment.rules) === null || _e === void 0 || _e.forEach((rule)=>{
        var _a;
        if (rule.bucketBy) // Rules before U2C would have had literals for attributes.
        // So use the rolloutContextKind to indicate if this is new or old data.
        rule.bucketByAttributeReference = new $74cHE.AttributeReference(rule.bucketBy, !rule.rolloutContextKind);
        (_a = rule === null || rule === void 0 ? void 0 : rule.clauses) === null || _a === void 0 || _a.forEach((clause)=>{
            if (clause && clause.attribute) // Clauses before U2C would have had literals for attributes.
            // So use the contextKind to indicate if this is new or old data.
            clause.attributeReference = new $74cHE.AttributeReference(clause.attribute, !clause.contextKind);
            else if (clause) clause.attributeReference = $74cHE.AttributeReference.invalidReference;
        });
    });
}
module.exports.processSegment = $1bc750728f7ad2ba$var$processSegment;
function $1bc750728f7ad2ba$var$tryParse(data) {
    try {
        return JSON.parse(data, $1bc750728f7ad2ba$var$reviver);
    } catch (_a) {
        return undefined;
    }
}
/**
 * @internal
 */ function $1bc750728f7ad2ba$var$deserializeAll(data) {
    var _a, _b;
    // The reviver lacks the context of where a different key exists, being as it
    // starts at the deepest level and works outward. As a result attributes are
    // translated into references after the initial parsing. That way we can be sure
    // they are the correct ones. For instance if we added 'attribute' as a new field to
    // the schema for something that was NOT an attribute reference, then we wouldn't
    // want to construct an attribute reference out of it.
    const parsed = $1bc750728f7ad2ba$var$tryParse(data);
    if (!parsed) return undefined;
    Object.values(((_a = parsed === null || parsed === void 0 ? void 0 : parsed.data) === null || _a === void 0 ? void 0 : _a.flags) || []).forEach((flag)=>{
        $1bc750728f7ad2ba$var$processFlag(flag);
    });
    Object.values(((_b = parsed === null || parsed === void 0 ? void 0 : parsed.data) === null || _b === void 0 ? void 0 : _b.segments) || []).forEach((segment)=>{
        $1bc750728f7ad2ba$var$processSegment(segment);
    });
    return parsed;
}
module.exports.deserializeAll = $1bc750728f7ad2ba$var$deserializeAll;
/**
 * This function is intended for usage inside LaunchDarkly SDKs.
 * This function should NOT be used by customer applications.
 * This function may be changed or removed without a major version.
 *
 * @param data String data from launchdarkly.
 * @returns The parsed and processed data.
 */ function $1bc750728f7ad2ba$var$deserializePoll(data) {
    const parsed = $1bc750728f7ad2ba$var$tryParse(data);
    if (!parsed) return undefined;
    Object.values((parsed === null || parsed === void 0 ? void 0 : parsed.flags) || []).forEach((flag)=>{
        $1bc750728f7ad2ba$var$processFlag(flag);
    });
    Object.values((parsed === null || parsed === void 0 ? void 0 : parsed.segments) || []).forEach((segment)=>{
        $1bc750728f7ad2ba$var$processSegment(segment);
    });
    return parsed;
}
module.exports.deserializePoll = $1bc750728f7ad2ba$var$deserializePoll;
/**
 * @internal
 */ function $1bc750728f7ad2ba$var$deserializePatch(data) {
    const parsed = $1bc750728f7ad2ba$var$tryParse(data);
    if (!parsed) return undefined;
    if (parsed.path.startsWith($h1AVT.default.Features.streamApiPath)) {
        $1bc750728f7ad2ba$var$processFlag(parsed.data);
        parsed.kind = $h1AVT.default.Features;
    } else if (parsed.path.startsWith($h1AVT.default.Segments.streamApiPath)) {
        $1bc750728f7ad2ba$var$processSegment(parsed.data);
        parsed.kind = $h1AVT.default.Segments;
    }
    return parsed;
}
module.exports.deserializePatch = $1bc750728f7ad2ba$var$deserializePatch;
/**
 * @internal
 */ function $1bc750728f7ad2ba$var$deserializeDelete(data) {
    const parsed = $1bc750728f7ad2ba$var$tryParse(data);
    if (!parsed) return undefined;
    if (parsed.path.startsWith($h1AVT.default.Features.streamApiPath)) parsed.kind = $h1AVT.default.Features;
    else if (parsed.path.startsWith($h1AVT.default.Segments.streamApiPath)) parsed.kind = $h1AVT.default.Segments;
    return parsed;
}
module.exports.deserializeDelete = $1bc750728f7ad2ba$var$deserializeDelete;
/**
 * Serialize a single flag. Used for persistent data stores.
 *
 * @internal
 */ function $1bc750728f7ad2ba$var$serializeFlag(flag) {
    return JSON.stringify(flag, $1bc750728f7ad2ba$var$replacer);
}
module.exports.serializeFlag = $1bc750728f7ad2ba$var$serializeFlag;
/**
 * Deserialize a single flag. Used for persistent data stores.
 *
 * @internal
 */ function $1bc750728f7ad2ba$var$deserializeFlag(data) {
    const parsed = $1bc750728f7ad2ba$var$tryParse(data);
    if (!parsed) return undefined;
    $1bc750728f7ad2ba$var$processFlag(parsed);
    return parsed;
}
module.exports.deserializeFlag = $1bc750728f7ad2ba$var$deserializeFlag;
/**
 * Serialize a single segment. Used for persistent data stores.
 *
 * @internal
 */ function $1bc750728f7ad2ba$var$serializeSegment(segment) {
    return JSON.stringify(segment, $1bc750728f7ad2ba$var$replacer);
}
module.exports.serializeSegment = $1bc750728f7ad2ba$var$serializeSegment;
/**
 * Deserialize a single segment. Used for persistent data stores.
 *
 * @internal
 */ function $1bc750728f7ad2ba$var$deserializeSegment(data) {
    const parsed = $1bc750728f7ad2ba$var$tryParse(data);
    if (!parsed) return undefined;
    $1bc750728f7ad2ba$var$processSegment(parsed);
    return parsed;
}
module.exports.deserializeSegment = $1bc750728f7ad2ba$var$deserializeSegment;

});

parcelRequire.register("98WuW", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
function $6a823ce9012d846a$var$httpErrorMessage(err, context, retryMessage) {
    let desc;
    if (err.status) desc = `error ${err.status}${err.status === 401 ? " (invalid SDK key)" : ""}`;
    else desc = `I/O error (${err.message || err})`;
    const action = retryMessage !== null && retryMessage !== void 0 ? retryMessage : "giving up permanently";
    return `Received ${desc} for ${context} - ${action}`;
}
module.exports.default = $6a823ce9012d846a$var$httpErrorMessage;

});


parcelRequire.register("f117l", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $8vEDz = parcelRequire("8vEDz");

var $9BDek = parcelRequire("9BDek");
/**
 * @internal
 */ class $aee7d0e43e8fdd6c$var$Requestor {
    constructor(sdkKey, config, info, requests){
        this.requests = requests;
        this.eTagCache = {};
        this.headers = (0, $9BDek.default)(sdkKey, config, info);
        this.uri = `${config.serviceEndpoints.polling}/sdk/latest-all`;
    }
    /**
     * Perform a request and utilize the ETag cache. The ETags are cached in the
     * requestor instance.
     */ async requestWithETagCache(requestUrl, options) {
        const cacheEntry = this.eTagCache[requestUrl];
        const cachedETag = cacheEntry === null || cacheEntry === void 0 ? void 0 : cacheEntry.etag;
        const updatedOptions = cachedETag ? Object.assign(Object.assign({}, options), {
            headers: Object.assign(Object.assign({}, options.headers), {
                "if-none-match": cachedETag
            })
        }) : options;
        const res = await this.requests.fetch(requestUrl, updatedOptions);
        if (res.status === 304 && cacheEntry) return {
            res: res,
            body: cacheEntry.body
        };
        const etag = res.headers.get("etag");
        const body = await res.text();
        if (etag) this.eTagCache[requestUrl] = {
            etag: etag,
            body: body
        };
        return {
            res: res,
            body: body
        };
    }
    async requestAllData(cb) {
        const options = {
            method: "GET",
            headers: this.headers
        };
        try {
            const { res: res, body: body } = await this.requestWithETagCache(this.uri, options);
            if (res.status !== 200 && res.status !== 304) {
                const err = new $8vEDz.LDStreamingError(`Unexpected status code: ${res.status}`, res.status);
                return cb(err, undefined);
            }
            return cb(undefined, res.status === 304 ? null : body);
        } catch (err) {
            return cb(err, undefined);
        }
    }
}
module.exports.default = $aee7d0e43e8fdd6c$var$Requestor;

});
parcelRequire.register("9BDek", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
function $6fe6000febdc0c24$var$defaultHeaders(sdkKey, config, info) {
    const sdkData = info.sdkData();
    const headers = {
        authorization: sdkKey,
        "user-agent": `${sdkData.userAgentBase ? sdkData.userAgentBase : "NodeJSClient"}/${sdkData.version}`
    };
    if (sdkData.wrapperName) headers["x-launchdarkly-wrapper"] = sdkData.wrapperVersion ? `${sdkData.wrapperName}/${sdkData.wrapperVersion}` : sdkData.wrapperName;
    const tags = config.tags.value;
    if (tags) headers["x-launchdarkly-tags"] = tags;
    return headers;
}
module.exports.default = $6fe6000febdc0c24$var$defaultHeaders;

});


parcelRequire.register("Cgtb1", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $8vEDz = parcelRequire("8vEDz");

var $2nRBQ = parcelRequire("2nRBQ");

var $h1AVT = parcelRequire("h1AVT");

var $9BDek = parcelRequire("9BDek");

var $98WuW = parcelRequire("98WuW");
const $0730533e181bcb73$var$STREAM_READ_TIMEOUT_MS = 300000;
const $0730533e181bcb73$var$RETRY_RESET_INTERVAL_MS = 60000;
function $0730533e181bcb73$var$getKeyFromPath(kind, path) {
    return path.startsWith(kind.streamApiPath) ? path.substring(kind.streamApiPath.length) : undefined;
}
/**
 * @internal
 */ class $0730533e181bcb73$var$StreamingProcessor {
    constructor(sdkKey, config, requests, info, featureStore, diagnosticsManager){
        this.featureStore = featureStore;
        this.diagnosticsManager = diagnosticsManager;
        this.headers = (0, $9BDek.default)(sdkKey, config, info);
        this.logger = config.logger;
        this.streamInitialReconnectDelay = config.streamInitialReconnectDelay;
        this.requests = requests;
        this.streamUri = `${config.serviceEndpoints.streaming}/all`;
    }
    logConnectionStarted() {
        this.connectionAttemptStartTime = Date.now();
    }
    logConnectionResult(success) {
        if (this.connectionAttemptStartTime && this.diagnosticsManager) this.diagnosticsManager.recordStreamInit(this.connectionAttemptStartTime, !success, Date.now() - this.connectionAttemptStartTime);
        this.connectionAttemptStartTime = undefined;
    }
    start(fn) {
        this.logConnectionStarted();
        const errorFilter = (err)=>{
            var _a, _b;
            if (err.status && !(0, $8vEDz.isHttpRecoverable)(err.status)) {
                this.logConnectionResult(false);
                fn === null || fn === void 0 || fn(new $8vEDz.LDStreamingError(err.message, err.status));
                (_a = this.logger) === null || _a === void 0 || _a.error((0, $98WuW.default)(err, "streaming request"));
                return false;
            }
            (_b = this.logger) === null || _b === void 0 || _b.warn((0, $98WuW.default)(err, "streaming request", "will retry"));
            this.logConnectionResult(false);
            this.logConnectionStarted();
            return true;
        };
        const reportJsonError = (type, data)=>{
            var _a, _b;
            (_a = this.logger) === null || _a === void 0 || _a.error(`Stream received invalid data in "${type}" message`);
            (_b = this.logger) === null || _b === void 0 || _b.debug(`Invalid JSON follows: ${data}`);
            fn === null || fn === void 0 || fn(new $8vEDz.LDStreamingError("Malformed JSON data in event stream"));
        };
        // TLS is handled by the platform implementation.
        const eventSource = this.requests.createEventSource(this.streamUri, {
            headers: this.headers,
            errorFilter: errorFilter,
            initialRetryDelayMillis: 1000 * this.streamInitialReconnectDelay,
            readTimeoutMillis: $0730533e181bcb73$var$STREAM_READ_TIMEOUT_MS,
            retryResetIntervalMillis: $0730533e181bcb73$var$RETRY_RESET_INTERVAL_MS
        });
        this.eventSource = eventSource;
        eventSource.onclose = ()=>{
            var _a;
            (_a = this.logger) === null || _a === void 0 || _a.info("Closed LaunchDarkly stream connection");
        };
        eventSource.onerror = ()=>{
        // The work is done by `errorFilter`.
        };
        eventSource.onopen = ()=>{
            var _a;
            (_a = this.logger) === null || _a === void 0 || _a.info("Opened LaunchDarkly stream connection");
        };
        eventSource.onretrying = (e)=>{
            var _a;
            (_a = this.logger) === null || _a === void 0 || _a.info(`Will retry stream connection in ${e.delayMillis} milliseconds`);
        };
        eventSource.addEventListener("put", (event)=>{
            var _a;
            (_a = this.logger) === null || _a === void 0 || _a.debug("Received put event");
            if (event && event.data) {
                this.logConnectionResult(true);
                const parsed = (0, $2nRBQ.deserializeAll)(event.data);
                if (!parsed) {
                    reportJsonError("put", event.data);
                    return;
                }
                const initData = {
                    [$h1AVT.default.Features.namespace]: parsed.data.flags,
                    [$h1AVT.default.Segments.namespace]: parsed.data.segments
                };
                this.featureStore.init(initData, ()=>fn === null || fn === void 0 ? void 0 : fn());
            } else fn === null || fn === void 0 || fn(new $8vEDz.LDStreamingError("Unexpected payload from event stream"));
        });
        eventSource.addEventListener("patch", (event)=>{
            var _a, _b;
            (_a = this.logger) === null || _a === void 0 || _a.debug("Received patch event");
            if (event && event.data) {
                const parsed = (0, $2nRBQ.deserializePatch)(event.data);
                if (!parsed) {
                    reportJsonError("patch", event.data);
                    return;
                }
                if (parsed.kind) {
                    const key = $0730533e181bcb73$var$getKeyFromPath(parsed.kind, parsed.path);
                    if (key) {
                        (_b = this.logger) === null || _b === void 0 || _b.debug(`Updating ${key} in ${parsed.kind.namespace}`);
                        this.featureStore.upsert(parsed.kind, parsed.data, ()=>{});
                    }
                }
            } else fn === null || fn === void 0 || fn(new $8vEDz.LDStreamingError("Unexpected payload from event stream"));
        });
        eventSource.addEventListener("delete", (event)=>{
            var _a, _b;
            (_a = this.logger) === null || _a === void 0 || _a.debug("Received delete event");
            if (event && event.data) {
                const parsed = (0, $2nRBQ.deserializeDelete)(event.data);
                if (!parsed) {
                    reportJsonError("delete", event.data);
                    return;
                }
                if (parsed.kind) {
                    const key = $0730533e181bcb73$var$getKeyFromPath(parsed.kind, parsed.path);
                    if (key) {
                        (_b = this.logger) === null || _b === void 0 || _b.debug(`Deleting ${key} in ${parsed.kind.namespace}`);
                        this.featureStore.upsert(parsed.kind, {
                            key: key,
                            version: parsed.version,
                            deleted: true
                        }, ()=>{});
                    }
                }
            } else fn === null || fn === void 0 || fn(new $8vEDz.LDStreamingError("Unexpected payload from event stream"));
        });
    }
    stop() {
        var _a;
        (_a = this.eventSource) === null || _a === void 0 || _a.close();
        this.eventSource = undefined;
    }
    close() {
        this.stop();
    }
}
module.exports.default = $0730533e181bcb73$var$StreamingProcessor;

});

parcelRequire.register("fli9D", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.allAsync = module.exports.firstSeriesAsync = module.exports.allSeriesAsync = module.exports.firstResult = void 0;
/**
 * Iterate a collection any apply the specified operation. The first operation which
 * returns a value will be returned and iteration will stop.
 *
 * @param collection The collection to enumerate.
 * @param operator The operation to apply to each item.
 * @returns The result of the first successful operation.
 */ function $b2b6e648b04d0079$var$firstResult(collection, operator) {
    let res;
    collection === null || collection === void 0 || collection.some((item, index)=>{
        res = operator(item, index);
        return !!res;
    });
    return res;
}
module.exports.firstResult = $b2b6e648b04d0079$var$firstResult;
const $b2b6e648b04d0079$var$ITERATION_RECURSION_LIMIT = 50;
function $b2b6e648b04d0079$var$seriesAsync(collection, check, all, index, cb) {
    if (!collection) {
        cb(false);
        return;
    }
    if (index < (collection === null || collection === void 0 ? void 0 : collection.length)) check(collection[index], index, (res)=>{
        if (all) {
            if (!res) {
                cb(false);
                return;
            }
        } else if (res) {
            cb(true);
            return;
        }
        if (collection.length > $b2b6e648b04d0079$var$ITERATION_RECURSION_LIMIT) // When we hit the recursion limit we defer execution
        // by using a resolved promise. This is similar to using setImmediate
        // but more portable.
        Promise.resolve().then(()=>{
            $b2b6e648b04d0079$var$seriesAsync(collection, check, all, index + 1, cb);
        });
        else $b2b6e648b04d0079$var$seriesAsync(collection, check, all, index + 1, cb);
    });
    else cb(all);
}
/**
 * Iterate a collection in series awaiting each check operation.
 * @param collection The collection to iterate.
 * @param check The check to perform for each item in the container.
 * @param cb Called with true if all items pass the check.
 */ function $b2b6e648b04d0079$var$allSeriesAsync(collection, check, cb) {
    $b2b6e648b04d0079$var$seriesAsync(collection, check, true, 0, cb);
}
module.exports.allSeriesAsync = $b2b6e648b04d0079$var$allSeriesAsync;
/**
 * Iterate a collection in series awaiting each check operation.
 * @param collection The collection to iterate.
 * @param check The check to perform for each item in the container.
 * @param cb called with true on the first item that passes the check. False
 * means no items passed the check.
 */ function $b2b6e648b04d0079$var$firstSeriesAsync(collection, check, cb) {
    $b2b6e648b04d0079$var$seriesAsync(collection, check, false, 0, cb);
}
module.exports.firstSeriesAsync = $b2b6e648b04d0079$var$firstSeriesAsync;
/**
 * Iterate a collection and execute the the given check operation
 * for all items concurrently.
 * @param collection The collection to iterate.
 * @param check The check to run for each item.
 * @param cb Callback executed when all items have been checked. The callback
 * will be called with true if each item resulted in true, otherwise it will
 * be called with false.
 */ function $b2b6e648b04d0079$var$allAsync(collection, check, cb) {
    if (!collection) {
        cb(false);
        return;
    }
    Promise.all(collection === null || collection === void 0 ? void 0 : collection.map((item)=>new Promise((resolve)=>{
            check(item, resolve);
        }))).then((results)=>{
        cb(results.every((success)=>success));
    });
}
module.exports.allAsync = $b2b6e648b04d0079$var$allAsync;

});

parcelRequire.register("15nMV", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * Different kinds of error which may be encountered during evaluation.
 *
 * @internal
 */ var $0ca8b5e98c239c0a$var$ErrorKinds;
(function(ErrorKinds) {
    ErrorKinds["MalformedFlag"] = "MALFORMED_FLAG";
    ErrorKinds["UserNotSpecified"] = "USER_NOT_SPECIFIED";
    ErrorKinds["FlagNotFound"] = "FLAG_NOT_FOUND";
    ErrorKinds["ClientNotReady"] = "CLIENT_NOT_READY";
})($0ca8b5e98c239c0a$var$ErrorKinds || ($0ca8b5e98c239c0a$var$ErrorKinds = {}));
/**
 * @internal
 */ module.exports.default = $0ca8b5e98c239c0a$var$ErrorKinds;

});

parcelRequire.register("d7Uly", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $aPSrt = parcelRequire("aPSrt");
/**
 * A class which encapsulates the result of an evaluation. It allows for differentiating between
 * successful and error result types.
 *
 * @internal
 */ class $98e7a3133abe0beb$var$EvalResult {
    constructor(isError, detail, message){
        this.isError = isError;
        this.detail = detail;
        this.message = message;
        this.isError = isError;
        this.detail = detail;
        this.message = message;
    }
    get isOff() {
        return this.detail.reason.kind === $aPSrt.default.Off.kind;
    }
    setDefault(def) {
        this.detail.value = def;
    }
    static forError(errorKind, message, def) {
        return new $98e7a3133abe0beb$var$EvalResult(true, {
            value: def !== null && def !== void 0 ? def : null,
            variationIndex: null,
            reason: {
                kind: "ERROR",
                errorKind: errorKind
            }
        }, message);
    }
    static forSuccess(value, reason, variationIndex) {
        return new $98e7a3133abe0beb$var$EvalResult(false, {
            value: value,
            variationIndex: variationIndex === undefined ? null : variationIndex,
            reason: reason
        });
    }
}
module.exports.default = $98e7a3133abe0beb$var$EvalResult;

});
parcelRequire.register("aPSrt", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * A set of static evaluation reasons and methods for creating specific reason instances.
 *
 * @internal
 */ class $7e38e5dd642f5831$var$Reasons {
    static prerequisiteFailed(prerequisiteKey) {
        return {
            kind: "PREREQUISITE_FAILED",
            prerequisiteKey: prerequisiteKey
        };
    }
    static ruleMatch(ruleId, ruleIndex) {
        return {
            kind: "RULE_MATCH",
            ruleId: ruleId,
            ruleIndex: ruleIndex
        };
    }
}
$7e38e5dd642f5831$var$Reasons.Fallthrough = {
    kind: "FALLTHROUGH"
};
$7e38e5dd642f5831$var$Reasons.Off = {
    kind: "OFF"
};
$7e38e5dd642f5831$var$Reasons.TargetMatch = {
    kind: "TARGET_MATCH"
};
module.exports.default = $7e38e5dd642f5831$var$Reasons;

});


parcelRequire.register("Ki2yH", function(module, exports) {
"use strict";
/* eslint-disable class-methods-use-this */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $eW1GP = parcelRequire("eW1GP");

var $fli9D = parcelRequire("fli9D");

var $15nMV = parcelRequire("15nMV");

var $d7Uly = parcelRequire("d7Uly");

var $26oPb = parcelRequire("26oPb");

var $jRp6B = parcelRequire("jRp6B");

var $7qTdT = parcelRequire("7qTdT");

var $gtijI = parcelRequire("gtijI");

var $aPSrt = parcelRequire("aPSrt");

var $aq5am = parcelRequire("aq5am");
const $08b24a6a1182ad0a$var$bigSegmentsStatusPriority = {
    HEALTHY: 1,
    STALE: 2,
    STORE_ERROR: 3,
    NOT_CONFIGURED: 4
};
function $08b24a6a1182ad0a$var$getBigSegmentsStatusPriority(status) {
    if (status !== undefined) return $08b24a6a1182ad0a$var$bigSegmentsStatusPriority[status] || 0;
    return 0;
}
/**
 * Given two big segment statuses return the one with the higher priority.
 * @returns The status with the higher priority.
 */ function $08b24a6a1182ad0a$var$computeUpdatedBigSegmentsStatus(old, latest) {
    if (old !== undefined && $08b24a6a1182ad0a$var$getBigSegmentsStatusPriority(old) > $08b24a6a1182ad0a$var$getBigSegmentsStatusPriority(latest)) return old;
    return latest;
}
function $08b24a6a1182ad0a$var$makeMatch(match) {
    return {
        error: false,
        isMatch: match,
        result: undefined
    };
}
function $08b24a6a1182ad0a$var$makeError(result) {
    return {
        error: true,
        isMatch: false,
        result: result
    };
}
/**
 * @internal
 */ class $08b24a6a1182ad0a$var$Evaluator {
    constructor(platform, queries){
        this.queries = queries;
        this.bucketer = new $eW1GP.default(platform.crypto);
    }
    async evaluate(flag, context, eventFactory) {
        return new Promise((resolve)=>{
            const state = {};
            this.evaluateInternal(flag, context, state, [], (res)=>{
                if (state.bigSegmentsStatus) res.detail.reason = Object.assign(Object.assign({}, res.detail.reason), {
                    bigSegmentsStatus: state.bigSegmentsStatus
                });
                res.events = state.events;
                resolve(res);
            }, eventFactory);
        });
    }
    evaluateCb(flag, context, cb, eventFactory) {
        const state = {};
        this.evaluateInternal(flag, context, state, [], (res)=>{
            if (state.bigSegmentsStatus) res.detail.reason = Object.assign(Object.assign({}, res.detail.reason), {
                bigSegmentsStatus: state.bigSegmentsStatus
            });
            res.events = state.events;
            cb(res);
        }, eventFactory);
    }
    /**
     * Evaluate the given flag against the given context. This internal method is entered
     * initially from the external evaluation method, but may be recursively executed during
     * prerequisite evaluations.
     * @param flag The flag to evaluate.
     * @param context The context to evaluate the flag against.
     * @param state The current evaluation state.
     * @param visitedFlags The flags that have been visited during this evaluation.
     * This is not part of the state, because it needs to be forked during prerequisite evaluations.
     */ evaluateInternal(flag, context, // eslint-disable-next-line @typescript-eslint/no-unused-vars
    state, visitedFlags, cb, eventFactory) {
        if (!flag.on) {
            cb((0, $aq5am.getOffVariation)(flag, $aPSrt.default.Off));
            return;
        }
        this.checkPrerequisites(flag, context, state, visitedFlags, (res)=>{
            // If there is a prereq result, then prereqs have failed, or there was
            // an error.
            if (res) {
                cb(res);
                return;
            }
            const targetRes = (0, $26oPb.default)(flag, context);
            if (targetRes) {
                cb(targetRes);
                return;
            }
            this.evaluateRules(flag, context, state, (evalRes)=>{
                if (evalRes) {
                    cb(evalRes);
                    return;
                }
                cb(this.variationForContext(flag.fallthrough, context, flag, $aPSrt.default.Fallthrough));
            });
        }, eventFactory);
    }
    /**
     * Evaluate the prerequisite flags for the given flag.
     * @param flag The flag to evaluate prerequisites for.
     * @param context The context to evaluate the prerequisites against.
     * @param state used to accumulate prerequisite events.
     * @param visitedFlags Used to detect cycles in prerequisite evaluation.
     * @param cb A callback which is executed when prerequisite checks are complete it is called with
     * an {@link EvalResult} containing an error result or `undefined` if the prerequisites
     * are met.
     */ checkPrerequisites(flag, context, state, visitedFlags, cb, eventFactory) {
        let prereqResult;
        if (!flag.prerequisites || !flag.prerequisites.length) {
            cb(undefined);
            return;
        }
        // On any error conditions the prereq result will be set, so we do not need
        // the result of the series evaluation.
        (0, $fli9D.allSeriesAsync)(flag.prerequisites, (prereq, _index, iterCb)=>{
            if (visitedFlags.indexOf(prereq.key) !== -1) {
                prereqResult = $d7Uly.default.forError($15nMV.default.MalformedFlag, `Prerequisite of ${flag.key} causing a circular reference.` + " This is probably a temporary condition due to an incomplete update.");
                iterCb(true);
                return;
            }
            const updatedVisitedFlags = [
                ...visitedFlags,
                prereq.key
            ];
            this.queries.getFlag(prereq.key, (prereqFlag)=>{
                if (!prereqFlag) {
                    prereqResult = (0, $aq5am.getOffVariation)(flag, $aPSrt.default.prerequisiteFailed(prereq.key));
                    iterCb(false);
                    return;
                }
                this.evaluateInternal(prereqFlag, context, state, updatedVisitedFlags, (res)=>{
                    var _a;
                    // eslint-disable-next-line no-param-reassign
                    state.events = (_a = state.events) !== null && _a !== void 0 ? _a : [];
                    if (eventFactory) state.events.push(eventFactory.evalEvent(prereqFlag, context, res.detail, null, flag));
                    if (res.isError) {
                        prereqResult = res;
                        return iterCb(false);
                    }
                    if (res.isOff || res.detail.variationIndex !== prereq.variation) {
                        prereqResult = (0, $aq5am.getOffVariation)(flag, $aPSrt.default.prerequisiteFailed(prereq.key));
                        return iterCb(false);
                    }
                    return iterCb(true);
                }, eventFactory);
            });
        }, ()=>{
            cb(prereqResult);
        });
    }
    /**
     * Evaluate the rules for a flag and return an {@link EvalResult} if there is
     * a match or error.
     * @param flag The flag to evaluate rules for.
     * @param context The context to evaluate the rules against.
     * @param state The current evaluation state.
     * @param cb Callback called when rule evaluation is complete, it will be called with either
     * an {@link EvalResult} or 'undefined'.
     */ evaluateRules(flag, context, state, cb) {
        let ruleResult;
        (0, $fli9D.firstSeriesAsync)(flag.rules, (rule, ruleIndex, iterCb)=>{
            this.ruleMatchContext(flag, rule, ruleIndex, context, state, [], (res)=>{
                ruleResult = res;
                iterCb(!!res);
            });
        }, ()=>cb(ruleResult));
    }
    clauseMatchContext(clause, context, segmentsVisited, state, cb) {
        let errorResult;
        if (clause.op === "segmentMatch") {
            (0, $fli9D.firstSeriesAsync)(clause.values, (value, _index, iterCb)=>{
                this.queries.getSegment(value, (segment)=>{
                    if (segment) {
                        if (segmentsVisited.includes(segment.key)) {
                            errorResult = $d7Uly.default.forError($15nMV.default.MalformedFlag, `Segment rule referencing segment ${segment.key} caused a circular reference. ` + "This is probably a temporary condition due to an incomplete update");
                            // There was an error, so stop checking further segments.
                            iterCb(true);
                            return;
                        }
                        const newVisited = [
                            ...segmentsVisited,
                            segment === null || segment === void 0 ? void 0 : segment.key
                        ];
                        this.segmentMatchContext(segment, context, state, newVisited, (res)=>{
                            if (res.error) errorResult = res.result;
                            iterCb(res.error || res.isMatch);
                        });
                    } else iterCb(false);
                });
            }, (match)=>{
                if (errorResult) return cb($08b24a6a1182ad0a$var$makeError(errorResult));
                return cb($08b24a6a1182ad0a$var$makeMatch((0, $7qTdT.maybeNegate)(clause, match)));
            });
            return;
        }
        // This is after segment matching, which does not use the reference.
        if (!clause.attributeReference.isValid) {
            cb($08b24a6a1182ad0a$var$makeError($d7Uly.default.forError($15nMV.default.MalformedFlag, "Invalid attribute reference in clause")));
            return;
        }
        cb($08b24a6a1182ad0a$var$makeMatch((0, $7qTdT.default)(clause, context)));
    }
    /**
     * Evaluate a flag rule against the given context.
     * @param flag The flag the rule is part of.
     * @param rule The rule to match.
     * @param rule The index of the rule.
     * @param context The context to match the rule against.
     * @param cb Called when matching is complete with an {@link EvalResult} or `undefined` if there
     * are no matches or errors.
     */ ruleMatchContext(flag, rule, ruleIndex, context, state, segmentsVisited, cb) {
        if (!rule.clauses) {
            cb(undefined);
            return;
        }
        let errorResult;
        (0, $fli9D.allSeriesAsync)(rule.clauses, (clause, _index, iterCb)=>{
            this.clauseMatchContext(clause, context, segmentsVisited, state, (res)=>{
                errorResult = res.result;
                return iterCb(res.error || res.isMatch);
            });
        }, (match)=>{
            if (errorResult) return cb(errorResult);
            if (match) return cb(this.variationForContext(rule, context, flag, $aPSrt.default.ruleMatch(rule.id, ruleIndex)));
            return cb(undefined);
        });
    }
    variationForContext(varOrRollout, context, flag, reason) {
        if (varOrRollout === undefined) // By spec this field should be defined, but better to be overly cautious.
        return $d7Uly.default.forError($15nMV.default.MalformedFlag, "Fallthrough variation undefined");
        if (varOrRollout.variation !== undefined) // 0 would be false.
        return (0, $aq5am.getVariation)(flag, varOrRollout.variation, reason);
        if (varOrRollout.rollout) {
            const { rollout: rollout } = varOrRollout;
            const { variations: variations } = rollout;
            const isExperiment = rollout.kind === "experiment";
            if (variations && variations.length) {
                const bucketBy = (0, $aq5am.getBucketBy)(isExperiment, rollout.bucketByAttributeReference);
                if (!bucketBy.isValid) return $d7Uly.default.forError($15nMV.default.MalformedFlag, "Invalid attribute reference for bucketBy in rollout");
                const [bucket, hadContext] = this.bucketer.bucket(context, flag.key, bucketBy, flag.salt || "", rollout.contextKind, rollout.seed);
                const updatedReason = Object.assign({}, reason);
                let sum = 0;
                for(let i = 0; i < variations.length; i += 1){
                    const variate = variations[i];
                    sum += variate.weight / 100000.0;
                    if (bucket < sum) {
                        if (isExperiment && hadContext && !variate.untracked) updatedReason.inExperiment = true;
                        return (0, $aq5am.getVariation)(flag, variate.variation, updatedReason);
                    }
                }
                // The context's bucket value was greater than or equal to the end of
                // the last bucket. This could happen due to a rounding error, or due to
                // the fact that we are scaling to 100000 rather than 99999, or the flag
                // data could contain buckets that don't actually add up to 100000.
                // Rather than returning an error in this case (or changing the scaling,
                // which would potentially change the results for *all* users), we will
                // simply put the context in the last bucket.
                const lastVariate = variations[variations.length - 1];
                if (isExperiment && !lastVariate.untracked) updatedReason.inExperiment = true;
                return (0, $aq5am.getVariation)(flag, lastVariate.variation, updatedReason);
            }
        }
        return $d7Uly.default.forError($15nMV.default.MalformedFlag, "Variation/rollout object with no variation or rollout");
    }
    segmentRuleMatchContext(segment, rule, context, state, segmentsVisited, cb) {
        let errorResult;
        (0, $fli9D.allSeriesAsync)(rule.clauses, (clause, _index, iterCb)=>{
            this.clauseMatchContext(clause, context, segmentsVisited, state, (res)=>{
                errorResult = res.result;
                iterCb(res.error || res.isMatch);
            });
        }, (match)=>{
            if (errorResult) return cb($08b24a6a1182ad0a$var$makeError(errorResult));
            if (match) {
                if (rule.weight === undefined) return cb($08b24a6a1182ad0a$var$makeMatch(match));
                const bucketBy = (0, $aq5am.getBucketBy)(false, rule.bucketByAttributeReference);
                if (!bucketBy.isValid) return cb($08b24a6a1182ad0a$var$makeError($d7Uly.default.forError($15nMV.default.MalformedFlag, "Invalid attribute reference in clause")));
                const [bucket] = this.bucketer.bucket(context, segment.key, bucketBy, segment.salt || "", rule.rolloutContextKind);
                return cb($08b24a6a1182ad0a$var$makeMatch(bucket < rule.weight / 100000.0));
            }
            return cb($08b24a6a1182ad0a$var$makeMatch(false));
        });
    }
    // eslint-disable-next-line class-methods-use-this
    simpleSegmentMatchContext(segment, context, state, segmentsVisited, cb) {
        if (!segment.unbounded) {
            const includeExclude = (0, $gtijI.default)(segment, context);
            if (includeExclude !== undefined) {
                cb($08b24a6a1182ad0a$var$makeMatch(includeExclude));
                return;
            }
        }
        let evalResult;
        (0, $fli9D.firstSeriesAsync)(segment.rules, (rule, _index, iterCb)=>{
            this.segmentRuleMatchContext(segment, rule, context, state, segmentsVisited, (res)=>{
                evalResult = res.result;
                return iterCb(res.error || res.isMatch);
            });
        }, (matched)=>{
            if (evalResult) return cb($08b24a6a1182ad0a$var$makeError(evalResult));
            return cb($08b24a6a1182ad0a$var$makeMatch(matched));
        });
    }
    segmentMatchContext(segment, context, // eslint-disable-next-line @typescript-eslint/no-unused-vars
    state, // eslint-disable-next-line @typescript-eslint/no-unused-vars
    segmentsVisited, cb) {
        if (!segment.unbounded) {
            this.simpleSegmentMatchContext(segment, context, state, segmentsVisited, cb);
            return;
        }
        const bigSegmentKind = segment.unboundedContextKind || "user";
        const keyForBigSegment = context.key(bigSegmentKind);
        if (!keyForBigSegment) {
            cb($08b24a6a1182ad0a$var$makeMatch(false));
            return;
        }
        if (!segment.generation) {
            // Big Segment queries can only be done if the generation is known. If it's unset,
            // that probably means the data store was populated by an older SDK that doesn't know
            // about the generation property and therefore dropped it from the JSON data. We'll treat
            // that as a "not configured" condition.
            // eslint-disable-next-line no-param-reassign
            state.bigSegmentsStatus = $08b24a6a1182ad0a$var$computeUpdatedBigSegmentsStatus(state.bigSegmentsStatus, "NOT_CONFIGURED");
            cb($08b24a6a1182ad0a$var$makeMatch(false));
            return;
        }
        if (state.bigSegmentsMembership && state.bigSegmentsMembership[keyForBigSegment]) {
            // We've already done the query at some point during the flag evaluation and stored
            // the result (if any) in stateOut.bigSegmentsMembership, so we don't need to do it
            // again. Even if multiple Big Segments are being referenced, the membership includes
            // *all* of the user's segment memberships.
            this.bigSegmentMatchContext(state.bigSegmentsMembership[keyForBigSegment], segment, context, state).then(cb);
            return;
        }
        this.queries.getBigSegmentsMembership(keyForBigSegment).then((result)=>{
            // eslint-disable-next-line no-param-reassign
            state.bigSegmentsMembership = state.bigSegmentsMembership || {};
            if (result) {
                const [membership, status] = result;
                // eslint-disable-next-line no-param-reassign
                state.bigSegmentsMembership[keyForBigSegment] = membership;
                // eslint-disable-next-line no-param-reassign
                state.bigSegmentsStatus = $08b24a6a1182ad0a$var$computeUpdatedBigSegmentsStatus(state.bigSegmentsStatus, status);
            } else // eslint-disable-next-line no-param-reassign
            state.bigSegmentsStatus = $08b24a6a1182ad0a$var$computeUpdatedBigSegmentsStatus(state.bigSegmentsStatus, "NOT_CONFIGURED");
            /* eslint-enable no-param-reassign */ this.bigSegmentMatchContext(state.bigSegmentsMembership[keyForBigSegment], segment, context, state).then(cb);
        });
    }
    bigSegmentMatchContext(membership, segment, context, state) {
        const segmentRef = (0, $jRp6B.default)(segment);
        const included = membership === null || membership === void 0 ? void 0 : membership[segmentRef];
        return new Promise((resolve)=>{
            // Typically null is not checked because we filter it from the data
            // we get in flag updates. Here it is checked because big segment data
            // will be contingent on the store that implements it.
            if (included !== undefined && included !== null) {
                resolve($08b24a6a1182ad0a$var$makeMatch(included));
                return;
            }
            this.simpleSegmentMatchContext(segment, context, state, [], resolve);
        });
    }
}
module.exports.default = $08b24a6a1182ad0a$var$Evaluator;

});
parcelRequire.register("eW1GP", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * Bucketing can be done by string or integer values. The need to be converted to a string
 * for the hashing process.
 * @param value The value to get a bucketable value for.
 * @returns The value as a string, or null if the value cannot be used for bucketing.
 */ function $adf7cb027b4350c7$var$valueForBucketing(value) {
    if (typeof value === "string") return value;
    if (Number.isInteger(value)) return String(value);
    return null;
}
class $adf7cb027b4350c7$var$Bucketer {
    constructor(crypto){
        this.crypto = crypto;
    }
    sha1Hex(value) {
        const hash = this.crypto.createHash("sha1");
        hash.update(value);
        return hash.digest("hex");
    }
    /**
     * Bucket the provided context using the provided parameters.
     * @param context The context to bucket. Can be a 'multi' kind context, but
     * the bucketing will be by a specific contained kind.
     * @param key A key to use in hashing. Typically the flag key or the segment key.
     * @param attr The attribute to use for bucketing.
     * @param salt A salt to use in hashing.
     * @param kindForRollout The kind to use for bucketing.
     * @param seed A seed to use in hashing.
     *
     * @returns A tuple where the first value is the bucket, and the second value indicates if there
     * was a context for the value specified by `kindForRollout`. If there was not a context for the
     * specified kind, then the `inExperiment` attribute should be `false`.
     */ bucket(context, key, attr, salt, kindForRollout = "user", seed) {
        const value = context.valueForKind(attr, kindForRollout);
        const bucketableValue = $adf7cb027b4350c7$var$valueForBucketing(value);
        // Bucketing cannot be done by the specified attribute value.
        if (bucketableValue === null) {
            // If we got a value, then we know there was a context, but if we didn't get a value, then
            // it could either be there wasn't an attribute, the attribute was undefined/null, or there
            // was not a context. So here check for the context.
            const hadContext = context.kinds.indexOf(kindForRollout) >= 0;
            return [
                0,
                hadContext
            ];
        }
        const prefix = seed ? Number(seed) : `${key}.${salt}`;
        const hashKey = `${prefix}.${bucketableValue}`;
        const hashVal = parseInt(this.sha1Hex(hashKey).substring(0, 15), 16);
        // This is how this has worked in previous implementations, but it is not
        // ideal.
        // The maximum safe integer representation in JS is 2^53 - 1.
        // eslint-disable-next-line @typescript-eslint/no-loss-of-precision
        return [
            hashVal / 0xfffffffffffffff,
            true
        ];
    }
}
module.exports.default = $adf7cb027b4350c7$var$Bucketer;

});

parcelRequire.register("26oPb", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $74cHE = parcelRequire("74cHE");

var $fli9D = parcelRequire("fli9D");

var $aPSrt = parcelRequire("aPSrt");

var $aq5am = parcelRequire("aq5am");
function $187f65ebb4837a5f$var$evalTarget(flag, target, context) {
    const contextKey = context.key(target.contextKind);
    if (contextKey !== undefined) {
        const found = target.values.indexOf(contextKey) >= 0;
        if (found) return (0, $aq5am.getVariation)(flag, target.variation, $aPSrt.default.TargetMatch);
    }
    return undefined;
}
/**
 * Evaluate the targets of the specified flag against the given context.
 * @param flag The flag to evaluate targets for.
 * @param context The context to evaluate those targets against.
 * @returns An evaluation result if there is a target match/error or undefined if there is not.
 *
 * @internal
 */ function $187f65ebb4837a5f$var$evalTargets(flag, context) {
    var _a;
    if (!((_a = flag.contextTargets) === null || _a === void 0 ? void 0 : _a.length)) // There are not context targets, so we are going to evaluate the user targets.
    return (0, $fli9D.firstResult)(flag.targets, (target)=>$187f65ebb4837a5f$var$evalTarget(flag, target, context));
    return (0, $fli9D.firstResult)(flag.contextTargets, (target)=>{
        if (!target.contextKind || target.contextKind === $74cHE.Context.userKind) {
            // When a context target is for a user, then use a user target with the same variation.
            const userTarget = (flag.targets || []).find((ut)=>ut.variation === target.variation);
            if (userTarget) return $187f65ebb4837a5f$var$evalTarget(flag, userTarget, context);
            return undefined;
        }
        return $187f65ebb4837a5f$var$evalTarget(flag, target, context);
    });
}
module.exports.default = $187f65ebb4837a5f$var$evalTargets;

});
parcelRequire.register("aq5am", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.getBucketBy = module.exports.getOffVariation = module.exports.getVariation = void 0;

var $74cHE = parcelRequire("74cHE");

var $15nMV = parcelRequire("15nMV");

var $d7Uly = parcelRequire("d7Uly");
const $796056f2e5069443$var$KEY_ATTR_REF = new $74cHE.AttributeReference("key");
/**
 * Attempt to get an evaluation result for the specific variation/flag combination.
 * @param flag The flag to get a variation from.
 * @param index The index of the flag.
 * @param reason The initial evaluation reason. If there is a valid variation, then this reason
 * will be returned in the EvalResult.
 * @returns An evaluation result containing the successful evaluation, or an error if there is
 * a problem accessing the variation.
 *
 * @internal
 */ function $796056f2e5069443$var$getVariation(flag, index, reason) {
    if ($74cHE.TypeValidators.Number.is(index) && index >= 0 && index < flag.variations.length) return $d7Uly.default.forSuccess(flag.variations[index], reason, index);
    return $d7Uly.default.forError($15nMV.default.MalformedFlag, "Invalid variation index in flag");
}
module.exports.getVariation = $796056f2e5069443$var$getVariation;
/**
 * Attempt to get an off result for the specified flag.
 * @param flag The flag to get the off variation for.
 * @param reason The initial reason for the evaluation result.
 * @returns A successful evaluation result, or an error result if there is a problem accessing
 * the off variation. Flags which do not have an off variation specified will get a `null` flag
 * value with an `undefined` variation.
 *
 * @internal
 */ function $796056f2e5069443$var$getOffVariation(flag, reason) {
    if (!$74cHE.TypeValidators.Number.is(flag.offVariation)) return $d7Uly.default.forSuccess(null, reason);
    return $796056f2e5069443$var$getVariation(flag, flag.offVariation, reason);
}
module.exports.getOffVariation = $796056f2e5069443$var$getOffVariation;
function $796056f2e5069443$var$getBucketBy(isExperiment, bucketByAttributeReference) {
    var _a;
    return (_a = isExperiment ? undefined : bucketByAttributeReference) !== null && _a !== void 0 ? _a : $796056f2e5069443$var$KEY_ATTR_REF;
}
module.exports.getBucketBy = $796056f2e5069443$var$getBucketBy;

});


parcelRequire.register("jRp6B", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * @internal
 */ function $e75670fb8cf77a9a$var$makeBigSegmentRef(segment) {
    // The format of Big Segment references is independent of what store implementation is being
    // used; the store implementation receives only this string and does not know the details of
    // the data model. The Relay Proxy will use the same format when writing to the store.
    return `${segment.key}.g${segment.generation}`;
}
module.exports.default = $e75670fb8cf77a9a$var$makeBigSegmentRef;

});

parcelRequire.register("7qTdT", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.maybeNegate = void 0;

var $gnZn6 = parcelRequire("gnZn6");
function $0165834b85086dec$var$maybeNegate(clause, value) {
    if (clause.negate) return !value;
    return value;
}
module.exports.maybeNegate = $0165834b85086dec$var$maybeNegate;
function $0165834b85086dec$var$matchAny(op, value, values) {
    return values.some((testValue)=>$gnZn6.default.execute(op, value, testValue));
}
/**
 * Match a clause against a context.
 * @param clause The clause to match against a context.
 * @param context The context to match.
 * @returns True if the clause matches.
 *
 * @internal
 */ function $0165834b85086dec$var$matchClauseWithoutSegmentOperations(clause, context) {
    const contextValue = context.valueForKind(clause.attributeReference, clause.contextKind);
    if (contextValue === null || contextValue === undefined) return false;
    if (Array.isArray(contextValue)) return $0165834b85086dec$var$maybeNegate(clause, contextValue.some((value)=>$0165834b85086dec$var$matchAny(clause.op, value, clause.values)));
    return $0165834b85086dec$var$maybeNegate(clause, $0165834b85086dec$var$matchAny(clause.op, contextValue, clause.values));
}
module.exports.default = $0165834b85086dec$var$matchClauseWithoutSegmentOperations;

});
parcelRequire.register("gnZn6", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $3zb61 = parcelRequire("3zb61");

var $74cHE = parcelRequire("74cHE");
const $bede666fecddb9da$var$VERSION_COMPONENTS_REGEX = /^\d+(\.\d+)?(\.\d+)?/;
function $bede666fecddb9da$var$parseSemver(input) {
    // A leading 'v' is not supported by the standard, but may be by the semver library.
    if ($74cHE.TypeValidators.String.is(input) && !input.startsWith("v")) {
        // If the input is able to be parsed, then return that.
        const parsed = (0, $3zb61.parse)(input);
        if (parsed) return parsed;
        // If not, then we are going to make some exceptions to the format.
        // Specifically semver requires 3 components, but we allow versions with
        // less. For instance we allow '1' to be equivalent to '1.0.0'.
        const components = $bede666fecddb9da$var$VERSION_COMPONENTS_REGEX.exec(input);
        if (components) {
            let transformed = components[0];
            // Start after the match.
            for(let i = 1; i < components.length; i += 1)// The regex will return a match followed by each group.
            // Unmatched groups are 'undefined'.
            // So we will always have 3 entries, the match and 2 groups.
            // For each missing group we need to append a '.0' until we have the
            // standard 3.
            if (components[i] === undefined) transformed += ".0";
            // If the original version contains pre-release  information like '-beta.1',
            // then this will re-incorporate that into the string.
            transformed += input.substring(components[0].length);
            return (0, $3zb61.parse)(transformed);
        }
    }
    return null;
}
function $bede666fecddb9da$var$semVerOperator(fn) {
    return (a, b)=>{
        const aVer = $bede666fecddb9da$var$parseSemver(a);
        const bVer = $bede666fecddb9da$var$parseSemver(b);
        return !!(aVer && bVer && fn(aVer, bVer));
    };
}
function $bede666fecddb9da$var$makeOperator(fn, validator, converter) {
    return (a, b)=>{
        if (validator.is(a) && validator.is(b)) {
            if (converter) return fn(converter(a), converter(b));
            return fn(a, b);
        }
        return false;
    };
}
function $bede666fecddb9da$var$parseDate(input) {
    // Before calling this function we know the value is a date in a number
    // or as a string.
    if (typeof input === "number") return input;
    return Date.parse(input);
}
function $bede666fecddb9da$var$safeRegexMatch(pattern, value) {
    try {
        return new RegExp(pattern).test(value);
    } catch (_a) {
        return false;
    }
}
const $bede666fecddb9da$var$operators = {
    in: (a, b)=>a === b,
    endsWith: $bede666fecddb9da$var$makeOperator((a, b)=>a.endsWith(b), $74cHE.TypeValidators.String),
    startsWith: $bede666fecddb9da$var$makeOperator((a, b)=>a.startsWith(b), $74cHE.TypeValidators.String),
    matches: $bede666fecddb9da$var$makeOperator((value, pattern)=>$bede666fecddb9da$var$safeRegexMatch(pattern, value), $74cHE.TypeValidators.String),
    contains: $bede666fecddb9da$var$makeOperator((a, b)=>a.indexOf(b) > -1, $74cHE.TypeValidators.String),
    lessThan: $bede666fecddb9da$var$makeOperator((a, b)=>a < b, $74cHE.TypeValidators.Number),
    lessThanOrEqual: $bede666fecddb9da$var$makeOperator((a, b)=>a <= b, $74cHE.TypeValidators.Number),
    greaterThan: $bede666fecddb9da$var$makeOperator((a, b)=>a > b, $74cHE.TypeValidators.Number),
    greaterThanOrEqual: $bede666fecddb9da$var$makeOperator((a, b)=>a >= b, $74cHE.TypeValidators.Number),
    before: $bede666fecddb9da$var$makeOperator((a, b)=>a < b, $74cHE.TypeValidators.Date, $bede666fecddb9da$var$parseDate),
    after: $bede666fecddb9da$var$makeOperator((a, b)=>a > b, $74cHE.TypeValidators.Date, $bede666fecddb9da$var$parseDate),
    semVerEqual: $bede666fecddb9da$var$semVerOperator((a, b)=>a.compare(b) === 0),
    semVerLessThan: $bede666fecddb9da$var$semVerOperator((a, b)=>a.compare(b) < 0),
    semVerGreaterThan: $bede666fecddb9da$var$semVerOperator((a, b)=>a.compare(b) > 0)
};
/**
 * Allows checking if a specific operator is defined and allows execution of an operator on data.
 *
 * @internal
 */ class $bede666fecddb9da$var$Operators {
    static is(op) {
        return Object.prototype.hasOwnProperty.call($bede666fecddb9da$var$operators, op);
    }
    static execute(op, a, b) {
        var _a, _b;
        return (_b = (_a = $bede666fecddb9da$var$operators[op]) === null || _a === void 0 ? void 0 : _a.call($bede666fecddb9da$var$operators, a, b)) !== null && _b !== void 0 ? _b : false;
    }
}
module.exports.default = $bede666fecddb9da$var$Operators;

});
parcelRequire.register("3zb61", function(module, exports) {
// just pre-load all the stuff that index.js lazily exports

var $fp2vc = parcelRequire("fp2vc");

var $gmqwQ = parcelRequire("gmqwQ");

var $6thmH = parcelRequire("6thmH");

var $2ZfJJ = parcelRequire("2ZfJJ");

var $c4uXP = parcelRequire("c4uXP");

var $70Zl7 = parcelRequire("70Zl7");

var $gpKq1 = parcelRequire("gpKq1");

var $1VUi7 = parcelRequire("1VUi7");

var $buqcT = parcelRequire("buqcT");

var $cfmeZ = parcelRequire("cfmeZ");

var $au2d0 = parcelRequire("au2d0");

var $dUEeE = parcelRequire("dUEeE");

var $fGlgK = parcelRequire("fGlgK");

var $bMOxA = parcelRequire("bMOxA");

var $ajFUC = parcelRequire("ajFUC");

var $RjW50 = parcelRequire("RjW50");

var $88RM5 = parcelRequire("88RM5");

var $1NAZZ = parcelRequire("1NAZZ");

var $fxzeX = parcelRequire("fxzeX");

var $a5R2z = parcelRequire("a5R2z");

var $ctHiW = parcelRequire("ctHiW");

var $52yVP = parcelRequire("52yVP");

var $ar9tn = parcelRequire("ar9tn");

var $55T4P = parcelRequire("55T4P");

var $dwRLY = parcelRequire("dwRLY");

var $6bSIB = parcelRequire("6bSIB");

var $ewhZQ = parcelRequire("ewhZQ");

var $9GqBa = parcelRequire("9GqBa");

var $h8SXw = parcelRequire("h8SXw");

var $lF483 = parcelRequire("lF483");

var $1xiPj = parcelRequire("1xiPj");

var $bKqK5 = parcelRequire("bKqK5");

var $a46Ds = parcelRequire("a46Ds");

var $jkJlh = parcelRequire("jkJlh");

var $2zdhA = parcelRequire("2zdhA");

var $dmh4L = parcelRequire("dmh4L");

var $b7jSC = parcelRequire("b7jSC");

var $bwshW = parcelRequire("bwshW");

var $aJRe7 = parcelRequire("aJRe7");

var $f5pRs = parcelRequire("f5pRs");

var $8frrO = parcelRequire("8frrO");
module.exports = {
    parse: $c4uXP,
    valid: $70Zl7,
    clean: $gpKq1,
    inc: $1VUi7,
    diff: $buqcT,
    major: $cfmeZ,
    minor: $au2d0,
    patch: $dUEeE,
    prerelease: $fGlgK,
    compare: $bMOxA,
    rcompare: $ajFUC,
    compareLoose: $RjW50,
    compareBuild: $88RM5,
    sort: $1NAZZ,
    rsort: $fxzeX,
    gt: $a5R2z,
    lt: $ctHiW,
    eq: $52yVP,
    neq: $ar9tn,
    gte: $55T4P,
    lte: $dwRLY,
    cmp: $6bSIB,
    coerce: $ewhZQ,
    Comparator: $9GqBa,
    Range: $h8SXw,
    satisfies: $lF483,
    toComparators: $1xiPj,
    maxSatisfying: $bKqK5,
    minSatisfying: $a46Ds,
    minVersion: $jkJlh,
    validRange: $2zdhA,
    outside: $dmh4L,
    gtr: $b7jSC,
    ltr: $bwshW,
    intersects: $aJRe7,
    simplifyRange: $f5pRs,
    subset: $8frrO,
    SemVer: $6thmH,
    re: $fp2vc.re,
    src: $fp2vc.src,
    tokens: $fp2vc.t,
    SEMVER_SPEC_VERSION: $gmqwQ.SEMVER_SPEC_VERSION,
    RELEASE_TYPES: $gmqwQ.RELEASE_TYPES,
    compareIdentifiers: $2ZfJJ.compareIdentifiers,
    rcompareIdentifiers: $2ZfJJ.rcompareIdentifiers
};

});
parcelRequire.register("fp2vc", function(module, exports) {

var $gmqwQ = parcelRequire("gmqwQ");
var $b36b21b645dc742c$require$MAX_SAFE_COMPONENT_LENGTH = $gmqwQ.MAX_SAFE_COMPONENT_LENGTH;
var $b36b21b645dc742c$require$MAX_SAFE_BUILD_LENGTH = $gmqwQ.MAX_SAFE_BUILD_LENGTH;
var $b36b21b645dc742c$require$MAX_LENGTH = $gmqwQ.MAX_LENGTH;

var $9TDmi = parcelRequire("9TDmi");
exports = module.exports = {};
// The actual regexps go on exports.re
const re = exports.re = [];
const safeRe = exports.safeRe = [];
const src = exports.src = [];
const t = exports.t = {};
let R = 0;
const LETTERDASHNUMBER = "[a-zA-Z0-9-]";
// Replace some greedy regex tokens to prevent regex dos issues. These regex are
// used internally via the safeRe object since all inputs in this library get
// normalized first to trim and collapse all extra whitespace. The original
// regexes are exported for userland consumption and lower level usage. A
// future breaking change could export the safer regex only with a note that
// all input should have extra whitespace removed.
const safeRegexReplacements = [
    [
        "\\s",
        1
    ],
    [
        "\\d",
        $b36b21b645dc742c$require$MAX_LENGTH
    ],
    [
        LETTERDASHNUMBER,
        $b36b21b645dc742c$require$MAX_SAFE_BUILD_LENGTH
    ]
];
const makeSafeRegex = (value)=>{
    for (const [token, max] of safeRegexReplacements)value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
    return value;
};
const createToken = (name, value, isGlobal)=>{
    const safe = makeSafeRegex(value);
    const index = R++;
    $9TDmi(name, index, value);
    t[name] = index;
    src[index] = value;
    re[index] = new RegExp(value, isGlobal ? "g" : undefined);
    safeRe[index] = new RegExp(safe, isGlobal ? "g" : undefined);
};
// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.
// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.
createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.
createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
// ## Main Version
// Three dot-separated numeric identifiers.
createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})`);
createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})`);
// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.
createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.
createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.
createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.
createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.
// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.
createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
createToken("FULL", `^${src[t.FULLPLAIN]}$`);
// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
createToken("GTLT", "((?:<|>)?=?)");
// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?` + `)?)?`);
createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?` + `)?)?`);
createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
// Coercion.
// Extract anything that could conceivably be a part of a valid semver
createToken("COERCE", `${"(^|[^\\d])(\\d{1,"}${$b36b21b645dc742c$require$MAX_SAFE_COMPONENT_LENGTH}})` + `(?:\\.(\\d{1,${$b36b21b645dc742c$require$MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:\\.(\\d{1,${$b36b21b645dc742c$require$MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:$|[^\\d])`);
createToken("COERCERTL", src[t.COERCE], true);
// Tilde ranges.
// Meaning is "reasonably at or greater than"
createToken("LONETILDE", "(?:~>?)");
createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
exports.tildeTrimReplace = "$1~";
createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
// Caret ranges.
// Meaning is "at least and backwards compatible with"
createToken("LONECARET", "(?:\\^)");
createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
exports.caretTrimReplace = "$1^";
createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
// A simple gt/lt/eq thing, or just "" to indicate "any version"
createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
exports.comparatorTrimReplace = "$1$2$3";
// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAIN]})` + `\\s*$`);
createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAINLOOSE]})` + `\\s*$`);
// Star ranges basically just allow anything at all.
createToken("STAR", "(<|>)?=?\\s*\\*");
// >=0.0.0 is like a star
createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");

});
parcelRequire.register("gmqwQ", function(module, exports) {
// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const $be93477d8858215b$var$SEMVER_SPEC_VERSION = "2.0.0";
const $be93477d8858215b$var$MAX_LENGTH = 256;
const $be93477d8858215b$var$MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */ 9007199254740991;
// Max safe segment length for coercion.
const $be93477d8858215b$var$MAX_SAFE_COMPONENT_LENGTH = 16;
// Max safe length for a build identifier. The max length minus 6 characters for
// the shortest version with a build 0.0.0+BUILD.
const $be93477d8858215b$var$MAX_SAFE_BUILD_LENGTH = $be93477d8858215b$var$MAX_LENGTH - 6;
const $be93477d8858215b$var$RELEASE_TYPES = [
    "major",
    "premajor",
    "minor",
    "preminor",
    "patch",
    "prepatch",
    "prerelease"
];
module.exports = {
    MAX_LENGTH: $be93477d8858215b$var$MAX_LENGTH,
    MAX_SAFE_COMPONENT_LENGTH: $be93477d8858215b$var$MAX_SAFE_COMPONENT_LENGTH,
    MAX_SAFE_BUILD_LENGTH: $be93477d8858215b$var$MAX_SAFE_BUILD_LENGTH,
    MAX_SAFE_INTEGER: $be93477d8858215b$var$MAX_SAFE_INTEGER,
    RELEASE_TYPES: $be93477d8858215b$var$RELEASE_TYPES,
    SEMVER_SPEC_VERSION: $be93477d8858215b$var$SEMVER_SPEC_VERSION,
    FLAG_INCLUDE_PRERELEASE: 1,
    FLAG_LOOSE: 2
};

});

parcelRequire.register("9TDmi", function(module, exports) {

const $7347c7ea8c4b5724$var$debug = (typeof $bFvJb$process === "object" && $bFvJb$process.env && undefined, ()=>{});
module.exports = $7347c7ea8c4b5724$var$debug;

});


parcelRequire.register("6thmH", function(module, exports) {

var $9TDmi = parcelRequire("9TDmi");

var $gmqwQ = parcelRequire("gmqwQ");
var $4b62ebd84b6256aa$require$MAX_LENGTH = $gmqwQ.MAX_LENGTH;
var $4b62ebd84b6256aa$require$MAX_SAFE_INTEGER = $gmqwQ.MAX_SAFE_INTEGER;

var $fp2vc = parcelRequire("fp2vc");
var $4b62ebd84b6256aa$require$re = $fp2vc.safeRe;
var $4b62ebd84b6256aa$require$t = $fp2vc.t;

var $8QIEu = parcelRequire("8QIEu");

var $2ZfJJ = parcelRequire("2ZfJJ");
var $4b62ebd84b6256aa$require$compareIdentifiers = $2ZfJJ.compareIdentifiers;
class $4b62ebd84b6256aa$var$SemVer {
    constructor(version, options){
        options = $8QIEu(options);
        if (version instanceof $4b62ebd84b6256aa$var$SemVer) {
            if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) return version;
            else version = version.version;
        } else if (typeof version !== "string") throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
        if (version.length > $4b62ebd84b6256aa$require$MAX_LENGTH) throw new TypeError(`version is longer than ${$4b62ebd84b6256aa$require$MAX_LENGTH} characters`);
        $9TDmi("SemVer", version, options);
        this.options = options;
        this.loose = !!options.loose;
        // this isn't actually relevant for versions, but keep it so that we
        // don't run into trouble passing this.options around.
        this.includePrerelease = !!options.includePrerelease;
        const m = version.trim().match(options.loose ? $4b62ebd84b6256aa$require$re[$4b62ebd84b6256aa$require$t.LOOSE] : $4b62ebd84b6256aa$require$re[$4b62ebd84b6256aa$require$t.FULL]);
        if (!m) throw new TypeError(`Invalid Version: ${version}`);
        this.raw = version;
        // these are actually numbers
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > $4b62ebd84b6256aa$require$MAX_SAFE_INTEGER || this.major < 0) throw new TypeError("Invalid major version");
        if (this.minor > $4b62ebd84b6256aa$require$MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError("Invalid minor version");
        if (this.patch > $4b62ebd84b6256aa$require$MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError("Invalid patch version");
        // numberify any prerelease numeric ids
        if (!m[4]) this.prerelease = [];
        else this.prerelease = m[4].split(".").map((id)=>{
            if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < $4b62ebd84b6256aa$require$MAX_SAFE_INTEGER) return num;
            }
            return id;
        });
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
    }
    format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) this.version += `-${this.prerelease.join(".")}`;
        return this.version;
    }
    toString() {
        return this.version;
    }
    compare(other) {
        $9TDmi("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof $4b62ebd84b6256aa$var$SemVer)) {
            if (typeof other === "string" && other === this.version) return 0;
            other = new $4b62ebd84b6256aa$var$SemVer(other, this.options);
        }
        if (other.version === this.version) return 0;
        return this.compareMain(other) || this.comparePre(other);
    }
    compareMain(other) {
        if (!(other instanceof $4b62ebd84b6256aa$var$SemVer)) other = new $4b62ebd84b6256aa$var$SemVer(other, this.options);
        return $4b62ebd84b6256aa$require$compareIdentifiers(this.major, other.major) || $4b62ebd84b6256aa$require$compareIdentifiers(this.minor, other.minor) || $4b62ebd84b6256aa$require$compareIdentifiers(this.patch, other.patch);
    }
    comparePre(other) {
        if (!(other instanceof $4b62ebd84b6256aa$var$SemVer)) other = new $4b62ebd84b6256aa$var$SemVer(other, this.options);
        // NOT having a prerelease is > having one
        if (this.prerelease.length && !other.prerelease.length) return -1;
        else if (!this.prerelease.length && other.prerelease.length) return 1;
        else if (!this.prerelease.length && !other.prerelease.length) return 0;
        let i = 0;
        do {
            const a = this.prerelease[i];
            const b = other.prerelease[i];
            $9TDmi("prerelease compare", i, a, b);
            if (a === undefined && b === undefined) return 0;
            else if (b === undefined) return 1;
            else if (a === undefined) return -1;
            else if (a === b) continue;
            else return $4b62ebd84b6256aa$require$compareIdentifiers(a, b);
        }while (++i);
    }
    compareBuild(other) {
        if (!(other instanceof $4b62ebd84b6256aa$var$SemVer)) other = new $4b62ebd84b6256aa$var$SemVer(other, this.options);
        let i = 0;
        do {
            const a = this.build[i];
            const b = other.build[i];
            $9TDmi("prerelease compare", i, a, b);
            if (a === undefined && b === undefined) return 0;
            else if (b === undefined) return 1;
            else if (a === undefined) return -1;
            else if (a === b) continue;
            else return $4b62ebd84b6256aa$require$compareIdentifiers(a, b);
        }while (++i);
    }
    // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.
    inc(release, identifier, identifierBase) {
        switch(release){
            case "premajor":
                this.prerelease.length = 0;
                this.patch = 0;
                this.minor = 0;
                this.major++;
                this.inc("pre", identifier, identifierBase);
                break;
            case "preminor":
                this.prerelease.length = 0;
                this.patch = 0;
                this.minor++;
                this.inc("pre", identifier, identifierBase);
                break;
            case "prepatch":
                // If this is already a prerelease, it will bump to the next version
                // drop any prereleases that might already exist, since they are not
                // relevant at this point.
                this.prerelease.length = 0;
                this.inc("patch", identifier, identifierBase);
                this.inc("pre", identifier, identifierBase);
                break;
            // If the input is a non-prerelease version, this acts the same as
            // prepatch.
            case "prerelease":
                if (this.prerelease.length === 0) this.inc("patch", identifier, identifierBase);
                this.inc("pre", identifier, identifierBase);
                break;
            case "major":
                // If this is a pre-major version, bump up to the same major version.
                // Otherwise increment major.
                // 1.0.0-5 bumps to 1.0.0
                // 1.1.0 bumps to 2.0.0
                if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) this.major++;
                this.minor = 0;
                this.patch = 0;
                this.prerelease = [];
                break;
            case "minor":
                // If this is a pre-minor version, bump up to the same minor version.
                // Otherwise increment minor.
                // 1.2.0-5 bumps to 1.2.0
                // 1.2.1 bumps to 1.3.0
                if (this.patch !== 0 || this.prerelease.length === 0) this.minor++;
                this.patch = 0;
                this.prerelease = [];
                break;
            case "patch":
                // If this is not a pre-release version, it will increment the patch.
                // If it is a pre-release it will bump up to the same patch version.
                // 1.2.0-5 patches to 1.2.0
                // 1.2.0 patches to 1.2.1
                if (this.prerelease.length === 0) this.patch++;
                this.prerelease = [];
                break;
            // This probably shouldn't be used publicly.
            // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
            case "pre":
                {
                    const base = Number(identifierBase) ? 1 : 0;
                    if (!identifier && identifierBase === false) throw new Error("invalid increment argument: identifier is empty");
                    if (this.prerelease.length === 0) this.prerelease = [
                        base
                    ];
                    else {
                        let i = this.prerelease.length;
                        while(--i >= 0)if (typeof this.prerelease[i] === "number") {
                            this.prerelease[i]++;
                            i = -2;
                        }
                        if (i === -1) {
                            // didn't increment anything
                            if (identifier === this.prerelease.join(".") && identifierBase === false) throw new Error("invalid increment argument: identifier already exists");
                            this.prerelease.push(base);
                        }
                    }
                    if (identifier) {
                        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
                        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
                        let prerelease = [
                            identifier,
                            base
                        ];
                        if (identifierBase === false) prerelease = [
                            identifier
                        ];
                        if ($4b62ebd84b6256aa$require$compareIdentifiers(this.prerelease[0], identifier) === 0) {
                            if (isNaN(this.prerelease[1])) this.prerelease = prerelease;
                        } else this.prerelease = prerelease;
                    }
                    break;
                }
            default:
                throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) this.raw += `+${this.build.join(".")}`;
        return this;
    }
}
module.exports = $4b62ebd84b6256aa$var$SemVer;

});
parcelRequire.register("8QIEu", function(module, exports) {
// parse out just the options we care about
const $6715d10aefb3f6d4$var$looseOption = Object.freeze({
    loose: true
});
const $6715d10aefb3f6d4$var$emptyOpts = Object.freeze({});
const $6715d10aefb3f6d4$var$parseOptions = (options)=>{
    if (!options) return $6715d10aefb3f6d4$var$emptyOpts;
    if (typeof options !== "object") return $6715d10aefb3f6d4$var$looseOption;
    return options;
};
module.exports = $6715d10aefb3f6d4$var$parseOptions;

});

parcelRequire.register("2ZfJJ", function(module, exports) {
const $22cd7c42971b04ba$var$numeric = /^[0-9]+$/;
const $22cd7c42971b04ba$var$compareIdentifiers = (a, b)=>{
    const anum = $22cd7c42971b04ba$var$numeric.test(a);
    const bnum = $22cd7c42971b04ba$var$numeric.test(b);
    if (anum && bnum) {
        a = +a;
        b = +b;
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
};
const $22cd7c42971b04ba$var$rcompareIdentifiers = (a, b)=>$22cd7c42971b04ba$var$compareIdentifiers(b, a);
module.exports = {
    compareIdentifiers: $22cd7c42971b04ba$var$compareIdentifiers,
    rcompareIdentifiers: $22cd7c42971b04ba$var$rcompareIdentifiers
};

});


parcelRequire.register("c4uXP", function(module, exports) {

var $6thmH = parcelRequire("6thmH");
const $8c9de08fa55a9e37$var$parse = (version, options, throwErrors = false)=>{
    if (version instanceof $6thmH) return version;
    try {
        return new $6thmH(version, options);
    } catch (er) {
        if (!throwErrors) return null;
        throw er;
    }
};
module.exports = $8c9de08fa55a9e37$var$parse;

});

parcelRequire.register("70Zl7", function(module, exports) {

var $c4uXP = parcelRequire("c4uXP");
const $51b81d4193edf797$var$valid = (version, options)=>{
    const v = $c4uXP(version, options);
    return v ? v.version : null;
};
module.exports = $51b81d4193edf797$var$valid;

});

parcelRequire.register("gpKq1", function(module, exports) {

var $c4uXP = parcelRequire("c4uXP");
const $bf32fcedfa13e7b1$var$clean = (version, options)=>{
    const s = $c4uXP(version.trim().replace(/^[=v]+/, ""), options);
    return s ? s.version : null;
};
module.exports = $bf32fcedfa13e7b1$var$clean;

});

parcelRequire.register("1VUi7", function(module, exports) {

var $6thmH = parcelRequire("6thmH");
const $1686c79621229959$var$inc = (version, release, options, identifier, identifierBase)=>{
    if (typeof options === "string") {
        identifierBase = identifier;
        identifier = options;
        options = undefined;
    }
    try {
        return new $6thmH(version instanceof $6thmH ? version.version : version, options).inc(release, identifier, identifierBase).version;
    } catch (er) {
        return null;
    }
};
module.exports = $1686c79621229959$var$inc;

});

parcelRequire.register("buqcT", function(module, exports) {

var $c4uXP = parcelRequire("c4uXP");
const $85d6d331be964447$var$diff = (version1, version2)=>{
    const v1 = $c4uXP(version1, null, true);
    const v2 = $c4uXP(version2, null, true);
    const comparison = v1.compare(v2);
    if (comparison === 0) return null;
    const v1Higher = comparison > 0;
    const highVersion = v1Higher ? v1 : v2;
    const lowVersion = v1Higher ? v2 : v1;
    const highHasPre = !!highVersion.prerelease.length;
    const lowHasPre = !!lowVersion.prerelease.length;
    if (lowHasPre && !highHasPre) {
        // Going from prerelease -> no prerelease requires some special casing
        // If the low version has only a major, then it will always be a major
        // Some examples:
        // 1.0.0-1 -> 1.0.0
        // 1.0.0-1 -> 1.1.1
        // 1.0.0-1 -> 2.0.0
        if (!lowVersion.patch && !lowVersion.minor) return "major";
        // Otherwise it can be determined by checking the high version
        if (highVersion.patch) // anything higher than a patch bump would result in the wrong version
        return "patch";
        if (highVersion.minor) // anything higher than a minor bump would result in the wrong version
        return "minor";
        // bumping major/minor/patch all have same result
        return "major";
    }
    // add the `pre` prefix if we are going to a prerelease version
    const prefix = highHasPre ? "pre" : "";
    if (v1.major !== v2.major) return prefix + "major";
    if (v1.minor !== v2.minor) return prefix + "minor";
    if (v1.patch !== v2.patch) return prefix + "patch";
    // high and low are preleases
    return "prerelease";
};
module.exports = $85d6d331be964447$var$diff;

});

parcelRequire.register("cfmeZ", function(module, exports) {

var $6thmH = parcelRequire("6thmH");
const $8ea823522575deb6$var$major = (a, loose)=>new $6thmH(a, loose).major;
module.exports = $8ea823522575deb6$var$major;

});

parcelRequire.register("au2d0", function(module, exports) {

var $6thmH = parcelRequire("6thmH");
const $7a1e6b57e042f6e8$var$minor = (a, loose)=>new $6thmH(a, loose).minor;
module.exports = $7a1e6b57e042f6e8$var$minor;

});

parcelRequire.register("dUEeE", function(module, exports) {

var $6thmH = parcelRequire("6thmH");
const $a20fb734195f345f$var$patch = (a, loose)=>new $6thmH(a, loose).patch;
module.exports = $a20fb734195f345f$var$patch;

});

parcelRequire.register("fGlgK", function(module, exports) {

var $c4uXP = parcelRequire("c4uXP");
const $b6ab46dad2a8a3e0$var$prerelease = (version, options)=>{
    const parsed = $c4uXP(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
};
module.exports = $b6ab46dad2a8a3e0$var$prerelease;

});

parcelRequire.register("bMOxA", function(module, exports) {

var $6thmH = parcelRequire("6thmH");
const $894b61c1d2f4ce96$var$compare = (a, b, loose)=>new $6thmH(a, loose).compare(new $6thmH(b, loose));
module.exports = $894b61c1d2f4ce96$var$compare;

});

parcelRequire.register("ajFUC", function(module, exports) {

var $bMOxA = parcelRequire("bMOxA");
const $782c30a0e868fcd9$var$rcompare = (a, b, loose)=>$bMOxA(b, a, loose);
module.exports = $782c30a0e868fcd9$var$rcompare;

});

parcelRequire.register("RjW50", function(module, exports) {

var $bMOxA = parcelRequire("bMOxA");
const $0a046a2e3f8e5a15$var$compareLoose = (a, b)=>$bMOxA(a, b, true);
module.exports = $0a046a2e3f8e5a15$var$compareLoose;

});

parcelRequire.register("88RM5", function(module, exports) {

var $6thmH = parcelRequire("6thmH");
const $5ed8c89c5b792e20$var$compareBuild = (a, b, loose)=>{
    const versionA = new $6thmH(a, loose);
    const versionB = new $6thmH(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
};
module.exports = $5ed8c89c5b792e20$var$compareBuild;

});

parcelRequire.register("1NAZZ", function(module, exports) {

var $88RM5 = parcelRequire("88RM5");
const $14f71138b83b75b2$var$sort = (list, loose)=>list.sort((a, b)=>$88RM5(a, b, loose));
module.exports = $14f71138b83b75b2$var$sort;

});

parcelRequire.register("fxzeX", function(module, exports) {

var $88RM5 = parcelRequire("88RM5");
const $b5054609dcce303a$var$rsort = (list, loose)=>list.sort((a, b)=>$88RM5(b, a, loose));
module.exports = $b5054609dcce303a$var$rsort;

});

parcelRequire.register("a5R2z", function(module, exports) {

var $bMOxA = parcelRequire("bMOxA");
const $759383bd17bc5dbb$var$gt = (a, b, loose)=>$bMOxA(a, b, loose) > 0;
module.exports = $759383bd17bc5dbb$var$gt;

});

parcelRequire.register("ctHiW", function(module, exports) {

var $bMOxA = parcelRequire("bMOxA");
const $9159c8da74ddb484$var$lt = (a, b, loose)=>$bMOxA(a, b, loose) < 0;
module.exports = $9159c8da74ddb484$var$lt;

});

parcelRequire.register("52yVP", function(module, exports) {

var $bMOxA = parcelRequire("bMOxA");
const $3ab83c63126e42bd$var$eq = (a, b, loose)=>$bMOxA(a, b, loose) === 0;
module.exports = $3ab83c63126e42bd$var$eq;

});

parcelRequire.register("ar9tn", function(module, exports) {

var $bMOxA = parcelRequire("bMOxA");
const $7993c61bda095968$var$neq = (a, b, loose)=>$bMOxA(a, b, loose) !== 0;
module.exports = $7993c61bda095968$var$neq;

});

parcelRequire.register("55T4P", function(module, exports) {

var $bMOxA = parcelRequire("bMOxA");
const $3b5824827c0769c3$var$gte = (a, b, loose)=>$bMOxA(a, b, loose) >= 0;
module.exports = $3b5824827c0769c3$var$gte;

});

parcelRequire.register("dwRLY", function(module, exports) {

var $bMOxA = parcelRequire("bMOxA");
const $9d97f9af22c5b8ff$var$lte = (a, b, loose)=>$bMOxA(a, b, loose) <= 0;
module.exports = $9d97f9af22c5b8ff$var$lte;

});

parcelRequire.register("6bSIB", function(module, exports) {

var $52yVP = parcelRequire("52yVP");

var $ar9tn = parcelRequire("ar9tn");

var $a5R2z = parcelRequire("a5R2z");

var $55T4P = parcelRequire("55T4P");

var $ctHiW = parcelRequire("ctHiW");

var $dwRLY = parcelRequire("dwRLY");
const $481e3711d485d1db$var$cmp = (a, op, b, loose)=>{
    switch(op){
        case "===":
            if (typeof a === "object") a = a.version;
            if (typeof b === "object") b = b.version;
            return a === b;
        case "!==":
            if (typeof a === "object") a = a.version;
            if (typeof b === "object") b = b.version;
            return a !== b;
        case "":
        case "=":
        case "==":
            return $52yVP(a, b, loose);
        case "!=":
            return $ar9tn(a, b, loose);
        case ">":
            return $a5R2z(a, b, loose);
        case ">=":
            return $55T4P(a, b, loose);
        case "<":
            return $ctHiW(a, b, loose);
        case "<=":
            return $dwRLY(a, b, loose);
        default:
            throw new TypeError(`Invalid operator: ${op}`);
    }
};
module.exports = $481e3711d485d1db$var$cmp;

});

parcelRequire.register("ewhZQ", function(module, exports) {

var $6thmH = parcelRequire("6thmH");

var $c4uXP = parcelRequire("c4uXP");

var $fp2vc = parcelRequire("fp2vc");
var $a922039139753056$require$re = $fp2vc.safeRe;
var $a922039139753056$require$t = $fp2vc.t;
const $a922039139753056$var$coerce = (version, options)=>{
    if (version instanceof $6thmH) return version;
    if (typeof version === "number") version = String(version);
    if (typeof version !== "string") return null;
    options = options || {};
    let match = null;
    if (!options.rtl) match = version.match($a922039139753056$require$re[$a922039139753056$require$t.COERCE]);
    else {
        // Find the right-most coercible string that does not share
        // a terminus with a more left-ward coercible string.
        // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
        //
        // Walk through the string checking with a /g regexp
        // Manually set the index so as to pick up overlapping matches.
        // Stop when we get a match that ends at the string end, since no
        // coercible string can be more right-ward without the same terminus.
        let next;
        while((next = $a922039139753056$require$re[$a922039139753056$require$t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)){
            if (!match || next.index + next[0].length !== match.index + match[0].length) match = next;
            $a922039139753056$require$re[$a922039139753056$require$t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        // leave it in a clean state
        $a922039139753056$require$re[$a922039139753056$require$t.COERCERTL].lastIndex = -1;
    }
    if (match === null) return null;
    return $c4uXP(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
};
module.exports = $a922039139753056$var$coerce;

});

parcelRequire.register("9GqBa", function(module, exports) {
const $70ccab3237f056f5$var$ANY = Symbol("SemVer ANY");
// hoisted class for cyclic dependency
class $70ccab3237f056f5$var$Comparator {
    static get ANY() {
        return $70ccab3237f056f5$var$ANY;
    }
    constructor(comp, options){
        options = $8QIEu(options);
        if (comp instanceof $70ccab3237f056f5$var$Comparator) {
            if (comp.loose === !!options.loose) return comp;
            else comp = comp.value;
        }
        comp = comp.trim().split(/\s+/).join(" ");
        $9TDmi("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === $70ccab3237f056f5$var$ANY) this.value = "";
        else this.value = this.operator + this.semver.version;
        $9TDmi("comp", this);
    }
    parse(comp) {
        const r = this.options.loose ? $70ccab3237f056f5$require$re[$70ccab3237f056f5$require$t.COMPARATORLOOSE] : $70ccab3237f056f5$require$re[$70ccab3237f056f5$require$t.COMPARATOR];
        const m = comp.match(r);
        if (!m) throw new TypeError(`Invalid comparator: ${comp}`);
        this.operator = m[1] !== undefined ? m[1] : "";
        if (this.operator === "=") this.operator = "";
        // if it literally is just '>' or '' then allow anything.
        if (!m[2]) this.semver = $70ccab3237f056f5$var$ANY;
        else this.semver = new $6thmH(m[2], this.options.loose);
    }
    toString() {
        return this.value;
    }
    test(version) {
        $9TDmi("Comparator.test", version, this.options.loose);
        if (this.semver === $70ccab3237f056f5$var$ANY || version === $70ccab3237f056f5$var$ANY) return true;
        if (typeof version === "string") try {
            version = new $6thmH(version, this.options);
        } catch (er) {
            return false;
        }
        return $6bSIB(version, this.operator, this.semver, this.options);
    }
    intersects(comp, options) {
        if (!(comp instanceof $70ccab3237f056f5$var$Comparator)) throw new TypeError("a Comparator is required");
        if (this.operator === "") {
            if (this.value === "") return true;
            return new $h8SXw(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
            if (comp.value === "") return true;
            return new $h8SXw(this.value, options).test(comp.semver);
        }
        options = $8QIEu(options);
        // Special cases where nothing can possibly be lower
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) return false;
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) return false;
        // Same direction increasing (> or >=)
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) return true;
        // Same direction decreasing (< or <=)
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) return true;
        // same SemVer and both sides are inclusive (<= or >=)
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) return true;
        // opposite directions less than
        if ($6bSIB(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) return true;
        // opposite directions greater than
        if ($6bSIB(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) return true;
        return false;
    }
}
module.exports = $70ccab3237f056f5$var$Comparator;

var $8QIEu = parcelRequire("8QIEu");

var $fp2vc = parcelRequire("fp2vc");
var $70ccab3237f056f5$require$re = $fp2vc.safeRe;
var $70ccab3237f056f5$require$t = $fp2vc.t;

var $6bSIB = parcelRequire("6bSIB");

var $9TDmi = parcelRequire("9TDmi");

var $6thmH = parcelRequire("6thmH");

var $h8SXw = parcelRequire("h8SXw");

});
parcelRequire.register("h8SXw", function(module, exports) {
// hoisted class for cyclic dependency
class $c7add0c14a5762f4$var$Range {
    constructor(range, options){
        options = $8QIEu(options);
        if (range instanceof $c7add0c14a5762f4$var$Range) {
            if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) return range;
            else return new $c7add0c14a5762f4$var$Range(range.raw, options);
        }
        if (range instanceof $9GqBa) {
            // just put it in the set and return
            this.raw = range.value;
            this.set = [
                [
                    range
                ]
            ];
            this.format();
            return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        // First reduce all whitespace as much as possible so we do not have to rely
        // on potentially slow regexes like \s*. This is then stored and used for
        // future error messages as well.
        this.raw = range.trim().split(/\s+/).join(" ");
        // First, split on ||
        this.set = this.raw.split("||")// map the range to a 2d array of comparators
        .map((r)=>this.parseRange(r.trim()))// throw out any comparator lists that are empty
        // this generally means that it was not a valid range, which is allowed
        // in loose mode, but will still throw if the WHOLE range is invalid.
        .filter((c)=>c.length);
        if (!this.set.length) throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        // if we have any that are not the null set, throw out null sets.
        if (this.set.length > 1) {
            // keep the first one, in case they're all null sets
            const first = this.set[0];
            this.set = this.set.filter((c)=>!$c7add0c14a5762f4$var$isNullSet(c[0]));
            if (this.set.length === 0) this.set = [
                first
            ];
            else if (this.set.length > 1) {
                // if we have any that are *, then the range is just *
                for (const c of this.set)if (c.length === 1 && $c7add0c14a5762f4$var$isAny(c[0])) {
                    this.set = [
                        c
                    ];
                    break;
                }
            }
        }
        this.format();
    }
    format() {
        this.range = this.set.map((comps)=>comps.join(" ").trim()).join("||").trim();
        return this.range;
    }
    toString() {
        return this.range;
    }
    parseRange(range) {
        // memoize range parsing for performance.
        // this is a very hot path, and fully deterministic.
        const memoOpts = (this.options.includePrerelease && $c7add0c14a5762f4$require$FLAG_INCLUDE_PRERELEASE) | (this.options.loose && $c7add0c14a5762f4$require$FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range;
        const cached = $c7add0c14a5762f4$var$cache.get(memoKey);
        if (cached) return cached;
        const loose = this.options.loose;
        // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
        const hr = loose ? $c7add0c14a5762f4$require$re[$c7add0c14a5762f4$require$t.HYPHENRANGELOOSE] : $c7add0c14a5762f4$require$re[$c7add0c14a5762f4$require$t.HYPHENRANGE];
        range = range.replace(hr, $c7add0c14a5762f4$var$hyphenReplace(this.options.includePrerelease));
        $9TDmi("hyphen replace", range);
        // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
        range = range.replace($c7add0c14a5762f4$require$re[$c7add0c14a5762f4$require$t.COMPARATORTRIM], $c7add0c14a5762f4$require$comparatorTrimReplace);
        $9TDmi("comparator trim", range);
        // `~ 1.2.3` => `~1.2.3`
        range = range.replace($c7add0c14a5762f4$require$re[$c7add0c14a5762f4$require$t.TILDETRIM], $c7add0c14a5762f4$require$tildeTrimReplace);
        $9TDmi("tilde trim", range);
        // `^ 1.2.3` => `^1.2.3`
        range = range.replace($c7add0c14a5762f4$require$re[$c7add0c14a5762f4$require$t.CARETTRIM], $c7add0c14a5762f4$require$caretTrimReplace);
        $9TDmi("caret trim", range);
        // At this point, the range is completely trimmed and
        // ready to be split into comparators.
        let rangeList = range.split(" ").map((comp)=>$c7add0c14a5762f4$var$parseComparator(comp, this.options)).join(" ").split(/\s+/)// >=0.0.0 is equivalent to *
        .map((comp)=>$c7add0c14a5762f4$var$replaceGTE0(comp, this.options));
        if (loose) // in loose mode, throw out any that are not valid comparators
        rangeList = rangeList.filter((comp)=>{
            $9TDmi("loose invalid filter", comp, this.options);
            return !!comp.match($c7add0c14a5762f4$require$re[$c7add0c14a5762f4$require$t.COMPARATORLOOSE]);
        });
        $9TDmi("range list", rangeList);
        // if any comparators are the null set, then replace with JUST null set
        // if more than one comparator, remove any * comparators
        // also, don't include the same comparator more than once
        const rangeMap = new Map();
        const comparators = rangeList.map((comp)=>new $9GqBa(comp, this.options));
        for (const comp of comparators){
            if ($c7add0c14a5762f4$var$isNullSet(comp)) return [
                comp
            ];
            rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) rangeMap.delete("");
        const result = [
            ...rangeMap.values()
        ];
        $c7add0c14a5762f4$var$cache.set(memoKey, result);
        return result;
    }
    intersects(range, options) {
        if (!(range instanceof $c7add0c14a5762f4$var$Range)) throw new TypeError("a Range is required");
        return this.set.some((thisComparators)=>{
            return $c7add0c14a5762f4$var$isSatisfiable(thisComparators, options) && range.set.some((rangeComparators)=>{
                return $c7add0c14a5762f4$var$isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator)=>{
                    return rangeComparators.every((rangeComparator)=>{
                        return thisComparator.intersects(rangeComparator, options);
                    });
                });
            });
        });
    }
    // if ANY of the sets match ALL of its comparators, then pass
    test(version) {
        if (!version) return false;
        if (typeof version === "string") try {
            version = new $6thmH(version, this.options);
        } catch (er) {
            return false;
        }
        for(let i = 0; i < this.set.length; i++){
            if ($c7add0c14a5762f4$var$testSet(this.set[i], version, this.options)) return true;
        }
        return false;
    }
}
module.exports = $c7add0c14a5762f4$var$Range;

var $2Eftd = parcelRequire("2Eftd");
const $c7add0c14a5762f4$var$cache = new $2Eftd({
    max: 1000
});

var $8QIEu = parcelRequire("8QIEu");

var $9GqBa = parcelRequire("9GqBa");

var $9TDmi = parcelRequire("9TDmi");

var $6thmH = parcelRequire("6thmH");

var $fp2vc = parcelRequire("fp2vc");
var $c7add0c14a5762f4$require$re = $fp2vc.safeRe;
var $c7add0c14a5762f4$require$t = $fp2vc.t;
var $c7add0c14a5762f4$require$comparatorTrimReplace = $fp2vc.comparatorTrimReplace;
var $c7add0c14a5762f4$require$tildeTrimReplace = $fp2vc.tildeTrimReplace;
var $c7add0c14a5762f4$require$caretTrimReplace = $fp2vc.caretTrimReplace;

var $gmqwQ = parcelRequire("gmqwQ");
var $c7add0c14a5762f4$require$FLAG_INCLUDE_PRERELEASE = $gmqwQ.FLAG_INCLUDE_PRERELEASE;
var $c7add0c14a5762f4$require$FLAG_LOOSE = $gmqwQ.FLAG_LOOSE;
const $c7add0c14a5762f4$var$isNullSet = (c)=>c.value === "<0.0.0-0";
const $c7add0c14a5762f4$var$isAny = (c)=>c.value === "";
// take a set of comparators and determine whether there
// exists a version which can satisfy it
const $c7add0c14a5762f4$var$isSatisfiable = (comparators, options)=>{
    let result = true;
    const remainingComparators = comparators.slice();
    let testComparator = remainingComparators.pop();
    while(result && remainingComparators.length){
        result = remainingComparators.every((otherComparator)=>{
            return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
    }
    return result;
};
// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
const $c7add0c14a5762f4$var$parseComparator = (comp, options)=>{
    $9TDmi("comp", comp, options);
    comp = $c7add0c14a5762f4$var$replaceCarets(comp, options);
    $9TDmi("caret", comp);
    comp = $c7add0c14a5762f4$var$replaceTildes(comp, options);
    $9TDmi("tildes", comp);
    comp = $c7add0c14a5762f4$var$replaceXRanges(comp, options);
    $9TDmi("xrange", comp);
    comp = $c7add0c14a5762f4$var$replaceStars(comp, options);
    $9TDmi("stars", comp);
    return comp;
};
const $c7add0c14a5762f4$var$isX = (id)=>!id || id.toLowerCase() === "x" || id === "*";
// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
// ~0.0.1 --> >=0.0.1 <0.1.0-0
const $c7add0c14a5762f4$var$replaceTildes = (comp, options)=>{
    return comp.trim().split(/\s+/).map((c)=>$c7add0c14a5762f4$var$replaceTilde(c, options)).join(" ");
};
const $c7add0c14a5762f4$var$replaceTilde = (comp, options)=>{
    const r = options.loose ? $c7add0c14a5762f4$require$re[$c7add0c14a5762f4$require$t.TILDELOOSE] : $c7add0c14a5762f4$require$re[$c7add0c14a5762f4$require$t.TILDE];
    return comp.replace(r, (_, M, m, p, pr)=>{
        $9TDmi("tilde", comp, _, M, m, p, pr);
        let ret;
        if ($c7add0c14a5762f4$var$isX(M)) ret = "";
        else if ($c7add0c14a5762f4$var$isX(m)) ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        else if ($c7add0c14a5762f4$var$isX(p)) // ~1.2 == >=1.2.0 <1.3.0-0
        ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        else if (pr) {
            $9TDmi("replaceTilde pr", pr);
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else // ~1.2.3 == >=1.2.3 <1.3.0-0
        ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        $9TDmi("tilde return", ret);
        return ret;
    });
};
// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
// ^1.2.3 --> >=1.2.3 <2.0.0-0
// ^1.2.0 --> >=1.2.0 <2.0.0-0
// ^0.0.1 --> >=0.0.1 <0.0.2-0
// ^0.1.0 --> >=0.1.0 <0.2.0-0
const $c7add0c14a5762f4$var$replaceCarets = (comp, options)=>{
    return comp.trim().split(/\s+/).map((c)=>$c7add0c14a5762f4$var$replaceCaret(c, options)).join(" ");
};
const $c7add0c14a5762f4$var$replaceCaret = (comp, options)=>{
    $9TDmi("caret", comp, options);
    const r = options.loose ? $c7add0c14a5762f4$require$re[$c7add0c14a5762f4$require$t.CARETLOOSE] : $c7add0c14a5762f4$require$re[$c7add0c14a5762f4$require$t.CARET];
    const z = options.includePrerelease ? "-0" : "";
    return comp.replace(r, (_, M, m, p, pr)=>{
        $9TDmi("caret", comp, _, M, m, p, pr);
        let ret;
        if ($c7add0c14a5762f4$var$isX(M)) ret = "";
        else if ($c7add0c14a5762f4$var$isX(m)) ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        else if ($c7add0c14a5762f4$var$isX(p)) {
            if (M === "0") ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
            else ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
        } else if (pr) {
            $9TDmi("replaceCaret pr", pr);
            if (M === "0") {
                if (m === "0") ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
                else ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            } else ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
        } else {
            $9TDmi("no pr");
            if (M === "0") {
                if (m === "0") ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
                else ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            } else ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
        }
        $9TDmi("caret return", ret);
        return ret;
    });
};
const $c7add0c14a5762f4$var$replaceXRanges = (comp, options)=>{
    $9TDmi("replaceXRanges", comp, options);
    return comp.split(/\s+/).map((c)=>$c7add0c14a5762f4$var$replaceXRange(c, options)).join(" ");
};
const $c7add0c14a5762f4$var$replaceXRange = (comp, options)=>{
    comp = comp.trim();
    const r = options.loose ? $c7add0c14a5762f4$require$re[$c7add0c14a5762f4$require$t.XRANGELOOSE] : $c7add0c14a5762f4$require$re[$c7add0c14a5762f4$require$t.XRANGE];
    return comp.replace(r, (ret, gtlt, M, m, p, pr)=>{
        $9TDmi("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = $c7add0c14a5762f4$var$isX(M);
        const xm = xM || $c7add0c14a5762f4$var$isX(m);
        const xp = xm || $c7add0c14a5762f4$var$isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) gtlt = "";
        // if we're including prereleases in the match, then we need
        // to fix this to -0, the lowest possible prerelease value
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
            if (gtlt === ">" || gtlt === "<") // nothing is allowed
            ret = "<0.0.0-0";
            else // nothing is forbidden
            ret = "*";
        } else if (gtlt && anyX) {
            // we know patch is an x, because we have any x at all.
            // replace X with 0
            if (xm) m = 0;
            p = 0;
            if (gtlt === ">") {
                // >1 => >=2.0.0
                // >1.2 => >=1.3.0
                gtlt = ">=";
                if (xm) {
                    M = +M + 1;
                    m = 0;
                    p = 0;
                } else {
                    m = +m + 1;
                    p = 0;
                }
            } else if (gtlt === "<=") {
                // <=0.7.x is actually <0.8.0, since any 0.7.x should
                // pass.  Similarly, <=7.x is actually <8.0.0, etc.
                gtlt = "<";
                if (xm) M = +M + 1;
                else m = +m + 1;
            }
            if (gtlt === "<") pr = "-0";
            ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        else if (xp) ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        $9TDmi("xRange return", ret);
        return ret;
    });
};
// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
const $c7add0c14a5762f4$var$replaceStars = (comp, options)=>{
    $9TDmi("replaceStars", comp, options);
    // Looseness is ignored here.  star is always as loose as it gets!
    return comp.trim().replace($c7add0c14a5762f4$require$re[$c7add0c14a5762f4$require$t.STAR], "");
};
const $c7add0c14a5762f4$var$replaceGTE0 = (comp, options)=>{
    $9TDmi("replaceGTE0", comp, options);
    return comp.trim().replace($c7add0c14a5762f4$require$re[options.includePrerelease ? $c7add0c14a5762f4$require$t.GTE0PRE : $c7add0c14a5762f4$require$t.GTE0], "");
};
// This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
const $c7add0c14a5762f4$var$hyphenReplace = (incPr)=>($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb)=>{
        if ($c7add0c14a5762f4$var$isX(fM)) from = "";
        else if ($c7add0c14a5762f4$var$isX(fm)) from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
        else if ($c7add0c14a5762f4$var$isX(fp)) from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
        else if (fpr) from = `>=${from}`;
        else from = `>=${from}${incPr ? "-0" : ""}`;
        if ($c7add0c14a5762f4$var$isX(tM)) to = "";
        else if ($c7add0c14a5762f4$var$isX(tm)) to = `<${+tM + 1}.0.0-0`;
        else if ($c7add0c14a5762f4$var$isX(tp)) to = `<${tM}.${+tm + 1}.0-0`;
        else if (tpr) to = `<=${tM}.${tm}.${tp}-${tpr}`;
        else if (incPr) to = `<${tM}.${tm}.${+tp + 1}-0`;
        else to = `<=${to}`;
        return `${from} ${to}`.trim();
    };
const $c7add0c14a5762f4$var$testSet = (set, version, options)=>{
    for(let i = 0; i < set.length; i++){
        if (!set[i].test(version)) return false;
    }
    if (version.prerelease.length && !options.includePrerelease) {
        // Find the set of versions that are allowed to have prereleases
        // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
        // That should allow `1.2.3-pr.2` to pass.
        // However, `1.2.4-alpha.notready` should NOT be allowed,
        // even though it's within the range set by the comparators.
        for(let i = 0; i < set.length; i++){
            $9TDmi(set[i].semver);
            if (set[i].semver === $9GqBa.ANY) continue;
            if (set[i].semver.prerelease.length > 0) {
                const allowed = set[i].semver;
                if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return true;
            }
        }
        // Version has a -pre, but it's not one of the ones we like.
        return false;
    }
    return true;
};

});
parcelRequire.register("2Eftd", function(module, exports) {
"use strict";

var $hkdJB = parcelRequire("hkdJB");
const $1edb513d4ae9dc77$var$MAX = Symbol("max");
const $1edb513d4ae9dc77$var$LENGTH = Symbol("length");
const $1edb513d4ae9dc77$var$LENGTH_CALCULATOR = Symbol("lengthCalculator");
const $1edb513d4ae9dc77$var$ALLOW_STALE = Symbol("allowStale");
const $1edb513d4ae9dc77$var$MAX_AGE = Symbol("maxAge");
const $1edb513d4ae9dc77$var$DISPOSE = Symbol("dispose");
const $1edb513d4ae9dc77$var$NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
const $1edb513d4ae9dc77$var$LRU_LIST = Symbol("lruList");
const $1edb513d4ae9dc77$var$CACHE = Symbol("cache");
const $1edb513d4ae9dc77$var$UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
const $1edb513d4ae9dc77$var$naiveLength = ()=>1;
// lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.
class $1edb513d4ae9dc77$var$LRUCache {
    constructor(options){
        if (typeof options === "number") options = {
            max: options
        };
        if (!options) options = {};
        if (options.max && (typeof options.max !== "number" || options.max < 0)) throw new TypeError("max must be a non-negative number");
        // Kind of weird to have a default max of Infinity, but oh well.
        const max = this[$1edb513d4ae9dc77$var$MAX] = options.max || Infinity;
        const lc = options.length || $1edb513d4ae9dc77$var$naiveLength;
        this[$1edb513d4ae9dc77$var$LENGTH_CALCULATOR] = typeof lc !== "function" ? $1edb513d4ae9dc77$var$naiveLength : lc;
        this[$1edb513d4ae9dc77$var$ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== "number") throw new TypeError("maxAge must be a number");
        this[$1edb513d4ae9dc77$var$MAX_AGE] = options.maxAge || 0;
        this[$1edb513d4ae9dc77$var$DISPOSE] = options.dispose;
        this[$1edb513d4ae9dc77$var$NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[$1edb513d4ae9dc77$var$UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
    }
    // resize the cache when the max changes.
    set max(mL) {
        if (typeof mL !== "number" || mL < 0) throw new TypeError("max must be a non-negative number");
        this[$1edb513d4ae9dc77$var$MAX] = mL || Infinity;
        $1edb513d4ae9dc77$var$trim(this);
    }
    get max() {
        return this[$1edb513d4ae9dc77$var$MAX];
    }
    set allowStale(allowStale) {
        this[$1edb513d4ae9dc77$var$ALLOW_STALE] = !!allowStale;
    }
    get allowStale() {
        return this[$1edb513d4ae9dc77$var$ALLOW_STALE];
    }
    set maxAge(mA) {
        if (typeof mA !== "number") throw new TypeError("maxAge must be a non-negative number");
        this[$1edb513d4ae9dc77$var$MAX_AGE] = mA;
        $1edb513d4ae9dc77$var$trim(this);
    }
    get maxAge() {
        return this[$1edb513d4ae9dc77$var$MAX_AGE];
    }
    // resize the cache when the lengthCalculator changes.
    set lengthCalculator(lC) {
        if (typeof lC !== "function") lC = $1edb513d4ae9dc77$var$naiveLength;
        if (lC !== this[$1edb513d4ae9dc77$var$LENGTH_CALCULATOR]) {
            this[$1edb513d4ae9dc77$var$LENGTH_CALCULATOR] = lC;
            this[$1edb513d4ae9dc77$var$LENGTH] = 0;
            this[$1edb513d4ae9dc77$var$LRU_LIST].forEach((hit)=>{
                hit.length = this[$1edb513d4ae9dc77$var$LENGTH_CALCULATOR](hit.value, hit.key);
                this[$1edb513d4ae9dc77$var$LENGTH] += hit.length;
            });
        }
        $1edb513d4ae9dc77$var$trim(this);
    }
    get lengthCalculator() {
        return this[$1edb513d4ae9dc77$var$LENGTH_CALCULATOR];
    }
    get length() {
        return this[$1edb513d4ae9dc77$var$LENGTH];
    }
    get itemCount() {
        return this[$1edb513d4ae9dc77$var$LRU_LIST].length;
    }
    rforEach(fn, thisp) {
        thisp = thisp || this;
        for(let walker = this[$1edb513d4ae9dc77$var$LRU_LIST].tail; walker !== null;){
            const prev = walker.prev;
            $1edb513d4ae9dc77$var$forEachStep(this, fn, walker, thisp);
            walker = prev;
        }
    }
    forEach(fn, thisp) {
        thisp = thisp || this;
        for(let walker = this[$1edb513d4ae9dc77$var$LRU_LIST].head; walker !== null;){
            const next = walker.next;
            $1edb513d4ae9dc77$var$forEachStep(this, fn, walker, thisp);
            walker = next;
        }
    }
    keys() {
        return this[$1edb513d4ae9dc77$var$LRU_LIST].toArray().map((k)=>k.key);
    }
    values() {
        return this[$1edb513d4ae9dc77$var$LRU_LIST].toArray().map((k)=>k.value);
    }
    reset() {
        if (this[$1edb513d4ae9dc77$var$DISPOSE] && this[$1edb513d4ae9dc77$var$LRU_LIST] && this[$1edb513d4ae9dc77$var$LRU_LIST].length) this[$1edb513d4ae9dc77$var$LRU_LIST].forEach((hit)=>this[$1edb513d4ae9dc77$var$DISPOSE](hit.key, hit.value));
        this[$1edb513d4ae9dc77$var$CACHE] = new Map() // hash of items by key
        ;
        this[$1edb513d4ae9dc77$var$LRU_LIST] = new $hkdJB() // list of items in order of use recency
        ;
        this[$1edb513d4ae9dc77$var$LENGTH] = 0 // length of items in the list
        ;
    }
    dump() {
        return this[$1edb513d4ae9dc77$var$LRU_LIST].map((hit)=>$1edb513d4ae9dc77$var$isStale(this, hit) ? false : {
                k: hit.key,
                v: hit.value,
                e: hit.now + (hit.maxAge || 0)
            }).toArray().filter((h)=>h);
    }
    dumpLru() {
        return this[$1edb513d4ae9dc77$var$LRU_LIST];
    }
    set(key, value, maxAge) {
        maxAge = maxAge || this[$1edb513d4ae9dc77$var$MAX_AGE];
        if (maxAge && typeof maxAge !== "number") throw new TypeError("maxAge must be a number");
        const now = maxAge ? Date.now() : 0;
        const len = this[$1edb513d4ae9dc77$var$LENGTH_CALCULATOR](value, key);
        if (this[$1edb513d4ae9dc77$var$CACHE].has(key)) {
            if (len > this[$1edb513d4ae9dc77$var$MAX]) {
                $1edb513d4ae9dc77$var$del(this, this[$1edb513d4ae9dc77$var$CACHE].get(key));
                return false;
            }
            const node = this[$1edb513d4ae9dc77$var$CACHE].get(key);
            const item = node.value;
            // dispose of the old one before overwriting
            // split out into 2 ifs for better coverage tracking
            if (this[$1edb513d4ae9dc77$var$DISPOSE]) {
                if (!this[$1edb513d4ae9dc77$var$NO_DISPOSE_ON_SET]) this[$1edb513d4ae9dc77$var$DISPOSE](key, item.value);
            }
            item.now = now;
            item.maxAge = maxAge;
            item.value = value;
            this[$1edb513d4ae9dc77$var$LENGTH] += len - item.length;
            item.length = len;
            this.get(key);
            $1edb513d4ae9dc77$var$trim(this);
            return true;
        }
        const hit = new $1edb513d4ae9dc77$var$Entry(key, value, len, now, maxAge);
        // oversized objects fall out of cache automatically.
        if (hit.length > this[$1edb513d4ae9dc77$var$MAX]) {
            if (this[$1edb513d4ae9dc77$var$DISPOSE]) this[$1edb513d4ae9dc77$var$DISPOSE](key, value);
            return false;
        }
        this[$1edb513d4ae9dc77$var$LENGTH] += hit.length;
        this[$1edb513d4ae9dc77$var$LRU_LIST].unshift(hit);
        this[$1edb513d4ae9dc77$var$CACHE].set(key, this[$1edb513d4ae9dc77$var$LRU_LIST].head);
        $1edb513d4ae9dc77$var$trim(this);
        return true;
    }
    has(key) {
        if (!this[$1edb513d4ae9dc77$var$CACHE].has(key)) return false;
        const hit = this[$1edb513d4ae9dc77$var$CACHE].get(key).value;
        return !$1edb513d4ae9dc77$var$isStale(this, hit);
    }
    get(key) {
        return $1edb513d4ae9dc77$var$get(this, key, true);
    }
    peek(key) {
        return $1edb513d4ae9dc77$var$get(this, key, false);
    }
    pop() {
        const node = this[$1edb513d4ae9dc77$var$LRU_LIST].tail;
        if (!node) return null;
        $1edb513d4ae9dc77$var$del(this, node);
        return node.value;
    }
    del(key) {
        $1edb513d4ae9dc77$var$del(this, this[$1edb513d4ae9dc77$var$CACHE].get(key));
    }
    load(arr) {
        // reset the cache
        this.reset();
        const now = Date.now();
        // A previous serialized cache has the most recent items first
        for(let l = arr.length - 1; l >= 0; l--){
            const hit = arr[l];
            const expiresAt = hit.e || 0;
            if (expiresAt === 0) // the item was created without expiration in a non aged cache
            this.set(hit.k, hit.v);
            else {
                const maxAge = expiresAt - now;
                // dont add already expired items
                if (maxAge > 0) this.set(hit.k, hit.v, maxAge);
            }
        }
    }
    prune() {
        this[$1edb513d4ae9dc77$var$CACHE].forEach((value, key)=>$1edb513d4ae9dc77$var$get(this, key, false));
    }
}
const $1edb513d4ae9dc77$var$get = (self, key, doUse)=>{
    const node = self[$1edb513d4ae9dc77$var$CACHE].get(key);
    if (node) {
        const hit = node.value;
        if ($1edb513d4ae9dc77$var$isStale(self, hit)) {
            $1edb513d4ae9dc77$var$del(self, node);
            if (!self[$1edb513d4ae9dc77$var$ALLOW_STALE]) return undefined;
        } else if (doUse) {
            if (self[$1edb513d4ae9dc77$var$UPDATE_AGE_ON_GET]) node.value.now = Date.now();
            self[$1edb513d4ae9dc77$var$LRU_LIST].unshiftNode(node);
        }
        return hit.value;
    }
};
const $1edb513d4ae9dc77$var$isStale = (self, hit)=>{
    if (!hit || !hit.maxAge && !self[$1edb513d4ae9dc77$var$MAX_AGE]) return false;
    const diff = Date.now() - hit.now;
    return hit.maxAge ? diff > hit.maxAge : self[$1edb513d4ae9dc77$var$MAX_AGE] && diff > self[$1edb513d4ae9dc77$var$MAX_AGE];
};
const $1edb513d4ae9dc77$var$trim = (self)=>{
    if (self[$1edb513d4ae9dc77$var$LENGTH] > self[$1edb513d4ae9dc77$var$MAX]) for(let walker = self[$1edb513d4ae9dc77$var$LRU_LIST].tail; self[$1edb513d4ae9dc77$var$LENGTH] > self[$1edb513d4ae9dc77$var$MAX] && walker !== null;){
        // We know that we're about to delete this one, and also
        // what the next least recently used key will be, so just
        // go ahead and set it now.
        const prev = walker.prev;
        $1edb513d4ae9dc77$var$del(self, walker);
        walker = prev;
    }
};
const $1edb513d4ae9dc77$var$del = (self, node)=>{
    if (node) {
        const hit = node.value;
        if (self[$1edb513d4ae9dc77$var$DISPOSE]) self[$1edb513d4ae9dc77$var$DISPOSE](hit.key, hit.value);
        self[$1edb513d4ae9dc77$var$LENGTH] -= hit.length;
        self[$1edb513d4ae9dc77$var$CACHE].delete(hit.key);
        self[$1edb513d4ae9dc77$var$LRU_LIST].removeNode(node);
    }
};
class $1edb513d4ae9dc77$var$Entry {
    constructor(key, value, length, now, maxAge){
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
    }
}
const $1edb513d4ae9dc77$var$forEachStep = (self, fn, node, thisp)=>{
    let hit = node.value;
    if ($1edb513d4ae9dc77$var$isStale(self, hit)) {
        $1edb513d4ae9dc77$var$del(self, node);
        if (!self[$1edb513d4ae9dc77$var$ALLOW_STALE]) hit = undefined;
    }
    if (hit) fn.call(thisp, hit.value, hit.key, self);
};
module.exports = $1edb513d4ae9dc77$var$LRUCache;

});
parcelRequire.register("hkdJB", function(module, exports) {
"use strict";
module.exports = $c9cef55240634257$var$Yallist;
$c9cef55240634257$var$Yallist.Node = $c9cef55240634257$var$Node;
$c9cef55240634257$var$Yallist.create = $c9cef55240634257$var$Yallist;
function $c9cef55240634257$var$Yallist(list) {
    var self = this;
    if (!(self instanceof $c9cef55240634257$var$Yallist)) self = new $c9cef55240634257$var$Yallist();
    self.tail = null;
    self.head = null;
    self.length = 0;
    if (list && typeof list.forEach === "function") list.forEach(function(item) {
        self.push(item);
    });
    else if (arguments.length > 0) for(var i = 0, l = arguments.length; i < l; i++)self.push(arguments[i]);
    return self;
}
$c9cef55240634257$var$Yallist.prototype.removeNode = function(node) {
    if (node.list !== this) throw new Error("removing node which does not belong to this list");
    var next = node.next;
    var prev = node.prev;
    if (next) next.prev = prev;
    if (prev) prev.next = next;
    if (node === this.head) this.head = next;
    if (node === this.tail) this.tail = prev;
    node.list.length--;
    node.next = null;
    node.prev = null;
    node.list = null;
    return next;
};
$c9cef55240634257$var$Yallist.prototype.unshiftNode = function(node) {
    if (node === this.head) return;
    if (node.list) node.list.removeNode(node);
    var head = this.head;
    node.list = this;
    node.next = head;
    if (head) head.prev = node;
    this.head = node;
    if (!this.tail) this.tail = node;
    this.length++;
};
$c9cef55240634257$var$Yallist.prototype.pushNode = function(node) {
    if (node === this.tail) return;
    if (node.list) node.list.removeNode(node);
    var tail = this.tail;
    node.list = this;
    node.prev = tail;
    if (tail) tail.next = node;
    this.tail = node;
    if (!this.head) this.head = node;
    this.length++;
};
$c9cef55240634257$var$Yallist.prototype.push = function() {
    for(var i = 0, l = arguments.length; i < l; i++)$c9cef55240634257$var$push(this, arguments[i]);
    return this.length;
};
$c9cef55240634257$var$Yallist.prototype.unshift = function() {
    for(var i = 0, l = arguments.length; i < l; i++)$c9cef55240634257$var$unshift(this, arguments[i]);
    return this.length;
};
$c9cef55240634257$var$Yallist.prototype.pop = function() {
    if (!this.tail) return undefined;
    var res = this.tail.value;
    this.tail = this.tail.prev;
    if (this.tail) this.tail.next = null;
    else this.head = null;
    this.length--;
    return res;
};
$c9cef55240634257$var$Yallist.prototype.shift = function() {
    if (!this.head) return undefined;
    var res = this.head.value;
    this.head = this.head.next;
    if (this.head) this.head.prev = null;
    else this.tail = null;
    this.length--;
    return res;
};
$c9cef55240634257$var$Yallist.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for(var walker = this.head, i = 0; walker !== null; i++){
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
    }
};
$c9cef55240634257$var$Yallist.prototype.forEachReverse = function(fn, thisp) {
    thisp = thisp || this;
    for(var walker = this.tail, i = this.length - 1; walker !== null; i--){
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
    }
};
$c9cef55240634257$var$Yallist.prototype.get = function(n) {
    for(var i = 0, walker = this.head; walker !== null && i < n; i++)// abort out of the list early if we hit a cycle
    walker = walker.next;
    if (i === n && walker !== null) return walker.value;
};
$c9cef55240634257$var$Yallist.prototype.getReverse = function(n) {
    for(var i = 0, walker = this.tail; walker !== null && i < n; i++)// abort out of the list early if we hit a cycle
    walker = walker.prev;
    if (i === n && walker !== null) return walker.value;
};
$c9cef55240634257$var$Yallist.prototype.map = function(fn, thisp) {
    thisp = thisp || this;
    var res = new $c9cef55240634257$var$Yallist();
    for(var walker = this.head; walker !== null;){
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
    }
    return res;
};
$c9cef55240634257$var$Yallist.prototype.mapReverse = function(fn, thisp) {
    thisp = thisp || this;
    var res = new $c9cef55240634257$var$Yallist();
    for(var walker = this.tail; walker !== null;){
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
    }
    return res;
};
$c9cef55240634257$var$Yallist.prototype.reduce = function(fn, initial) {
    var acc;
    var walker = this.head;
    if (arguments.length > 1) acc = initial;
    else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
    } else throw new TypeError("Reduce of empty list with no initial value");
    for(var i = 0; walker !== null; i++){
        acc = fn(acc, walker.value, i);
        walker = walker.next;
    }
    return acc;
};
$c9cef55240634257$var$Yallist.prototype.reduceReverse = function(fn, initial) {
    var acc;
    var walker = this.tail;
    if (arguments.length > 1) acc = initial;
    else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
    } else throw new TypeError("Reduce of empty list with no initial value");
    for(var i = this.length - 1; walker !== null; i--){
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
    }
    return acc;
};
$c9cef55240634257$var$Yallist.prototype.toArray = function() {
    var arr = new Array(this.length);
    for(var i = 0, walker = this.head; walker !== null; i++){
        arr[i] = walker.value;
        walker = walker.next;
    }
    return arr;
};
$c9cef55240634257$var$Yallist.prototype.toArrayReverse = function() {
    var arr = new Array(this.length);
    for(var i = 0, walker = this.tail; walker !== null; i++){
        arr[i] = walker.value;
        walker = walker.prev;
    }
    return arr;
};
$c9cef55240634257$var$Yallist.prototype.slice = function(from, to) {
    to = to || this.length;
    if (to < 0) to += this.length;
    from = from || 0;
    if (from < 0) from += this.length;
    var ret = new $c9cef55240634257$var$Yallist();
    if (to < from || to < 0) return ret;
    if (from < 0) from = 0;
    if (to > this.length) to = this.length;
    for(var i = 0, walker = this.head; walker !== null && i < from; i++)walker = walker.next;
    for(; walker !== null && i < to; i++, walker = walker.next)ret.push(walker.value);
    return ret;
};
$c9cef55240634257$var$Yallist.prototype.sliceReverse = function(from, to) {
    to = to || this.length;
    if (to < 0) to += this.length;
    from = from || 0;
    if (from < 0) from += this.length;
    var ret = new $c9cef55240634257$var$Yallist();
    if (to < from || to < 0) return ret;
    if (from < 0) from = 0;
    if (to > this.length) to = this.length;
    for(var i = this.length, walker = this.tail; walker !== null && i > to; i--)walker = walker.prev;
    for(; walker !== null && i > from; i--, walker = walker.prev)ret.push(walker.value);
    return ret;
};
$c9cef55240634257$var$Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
    if (start > this.length) start = this.length - 1;
    if (start < 0) start = this.length + start;
    for(var i = 0, walker = this.head; walker !== null && i < start; i++)walker = walker.next;
    var ret = [];
    for(var i = 0; walker && i < deleteCount; i++){
        ret.push(walker.value);
        walker = this.removeNode(walker);
    }
    if (walker === null) walker = this.tail;
    if (walker !== this.head && walker !== this.tail) walker = walker.prev;
    for(var i = 0; i < nodes.length; i++)walker = $c9cef55240634257$var$insert(this, walker, nodes[i]);
    return ret;
};
$c9cef55240634257$var$Yallist.prototype.reverse = function() {
    var head = this.head;
    var tail = this.tail;
    for(var walker = head; walker !== null; walker = walker.prev){
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
    }
    this.head = tail;
    this.tail = head;
    return this;
};
function $c9cef55240634257$var$insert(self, node, value) {
    var inserted = node === self.head ? new $c9cef55240634257$var$Node(value, null, node, self) : new $c9cef55240634257$var$Node(value, node, node.next, self);
    if (inserted.next === null) self.tail = inserted;
    if (inserted.prev === null) self.head = inserted;
    self.length++;
    return inserted;
}
function $c9cef55240634257$var$push(self, item) {
    self.tail = new $c9cef55240634257$var$Node(item, self.tail, null, self);
    if (!self.head) self.head = self.tail;
    self.length++;
}
function $c9cef55240634257$var$unshift(self, item) {
    self.head = new $c9cef55240634257$var$Node(item, null, self.head, self);
    if (!self.tail) self.tail = self.head;
    self.length++;
}
function $c9cef55240634257$var$Node(value, prev, next, list) {
    if (!(this instanceof $c9cef55240634257$var$Node)) return new $c9cef55240634257$var$Node(value, prev, next, list);
    this.list = list;
    this.value = value;
    if (prev) {
        prev.next = this;
        this.prev = prev;
    } else this.prev = null;
    if (next) {
        next.prev = this;
        this.next = next;
    } else this.next = null;
}

try {
    // add if support for Symbol.iterator is present
    (parcelRequire("jNojw"))($c9cef55240634257$var$Yallist);
} catch (er) {}

});
parcelRequire.register("jNojw", function(module, exports) {
"use strict";
module.exports = function(Yallist) {
    Yallist.prototype[Symbol.iterator] = function*() {
        for(let walker = this.head; walker; walker = walker.next)yield walker.value;
    };
};

});





parcelRequire.register("lF483", function(module, exports) {

var $h8SXw = parcelRequire("h8SXw");
const $fc50a13611461445$var$satisfies = (version, range, options)=>{
    try {
        range = new $h8SXw(range, options);
    } catch (er) {
        return false;
    }
    return range.test(version);
};
module.exports = $fc50a13611461445$var$satisfies;

});

parcelRequire.register("1xiPj", function(module, exports) {

var $h8SXw = parcelRequire("h8SXw");
// Mostly just for testing and legacy API reasons
const $11e77a1c7c9cd8cf$var$toComparators = (range, options)=>new $h8SXw(range, options).set.map((comp)=>comp.map((c)=>c.value).join(" ").trim().split(" "));
module.exports = $11e77a1c7c9cd8cf$var$toComparators;

});

parcelRequire.register("bKqK5", function(module, exports) {

var $6thmH = parcelRequire("6thmH");

var $h8SXw = parcelRequire("h8SXw");
const $88d8bc0a5f466ba2$var$maxSatisfying = (versions, range, options)=>{
    let max = null;
    let maxSV = null;
    let rangeObj = null;
    try {
        rangeObj = new $h8SXw(range, options);
    } catch (er) {
        return null;
    }
    versions.forEach((v)=>{
        if (rangeObj.test(v)) // satisfies(v, range, options)
        {
            if (!max || maxSV.compare(v) === -1) {
                // compare(max, v, true)
                max = v;
                maxSV = new $6thmH(max, options);
            }
        }
    });
    return max;
};
module.exports = $88d8bc0a5f466ba2$var$maxSatisfying;

});

parcelRequire.register("a46Ds", function(module, exports) {

var $6thmH = parcelRequire("6thmH");

var $h8SXw = parcelRequire("h8SXw");
const $753f6cc3cbbb5c21$var$minSatisfying = (versions, range, options)=>{
    let min = null;
    let minSV = null;
    let rangeObj = null;
    try {
        rangeObj = new $h8SXw(range, options);
    } catch (er) {
        return null;
    }
    versions.forEach((v)=>{
        if (rangeObj.test(v)) // satisfies(v, range, options)
        {
            if (!min || minSV.compare(v) === 1) {
                // compare(min, v, true)
                min = v;
                minSV = new $6thmH(min, options);
            }
        }
    });
    return min;
};
module.exports = $753f6cc3cbbb5c21$var$minSatisfying;

});

parcelRequire.register("jkJlh", function(module, exports) {

var $6thmH = parcelRequire("6thmH");

var $h8SXw = parcelRequire("h8SXw");

var $a5R2z = parcelRequire("a5R2z");
const $e1330e963a91c1e3$var$minVersion = (range, loose)=>{
    range = new $h8SXw(range, loose);
    let minver = new $6thmH("0.0.0");
    if (range.test(minver)) return minver;
    minver = new $6thmH("0.0.0-0");
    if (range.test(minver)) return minver;
    minver = null;
    for(let i = 0; i < range.set.length; ++i){
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator)=>{
            // Clone to avoid manipulating the comparator's semver object.
            const compver = new $6thmH(comparator.semver.version);
            switch(comparator.operator){
                case ">":
                    if (compver.prerelease.length === 0) compver.patch++;
                    else compver.prerelease.push(0);
                    compver.raw = compver.format();
                /* fallthrough */ case "":
                case ">=":
                    if (!setMin || $a5R2z(compver, setMin)) setMin = compver;
                    break;
                case "<":
                case "<=":
                    break;
                /* istanbul ignore next */ default:
                    throw new Error(`Unexpected operation: ${comparator.operator}`);
            }
        });
        if (setMin && (!minver || $a5R2z(minver, setMin))) minver = setMin;
    }
    if (minver && range.test(minver)) return minver;
    return null;
};
module.exports = $e1330e963a91c1e3$var$minVersion;

});

parcelRequire.register("2zdhA", function(module, exports) {

var $h8SXw = parcelRequire("h8SXw");
const $1de927528303ec9a$var$validRange = (range, options)=>{
    try {
        // Return '*' instead of '' so that truthiness works.
        // This will throw if it's invalid anyway
        return new $h8SXw(range, options).range || "*";
    } catch (er) {
        return null;
    }
};
module.exports = $1de927528303ec9a$var$validRange;

});

parcelRequire.register("dmh4L", function(module, exports) {

var $6thmH = parcelRequire("6thmH");

var $9GqBa = parcelRequire("9GqBa");
const { ANY: $9b9a935a4c211ead$var$ANY } = $9GqBa;

var $h8SXw = parcelRequire("h8SXw");

var $lF483 = parcelRequire("lF483");

var $a5R2z = parcelRequire("a5R2z");

var $ctHiW = parcelRequire("ctHiW");

var $dwRLY = parcelRequire("dwRLY");

var $55T4P = parcelRequire("55T4P");
const $9b9a935a4c211ead$var$outside = (version, range, hilo, options)=>{
    version = new $6thmH(version, options);
    range = new $h8SXw(range, options);
    let gtfn, ltefn, ltfn, comp, ecomp;
    switch(hilo){
        case ">":
            gtfn = $a5R2z;
            ltefn = $dwRLY;
            ltfn = $ctHiW;
            comp = ">";
            ecomp = ">=";
            break;
        case "<":
            gtfn = $ctHiW;
            ltefn = $55T4P;
            ltfn = $a5R2z;
            comp = "<";
            ecomp = "<=";
            break;
        default:
            throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    // If it satisfies the range it is not outside
    if ($lF483(version, range, options)) return false;
    // From now on, variable terms are as if we're in "gtr" mode.
    // but note that everything is flipped for the "ltr" function.
    for(let i = 0; i < range.set.length; ++i){
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator)=>{
            if (comparator.semver === $9b9a935a4c211ead$var$ANY) comparator = new $9GqBa(">=0.0.0");
            high = high || comparator;
            low = low || comparator;
            if (gtfn(comparator.semver, high.semver, options)) high = comparator;
            else if (ltfn(comparator.semver, low.semver, options)) low = comparator;
        });
        // If the edge version comparator has a operator then our version
        // isn't outside it
        if (high.operator === comp || high.operator === ecomp) return false;
        // If the lowest version comparator has an operator and our version
        // is less than it then it isn't higher than the range
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) return false;
        else if (low.operator === ecomp && ltfn(version, low.semver)) return false;
    }
    return true;
};
module.exports = $9b9a935a4c211ead$var$outside;

});

parcelRequire.register("b7jSC", function(module, exports) {
// Determine if version is greater than all the versions possible in the range.

var $dmh4L = parcelRequire("dmh4L");
const $817fc4e77abf66f9$var$gtr = (version, range, options)=>$dmh4L(version, range, ">", options);
module.exports = $817fc4e77abf66f9$var$gtr;

});

parcelRequire.register("bwshW", function(module, exports) {

var $dmh4L = parcelRequire("dmh4L");
// Determine if version is less than all the versions possible in the range
const $8638a05e2b25911f$var$ltr = (version, range, options)=>$dmh4L(version, range, "<", options);
module.exports = $8638a05e2b25911f$var$ltr;

});

parcelRequire.register("aJRe7", function(module, exports) {

var $h8SXw = parcelRequire("h8SXw");
const $7d1765143352a3d5$var$intersects = (r1, r2, options)=>{
    r1 = new $h8SXw(r1, options);
    r2 = new $h8SXw(r2, options);
    return r1.intersects(r2, options);
};
module.exports = $7d1765143352a3d5$var$intersects;

});

parcelRequire.register("f5pRs", function(module, exports) {
// given a set of versions and a range, create a "simplified" range
// that includes the same versions that the original range does
// If the original range is shorter than the simplified one, return that.

var $lF483 = parcelRequire("lF483");

var $bMOxA = parcelRequire("bMOxA");
module.exports = (versions, range, options)=>{
    const set = [];
    let first = null;
    let prev = null;
    const v = versions.sort((a, b)=>$bMOxA(a, b, options));
    for (const version of v){
        const included = $lF483(version, range, options);
        if (included) {
            prev = version;
            if (!first) first = version;
        } else {
            if (prev) set.push([
                first,
                prev
            ]);
            prev = null;
            first = null;
        }
    }
    if (first) set.push([
        first,
        null
    ]);
    const ranges = [];
    for (const [min, max] of set){
        if (min === max) ranges.push(min);
        else if (!max && min === v[0]) ranges.push("*");
        else if (!max) ranges.push(`>=${min}`);
        else if (min === v[0]) ranges.push(`<=${max}`);
        else ranges.push(`${min} - ${max}`);
    }
    const simplified = ranges.join(" || ");
    const original = typeof range.raw === "string" ? range.raw : String(range);
    return simplified.length < original.length ? simplified : range;
};

});

parcelRequire.register("8frrO", function(module, exports) {

var $h8SXw = parcelRequire("h8SXw");

var $9GqBa = parcelRequire("9GqBa");
const { ANY: $601503f0c62dae94$var$ANY } = $9GqBa;

var $lF483 = parcelRequire("lF483");

var $bMOxA = parcelRequire("bMOxA");
// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
// - Every simple range `r1, r2, ...` is a null set, OR
// - Every simple range `r1, r2, ...` which is not a null set is a subset of
//   some `R1, R2, ...`
//
// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
// - If c is only the ANY comparator
//   - If C is only the ANY comparator, return true
//   - Else if in prerelease mode, return false
//   - else replace c with `[>=0.0.0]`
// - If C is only the ANY comparator
//   - if in prerelease mode, return true
//   - else replace C with `[>=0.0.0]`
// - Let EQ be the set of = comparators in c
// - If EQ is more than one, return true (null set)
// - Let GT be the highest > or >= comparator in c
// - Let LT be the lowest < or <= comparator in c
// - If GT and LT, and GT.semver > LT.semver, return true (null set)
// - If any C is a = range, and GT or LT are set, return false
// - If EQ
//   - If GT, and EQ does not satisfy GT, return true (null set)
//   - If LT, and EQ does not satisfy LT, return true (null set)
//   - If EQ satisfies every C, return true
//   - Else return false
// - If GT
//   - If GT.semver is lower than any > or >= comp in C, return false
//   - If GT is >=, and GT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the GT.semver tuple, return false
// - If LT
//   - If LT.semver is greater than any < or <= comp in C, return false
//   - If LT is <=, and LT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the LT.semver tuple, return false
// - Else return true
const $601503f0c62dae94$var$subset = (sub, dom, options = {})=>{
    if (sub === dom) return true;
    sub = new $h8SXw(sub, options);
    dom = new $h8SXw(dom, options);
    let sawNonNull = false;
    OUTER: for (const simpleSub of sub.set){
        for (const simpleDom of dom.set){
            const isSub = $601503f0c62dae94$var$simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub) continue OUTER;
        }
        // the null set is a subset of everything, but null simple ranges in
        // a complex range should be ignored.  so if we saw a non-null range,
        // then we know this isn't a subset, but if EVERY simple range was null,
        // then it is a subset.
        if (sawNonNull) return false;
    }
    return true;
};
const $601503f0c62dae94$var$minimumVersionWithPreRelease = [
    new $9GqBa(">=0.0.0-0")
];
const $601503f0c62dae94$var$minimumVersion = [
    new $9GqBa(">=0.0.0")
];
const $601503f0c62dae94$var$simpleSubset = (sub, dom, options)=>{
    if (sub === dom) return true;
    if (sub.length === 1 && sub[0].semver === $601503f0c62dae94$var$ANY) {
        if (dom.length === 1 && dom[0].semver === $601503f0c62dae94$var$ANY) return true;
        else if (options.includePrerelease) sub = $601503f0c62dae94$var$minimumVersionWithPreRelease;
        else sub = $601503f0c62dae94$var$minimumVersion;
    }
    if (dom.length === 1 && dom[0].semver === $601503f0c62dae94$var$ANY) {
        if (options.includePrerelease) return true;
        else dom = $601503f0c62dae94$var$minimumVersion;
    }
    const eqSet = new Set();
    let gt, lt;
    for (const c of sub){
        if (c.operator === ">" || c.operator === ">=") gt = $601503f0c62dae94$var$higherGT(gt, c, options);
        else if (c.operator === "<" || c.operator === "<=") lt = $601503f0c62dae94$var$lowerLT(lt, c, options);
        else eqSet.add(c.semver);
    }
    if (eqSet.size > 1) return null;
    let gtltComp;
    if (gt && lt) {
        gtltComp = $bMOxA(gt.semver, lt.semver, options);
        if (gtltComp > 0) return null;
        else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) return null;
    }
    // will iterate one or zero times
    for (const eq of eqSet){
        if (gt && !$lF483(eq, String(gt), options)) return null;
        if (lt && !$lF483(eq, String(lt), options)) return null;
        for (const c of dom){
            if (!$lF483(eq, String(c), options)) return false;
        }
        return true;
    }
    let higher, lower;
    let hasDomLT, hasDomGT;
    // if the subset has a prerelease, we need a comparator in the superset
    // with the same tuple and a prerelease, or it's not a subset
    let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
    let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
    // exception: <1.2.3-0 is the same as <1.2.3
    if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) needDomLTPre = false;
    for (const c of dom){
        hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
        hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
        if (gt) {
            if (needDomGTPre) {
                if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) needDomGTPre = false;
            }
            if (c.operator === ">" || c.operator === ">=") {
                higher = $601503f0c62dae94$var$higherGT(gt, c, options);
                if (higher === c && higher !== gt) return false;
            } else if (gt.operator === ">=" && !$lF483(gt.semver, String(c), options)) return false;
        }
        if (lt) {
            if (needDomLTPre) {
                if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) needDomLTPre = false;
            }
            if (c.operator === "<" || c.operator === "<=") {
                lower = $601503f0c62dae94$var$lowerLT(lt, c, options);
                if (lower === c && lower !== lt) return false;
            } else if (lt.operator === "<=" && !$lF483(lt.semver, String(c), options)) return false;
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0) return false;
    }
    // if there was a < or >, and nothing in the dom, then must be false
    // UNLESS it was limited by another range in the other direction.
    // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
    if (gt && hasDomLT && !lt && gtltComp !== 0) return false;
    if (lt && hasDomGT && !gt && gtltComp !== 0) return false;
    // we needed a prerelease range in a specific tuple, but didn't get one
    // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
    // because it includes prereleases in the 1.2.3 tuple
    if (needDomGTPre || needDomLTPre) return false;
    return true;
};
// >=1.2.3 is lower than >1.2.3
const $601503f0c62dae94$var$higherGT = (a, b, options)=>{
    if (!a) return b;
    const comp = $bMOxA(a.semver, b.semver, options);
    return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
};
// <=1.2.3 is higher than <1.2.3
const $601503f0c62dae94$var$lowerLT = (a, b, options)=>{
    if (!a) return b;
    const comp = $bMOxA(a.semver, b.semver, options);
    return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
};
module.exports = $601503f0c62dae94$var$subset;

});




parcelRequire.register("gtijI", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
function $bfdd902667fbff93$var$segmentSearch(context, contextTargets, userTargets, userTargetSet) {
    if (contextTargets) for(let targetIndex = 0; targetIndex < contextTargets.length; targetIndex += 1){
        const target = contextTargets[targetIndex];
        const key = context.key(target.contextKind);
        if (key) {
            if (target.generated_valuesSet) {
                // Only check generated_valuesSet if present.
                if (target.generated_valuesSet.has(key)) return true;
            } else if (target.values.includes(key)) return true;
        }
    }
    if (userTargetSet) {
        const userKey = context.key("user");
        if (userKey) {
            if (userTargetSet.has(userKey)) return true;
        }
    } else if (userTargets) {
        const userKey = context.key("user");
        if (userKey) {
            if (userTargets.includes(userKey)) return true;
        }
    }
    return false;
}
function $bfdd902667fbff93$var$matchSegmentTargets(segment, context) {
    const included = $bfdd902667fbff93$var$segmentSearch(context, segment.includedContexts, segment.included, segment.generated_includedSet);
    if (included) return true;
    const excluded = $bfdd902667fbff93$var$segmentSearch(context, segment.excludedContexts, segment.excluded, segment.generated_excludedSet);
    if (excluded) // The match was an exclusion, so it should be negated.
    return !excluded;
    return undefined;
}
module.exports.default = $bfdd902667fbff93$var$matchSegmentTargets;

});


parcelRequire.register("492nF", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $34z57 = parcelRequire("34z57");
class $3049d977380968d5$var$ContextDeduplicator {
    constructor(options){
        this.contextKeysCache = new $34z57.default({
            max: options.contextKeysCapacity
        });
        this.flushInterval = options.contextKeysFlushInterval;
    }
    processContext(context) {
        const { canonicalKey: canonicalKey } = context;
        const inCache = this.contextKeysCache.get(canonicalKey);
        this.contextKeysCache.set(canonicalKey, true);
        // If it is in the cache, then we do not want to add an event.
        return !inCache;
    }
    flush() {
        this.contextKeysCache.clear();
    }
}
module.exports.default = $3049d977380968d5$var$ContextDeduplicator;

});

parcelRequire.register("5zw6v", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $k3fB8 = parcelRequire("k3fB8");
function $40e91fcf36671fc5$var$secondsToMillis(sec) {
    return Math.trunc(sec * 1000);
}
/**
 * Maintains information for diagnostic events.
 *
 * @internal
 */ class $40e91fcf36671fc5$var$DiagnosticsManager {
    constructor(sdkKey, config, platform, featureStore){
        this.config = config;
        this.platform = platform;
        this.featureStore = featureStore;
        this.streamInits = [];
        this.startTime = Date.now();
        this.dataSinceDate = this.startTime;
        this.id = {
            diagnosticId: platform.crypto.randomUUID(),
            sdkKeySuffix: sdkKey.length > 6 ? sdkKey.substring(sdkKey.length - 6) : sdkKey
        };
    }
    /**
     * Creates the initial event that is sent by the event processor when the SDK starts up. This will
     * not be repeated during the lifetime of the SDK client.
     */ createInitEvent() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const sdkData = this.platform.info.sdkData();
        const platformData = this.platform.info.platformData();
        return {
            kind: "diagnostic-init",
            id: this.id,
            creationDate: this.startTime,
            sdk: sdkData,
            configuration: {
                customBaseURI: this.config.serviceEndpoints.polling !== $k3fB8.defaultValues.baseUri,
                customStreamURI: this.config.serviceEndpoints.streaming !== $k3fB8.defaultValues.streamUri,
                customEventsURI: this.config.serviceEndpoints.events !== $k3fB8.defaultValues.eventsUri,
                eventsCapacity: this.config.eventsCapacity,
                // Node doesn't distinguish between these two kinds of timeouts. It is unlikely other web
                // based implementations would be able to either.
                connectTimeoutMillis: $40e91fcf36671fc5$var$secondsToMillis(this.config.timeout),
                socketTimeoutMillis: $40e91fcf36671fc5$var$secondsToMillis(this.config.timeout),
                eventsFlushIntervalMillis: $40e91fcf36671fc5$var$secondsToMillis(this.config.flushInterval),
                pollingIntervalMillis: $40e91fcf36671fc5$var$secondsToMillis(this.config.pollInterval),
                reconnectTimeMillis: $40e91fcf36671fc5$var$secondsToMillis(this.config.streamInitialReconnectDelay),
                streamingDisabled: !this.config.stream,
                usingRelayDaemon: this.config.useLdd,
                offline: this.config.offline,
                allAttributesPrivate: this.config.allAttributesPrivate,
                contextKeysCapacity: this.config.contextKeysCapacity,
                contextKeysFlushIntervalMillis: $40e91fcf36671fc5$var$secondsToMillis(this.config.contextKeysFlushInterval),
                usingProxy: !!((_b = (_a = this.platform.requests).usingProxy) === null || _b === void 0 ? void 0 : _b.call(_a)),
                usingProxyAuthenticator: !!((_d = (_c = this.platform.requests).usingProxyAuth) === null || _d === void 0 ? void 0 : _d.call(_c)),
                diagnosticRecordingIntervalMillis: $40e91fcf36671fc5$var$secondsToMillis(this.config.diagnosticRecordingInterval),
                dataStoreType: (_g = (_f = (_e = this.featureStore).getDescription) === null || _f === void 0 ? void 0 : _f.call(_e)) !== null && _g !== void 0 ? _g : "memory"
            },
            platform: Object.assign({
                name: platformData.name,
                osArch: (_h = platformData.os) === null || _h === void 0 ? void 0 : _h.arch,
                osName: (_j = platformData.os) === null || _j === void 0 ? void 0 : _j.name,
                osVersion: (_k = platformData.os) === null || _k === void 0 ? void 0 : _k.version
            }, platformData.additional || {})
        };
    }
    /**
     * Records a stream connection attempt (called by the stream processor).
     *
     * @param timestamp Time of the *beginning* of the connection attempt.
     * @param failed True if the connection failed, or we got a read timeout before receiving a "put".
     * @param durationMillis Elapsed time between starting timestamp and when we either gave up/lost
     * the connection or received a successful "put".
     */ recordStreamInit(timestamp, failed, durationMillis) {
        const item = {
            timestamp: timestamp,
            failed: failed,
            durationMillis: durationMillis
        };
        this.streamInits.push(item);
    }
    /**
     * Creates a periodic event containing time-dependent stats, and resets the state of the manager
     * with regard to those stats.
     *
     * Note: the reason droppedEvents, deduplicatedUsers, and eventsInLastBatch are passed into this
     * function, instead of being properties of the DiagnosticsManager, is that the event processor is
     * the one who's calling this function and is also the one who's tracking those stats.
     */ createStatsEventAndReset(droppedEvents, deduplicatedUsers, eventsInLastBatch) {
        const currentTime = Date.now();
        const evt = {
            kind: "diagnostic",
            id: this.id,
            creationDate: currentTime,
            dataSinceDate: this.dataSinceDate,
            droppedEvents: droppedEvents,
            deduplicatedUsers: deduplicatedUsers,
            eventsInLastBatch: eventsInLastBatch,
            streamInits: this.streamInits
        };
        this.streamInits = [];
        this.dataSinceDate = currentTime;
        return evt;
    }
}
module.exports.default = $40e91fcf36671fc5$var$DiagnosticsManager;

});
parcelRequire.register("k3fB8", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.defaultValues = void 0;

var $74cHE = parcelRequire("74cHE");

var $cP3GU = parcelRequire("cP3GU");
// Once things are internal to the implementation of the SDK we can depend on
// types. Calls to the SDK could contain anything without any regard to typing.
// So, data we take from external sources must be normalized into something
// that can be trusted.
/**
 * These perform cursory validations. Complex objects are implemented with classes
 * and these should allow for conditional construction.
 */ const $e9902fe3d606d136$var$validations = {
    baseUri: $74cHE.TypeValidators.String,
    streamUri: $74cHE.TypeValidators.String,
    eventsUri: $74cHE.TypeValidators.String,
    timeout: $74cHE.TypeValidators.Number,
    capacity: $74cHE.TypeValidators.Number,
    logger: $74cHE.TypeValidators.Object,
    featureStore: $74cHE.TypeValidators.ObjectOrFactory,
    bigSegments: $74cHE.TypeValidators.Object,
    updateProcessor: $74cHE.TypeValidators.ObjectOrFactory,
    flushInterval: $74cHE.TypeValidators.Number,
    pollInterval: $74cHE.TypeValidators.numberWithMin(30),
    proxyOptions: $74cHE.TypeValidators.Object,
    offline: $74cHE.TypeValidators.Boolean,
    stream: $74cHE.TypeValidators.Boolean,
    streamInitialReconnectDelay: $74cHE.TypeValidators.Number,
    useLdd: $74cHE.TypeValidators.Boolean,
    sendEvents: $74cHE.TypeValidators.Boolean,
    allAttributesPrivate: $74cHE.TypeValidators.Boolean,
    privateAttributes: $74cHE.TypeValidators.StringArray,
    contextKeysCapacity: $74cHE.TypeValidators.Number,
    contextKeysFlushInterval: $74cHE.TypeValidators.Number,
    tlsParams: $74cHE.TypeValidators.Object,
    diagnosticOptOut: $74cHE.TypeValidators.Boolean,
    diagnosticRecordingInterval: $74cHE.TypeValidators.numberWithMin(60),
    wrapperName: $74cHE.TypeValidators.String,
    wrapperVersion: $74cHE.TypeValidators.String,
    application: $74cHE.TypeValidators.Object
};
/**
 * @internal
 */ module.exports.defaultValues = {
    baseUri: "https://sdk.launchdarkly.com",
    streamUri: "https://stream.launchdarkly.com",
    eventsUri: "https://events.launchdarkly.com",
    stream: true,
    streamInitialReconnectDelay: 1,
    sendEvents: true,
    timeout: 5,
    capacity: 10000,
    flushInterval: 5,
    pollInterval: 30,
    offline: false,
    useLdd: false,
    allAttributesPrivate: false,
    privateAttributes: [],
    contextKeysCapacity: 1000,
    contextKeysFlushInterval: 300,
    diagnosticOptOut: false,
    diagnosticRecordingInterval: 900,
    featureStore: ()=>new $cP3GU.default()
};
function $e9902fe3d606d136$var$validateTypesAndNames(options) {
    const errors = [];
    const validatedOptions = Object.assign({}, module.exports.defaultValues);
    Object.keys(options).forEach((optionName)=>{
        var _a;
        // We need to tell typescript it doesn't actually know what options are.
        // If we don't then it complains we are doing crazy things with it.
        const optionValue = options[optionName];
        const validator = $e9902fe3d606d136$var$validations[optionName];
        if (validator) {
            if (!validator.is(optionValue)) {
                if (validator.getType() === "boolean") {
                    errors.push($74cHE.OptionMessages.wrongOptionTypeBoolean(optionName, typeof optionValue));
                    validatedOptions[optionName] = !!optionValue;
                } else if (validator instanceof $74cHE.NumberWithMinimum && $74cHE.TypeValidators.Number.is(optionValue)) {
                    const { min: min } = validator;
                    errors.push($74cHE.OptionMessages.optionBelowMinimum(optionName, optionValue, min));
                    validatedOptions[optionName] = min;
                } else {
                    errors.push($74cHE.OptionMessages.wrongOptionType(optionName, validator.getType(), typeof optionValue));
                    validatedOptions[optionName] = module.exports.defaultValues[optionName];
                }
            } else validatedOptions[optionName] = optionValue;
        } else (_a = options.logger) === null || _a === void 0 || _a.warn($74cHE.OptionMessages.unknownOption(optionName));
    });
    return {
        errors: errors,
        validatedOptions: validatedOptions
    };
}
function $e9902fe3d606d136$var$validateEndpoints(options, validatedOptions) {
    var _a, _b, _c;
    const { baseUri: baseUri, streamUri: streamUri, eventsUri: eventsUri } = options;
    const streamingEndpointSpecified = streamUri !== undefined && streamUri !== null;
    const pollingEndpointSpecified = baseUri !== undefined && baseUri !== null;
    const eventEndpointSpecified = eventsUri !== undefined && eventsUri !== null;
    if (streamingEndpointSpecified === pollingEndpointSpecified && streamingEndpointSpecified === eventEndpointSpecified) // Either everything is default, or everything is set.
    return;
    if (!streamingEndpointSpecified && validatedOptions.stream) (_a = validatedOptions.logger) === null || _a === void 0 || _a.warn($74cHE.OptionMessages.partialEndpoint("streamUri"));
    if (!pollingEndpointSpecified) (_b = validatedOptions.logger) === null || _b === void 0 || _b.warn($74cHE.OptionMessages.partialEndpoint("baseUri"));
    if (!eventEndpointSpecified && validatedOptions.sendEvents) (_c = validatedOptions.logger) === null || _c === void 0 || _c.warn($74cHE.OptionMessages.partialEndpoint("eventsUri"));
}
/**
 * Configuration options for the LDClient.
 *
 * @internal
 */ class $e9902fe3d606d136$var$Configuration {
    constructor(options = {}){
        // The default will handle undefined, but not null.
        // Because we can be called from JS we need to be extra defensive.
        // eslint-disable-next-line no-param-reassign
        options = options || {};
        // If there isn't a valid logger from the platform, then logs would go nowhere.
        this.logger = options.logger;
        const { errors: errors, validatedOptions: validatedOptions } = $e9902fe3d606d136$var$validateTypesAndNames(options);
        errors.forEach((error)=>{
            var _a;
            (_a = this.logger) === null || _a === void 0 || _a.warn(error);
        });
        $e9902fe3d606d136$var$validateEndpoints(options, validatedOptions);
        this.serviceEndpoints = new $74cHE.ServiceEndpoints(validatedOptions.streamUri, validatedOptions.baseUri, validatedOptions.eventsUri);
        this.eventsCapacity = validatedOptions.capacity;
        this.timeout = validatedOptions.timeout;
        this.bigSegments = validatedOptions.bigSegments;
        this.flushInterval = validatedOptions.flushInterval;
        this.pollInterval = validatedOptions.pollInterval;
        this.proxyOptions = validatedOptions.proxyOptions;
        this.offline = validatedOptions.offline;
        this.stream = validatedOptions.stream;
        this.streamInitialReconnectDelay = validatedOptions.streamInitialReconnectDelay;
        this.useLdd = validatedOptions.useLdd;
        this.sendEvents = validatedOptions.sendEvents;
        this.allAttributesPrivate = validatedOptions.allAttributesPrivate;
        this.privateAttributes = validatedOptions.privateAttributes;
        this.contextKeysCapacity = validatedOptions.contextKeysCapacity;
        this.contextKeysFlushInterval = validatedOptions.contextKeysFlushInterval;
        this.tlsParams = validatedOptions.tlsParams;
        this.diagnosticOptOut = validatedOptions.diagnosticOptOut;
        this.wrapperName = validatedOptions.wrapperName;
        this.wrapperVersion = validatedOptions.wrapperVersion;
        this.tags = new $74cHE.ApplicationTags(validatedOptions);
        this.diagnosticRecordingInterval = validatedOptions.diagnosticRecordingInterval;
        if ($74cHE.TypeValidators.Function.is(validatedOptions.updateProcessor)) // @ts-ignore
        this.updateProcessorFactory = validatedOptions.updateProcessor;
        else // The processor is already created, just have the method return it.
        // @ts-ignore
        this.updateProcessorFactory = ()=>validatedOptions.updateProcessor;
        if ($74cHE.TypeValidators.Function.is(validatedOptions.featureStore)) // @ts-ignore
        this.featureStoreFactory = validatedOptions.featureStore;
        else // The store is already created, just have the method return it.
        // @ts-ignore
        this.featureStoreFactory = ()=>validatedOptions.featureStore;
    }
}
module.exports.default = $e9902fe3d606d136$var$Configuration;

});
parcelRequire.register("cP3GU", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
class $955d1c72938aa822$var$InMemoryFeatureStore {
    constructor(){
        this.allData = {};
        this.initCalled = false;
    }
    addItem(kind, key, item) {
        let items = this.allData[kind.namespace];
        if (!items) {
            items = {};
            this.allData[kind.namespace] = items;
        }
        if (Object.hasOwnProperty.call(items, key)) {
            const old = items[key];
            if (!old || old.version < item.version) items[key] = item;
        } else items[key] = item;
    }
    get(kind, key, callback) {
        const items = this.allData[kind.namespace];
        if (items) {
            if (Object.prototype.hasOwnProperty.call(items, key)) {
                const item = items[key];
                if (item && !item.deleted) return callback === null || callback === void 0 ? void 0 : callback(item);
            }
        }
        return callback === null || callback === void 0 ? void 0 : callback(null);
    }
    all(kind, callback) {
        var _a;
        const result = {};
        const items = (_a = this.allData[kind.namespace]) !== null && _a !== void 0 ? _a : {};
        Object.entries(items).forEach(([key, item])=>{
            if (item && !item.deleted) result[key] = item;
        });
        callback === null || callback === void 0 || callback(result);
    }
    init(allData, callback) {
        this.initCalled = true;
        this.allData = allData;
        callback === null || callback === void 0 || callback();
    }
    delete(kind, key, version, callback) {
        const deletedItem = {
            version: version,
            deleted: true
        };
        this.addItem(kind, key, deletedItem);
        callback === null || callback === void 0 || callback();
    }
    upsert(kind, data, callback) {
        this.addItem(kind, data.key, data);
        callback === null || callback === void 0 || callback();
    }
    initialized(callback) {
        return callback === null || callback === void 0 ? void 0 : callback(this.initCalled);
    }
    /* eslint-disable class-methods-use-this */ close() {
    // For the memory store this is a no-op.
    }
    getDescription() {
        return "memory";
    }
}
module.exports.default = $955d1c72938aa822$var$InMemoryFeatureStore;

});



parcelRequire.register("bZA90", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $74cHE = parcelRequire("74cHE");

var $fOMAn = parcelRequire("fOMAn");
/**
 * @internal
 */ class $8bb16db88edf47a6$var$EventFactory {
    constructor(withReasons){
        this.withReasons = withReasons;
    }
    evalEvent(flag, context, detail, defaultVal, prereqOfFlag) {
        var _a;
        const addExperimentData = (0, $fOMAn.default)(flag, detail.reason);
        return new $74cHE.internal.InputEvalEvent(this.withReasons, context, flag.key, defaultVal, detail, flag.version, // Exclude null as a possibility.
        (_a = detail.variationIndex) !== null && _a !== void 0 ? _a : undefined, flag.trackEvents || addExperimentData, prereqOfFlag === null || prereqOfFlag === void 0 ? void 0 : prereqOfFlag.key, this.withReasons || addExperimentData ? detail.reason : undefined, flag.debugEventsUntilDate);
    }
    unknownFlagEvent(key, context, detail) {
        return new $74cHE.internal.InputEvalEvent(this.withReasons, context, key, detail.value, detail);
    }
    /* eslint-disable-next-line class-methods-use-this */ identifyEvent(context) {
        return new $74cHE.internal.InputIdentifyEvent(context);
    }
    /* eslint-disable-next-line class-methods-use-this */ customEvent(key, context, data, metricValue) {
        return new $74cHE.internal.InputCustomEvent(context, key, data !== null && data !== void 0 ? data : undefined, metricValue !== null && metricValue !== void 0 ? metricValue : undefined);
    }
}
module.exports.default = $8bb16db88edf47a6$var$EventFactory;

});
parcelRequire.register("fOMAn", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * @internal
 */ function $b84136a5ecc2f1f8$var$isExperiment(flag, reason) {
    if (reason) {
        // If the reason says we're in an experiment, we are. Otherwise, apply
        // the legacy rule exclusion logic.
        if (reason.inExperiment) return true;
        switch(reason.kind){
            case "RULE_MATCH":
                {
                    const index = reason.ruleIndex;
                    if (index !== undefined) {
                        const rules = flag.rules || [];
                        return index >= 0 && index < rules.length && !!rules[index].trackEvents;
                    }
                    break;
                }
            case "FALLTHROUGH":
                return !!flag.trackEventsFallthrough;
            default:
        }
    }
    return false;
}
module.exports.default = $b84136a5ecc2f1f8$var$isExperiment;

});


parcelRequire.register("eiNwf", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $74cHE = parcelRequire("74cHE");

var $9BDek = parcelRequire("9BDek");

var $98WuW = parcelRequire("98WuW");

var $8vEDz = parcelRequire("8vEDz");
class $a699289bece590c2$var$EventSender {
    constructor(config, clientContext){
        this.defaultHeaders = Object.assign({}, (0, $9BDek.default)(clientContext.basicConfiguration.sdkKey, config, clientContext.platform.info));
        this.eventsUri = `${clientContext.basicConfiguration.serviceEndpoints.events}/bulk`;
        this.diagnosticEventsUri = `${clientContext.basicConfiguration.serviceEndpoints.events}/diagnostic`;
        this.requests = clientContext.platform.requests;
        this.crypto = clientContext.platform.crypto;
    }
    async tryPostingEvents(events, uri, payloadId, canRetry) {
        const tryRes = {
            status: $74cHE.subsystem.LDDeliveryStatus.Succeeded
        };
        const headers = Object.assign(Object.assign({}, this.defaultHeaders), {
            "content-type": "application/json"
        });
        if (payloadId) {
            headers["x-launchdarkly-payload-id"] = payloadId;
            headers["x-launchDarkly-event-schema"] = "4";
        }
        let error;
        try {
            const res = await this.requests.fetch(uri, {
                headers: headers,
                body: JSON.stringify(events),
                method: "POST"
            });
            const serverDate = Date.parse(res.headers.get("date") || "");
            if (serverDate) tryRes.serverTime = serverDate;
            if (res.status <= 204) return tryRes;
            error = new $8vEDz.LDUnexpectedResponseError((0, $98WuW.default)({
                status: res.status,
                message: "some events were dropped"
            }, "event posting"));
            if (!(0, $8vEDz.isHttpRecoverable)(res.status)) {
                tryRes.status = $74cHE.subsystem.LDDeliveryStatus.FailedAndMustShutDown;
                tryRes.error = error;
                return tryRes;
            }
        } catch (err) {
            error = err;
        }
        if (error && !canRetry) {
            tryRes.status = $74cHE.subsystem.LDDeliveryStatus.Failed;
            tryRes.error = error;
            return tryRes;
        }
        await new Promise((r)=>{
            setTimeout(r, 1000);
        });
        return this.tryPostingEvents(events, this.eventsUri, payloadId, false);
    }
    async sendEventData(type, data) {
        const payloadId = type === $74cHE.subsystem.LDEventType.AnalyticsEvents ? this.crypto.randomUUID() : undefined;
        const uri = type === $74cHE.subsystem.LDEventType.AnalyticsEvents ? this.eventsUri : this.diagnosticEventsUri;
        return this.tryPostingEvents(data, uri, payloadId, true);
    }
}
module.exports.default = $a699289bece590c2$var$EventSender;

});

parcelRequire.register("jSXv1", function(module, exports) {
"use strict";
// This is an empty implementation, so it doesn't use this, and it has empty methods, and it
// has unused variables.
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * Empty event processor implementation for when events are not desired.
 *
 * @internal
 */ class $e7a136c6bb4f9733$var$NullEventProcessor {
    close() {}
    async flush() {}
    sendEvent(inputEvent) {}
}
module.exports.default = $e7a136c6bb4f9733$var$NullEventProcessor;

});

parcelRequire.register("bVvT9", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
class $8aedc0f90418048a$var$FlagsStateBuilder {
    constructor(valid, withReasons){
        this.valid = valid;
        this.withReasons = withReasons;
        this.flagValues = {};
        this.flagMetadata = {};
    }
    addFlag(flag, value, variation, reason, trackEvents, trackReason, detailsOnlyIfTracked) {
        this.flagValues[flag.key] = value;
        const meta = {};
        if (variation !== undefined) meta.variation = variation;
        const omitDetails = detailsOnlyIfTracked && !trackEvents && !trackReason && flag.debugEventsUntilDate === undefined; // 0 probably doesn't matter.
        if (!omitDetails) meta.version = flag.version;
        if (reason && (trackReason || this.withReasons && !omitDetails)) meta.reason = reason;
        if (trackEvents) meta.trackEvents = true;
        if (trackReason) meta.trackReason = true;
        if (flag.debugEventsUntilDate !== undefined) meta.debugEventsUntilDate = flag.debugEventsUntilDate;
        this.flagMetadata[flag.key] = meta;
    }
    build() {
        const state = this;
        return {
            valid: state.valid,
            allValues: ()=>state.flagValues,
            getFlagValue: (key)=>state.flagValues[key],
            getFlagReason: (key)=>{
                var _a;
                return (_a = state.flagMetadata[key] ? state.flagMetadata[key].reason : null) !== null && _a !== void 0 ? _a : null;
            },
            toJSON: ()=>Object.assign(Object.assign({}, state.flagValues), {
                    $flagsState: state.flagMetadata,
                    $valid: state.valid
                })
        };
    }
}
module.exports.default = $8aedc0f90418048a$var$FlagsStateBuilder;

});

parcelRequire.register("b52vr", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.deserializePoll = module.exports.PersistentDataStoreWrapper = module.exports.AsyncStoreFacade = void 0;

var $CtJ6w = parcelRequire("CtJ6w");
module.exports.AsyncStoreFacade = $CtJ6w.default;

var $eQkuc = parcelRequire("eQkuc");
module.exports.PersistentDataStoreWrapper = $eQkuc.default;

var $2nRBQ = parcelRequire("2nRBQ");
Object.defineProperty(module.exports, "deserializePoll", {
    enumerable: true,
    get: function() {
        return $2nRBQ.deserializePoll;
    }
});

});
parcelRequire.register("CtJ6w", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $hFo3v = parcelRequire("hFo3v");
/**
 * Provides an async interface to a feature store.
 *
 * This allows for using a store using async/await instead of callbacks.
 *
 */ class $073a9bc90da4cb7d$var$AsyncStoreFacade {
    constructor(store){
        this.store = store;
    }
    async get(kind, key) {
        return (0, $hFo3v.default)((cb)=>{
            this.store.get(kind, key, cb);
        });
    }
    async all(kind) {
        return (0, $hFo3v.default)((cb)=>{
            this.store.all(kind, cb);
        });
    }
    async init(allData) {
        return (0, $hFo3v.default)((cb)=>{
            this.store.init(allData, cb);
        });
    }
    async delete(kind, key, version) {
        return (0, $hFo3v.default)((cb)=>{
            this.store.delete(kind, key, version, cb);
        });
    }
    async upsert(kind, data) {
        return (0, $hFo3v.default)((cb)=>{
            this.store.upsert(kind, data, cb);
        });
    }
    async initialized() {
        return (0, $hFo3v.default)((cb)=>{
            this.store.initialized(cb);
        });
    }
    close() {
        this.store.close();
    }
}
module.exports.default = $073a9bc90da4cb7d$var$AsyncStoreFacade;

});
parcelRequire.register("hFo3v", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * A basic wrapper to make async methods with callbacks into promises.
 *
 * @param method
 * @returns A promisified version of the method.
 */ function $cdc8ecf4b228fb17$var$promisify(method) {
    return new Promise((resolve)=>{
        method((val)=>{
            resolve(val);
        });
    });
}
module.exports.default = $cdc8ecf4b228fb17$var$promisify;

});


parcelRequire.register("eQkuc", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $2m3BQ = parcelRequire("2m3BQ");

var $27fya = parcelRequire("27fya");

var $1k8iX = parcelRequire("1k8iX");

var $gpStc = parcelRequire("gpStc");
function $ace5d01dece60de5$var$cacheKey(kind, key) {
    return `${kind.namespace}:${key}`;
}
function $ace5d01dece60de5$var$allForKindCacheKey(kind) {
    return `$all:${kind.namespace}`;
}
// This key will be set in the cache if we have checked that a store was
// initialized and found that it was not. If we do not become initialized
// within the TTL period, then the key will expire, and the next initialization
// check will pass through to the store. Once we are initialized, then the key
// will never be checked again.
const $ace5d01dece60de5$var$initializationCheckedKey = "$checkedInit";
// The interval to check items in the TTL cache to purge expired items.
// Expired items which are not purged, will be reactively purged when they are
// accessed.
const $ace5d01dece60de5$var$defaultCheckInterval = 600;
function $ace5d01dece60de5$var$itemIfNotDeleted(item) {
    return !item || item.item.deleted ? null : item.item;
}
function $ace5d01dece60de5$var$deletedDescriptor(version) {
    return {
        version: version,
        item: {
            version: version,
            deleted: true
        }
    };
}
/**
 * Deserialize a {@link SerializedItemDescriptor}
 * @param kind The persistent store data kind to deserialize.
 * @param descriptor The serialized descriptor we want to deserialize.
 * @returns An item descriptor for the deserialized item.
 */ function $ace5d01dece60de5$var$deserialize(kind, descriptor) {
    if (descriptor.deleted || !descriptor.serializedItem) return $ace5d01dece60de5$var$deletedDescriptor(descriptor.version);
    const deserializedItem = kind.deserialize(descriptor.serializedItem);
    if (deserializedItem === undefined) // This would only happen if the JSON is invalid.
    return $ace5d01dece60de5$var$deletedDescriptor(descriptor.version);
    if (deserializedItem.version === 0 || deserializedItem.version === descriptor.version || deserializedItem.item === undefined) return deserializedItem;
    // There was a mismatch between the version of the serialized descriptor and the deserialized
    // descriptor. So we are going to trust the version of the serialized descriptor.
    return {
        version: descriptor.version,
        item: deserializedItem.item
    };
}
/**
 * Internal implementation of {@link LDFeatureStore} that delegates the basic functionality to an
 * instance of {@link PersistentDataStore}. It provides optional caching behavior and other logic
 * that would otherwise be repeated in every data store implementation. This makes it easier to
 * create new database integrations by implementing only the database-specific logic.
 */ class $ace5d01dece60de5$var$PersistentDataStoreWrapper {
    constructor(core, ttl){
        this.core = core;
        this.isInitialized = false;
        /**
         * Used to preserve order of operations of async requests.
         */ this.queue = new $gpStc.default();
        if (ttl) {
            this.itemCache = new $2m3BQ.default({
                ttl: ttl,
                checkInterval: $ace5d01dece60de5$var$defaultCheckInterval
            });
            this.allItemsCache = new $2m3BQ.default({
                ttl: ttl,
                checkInterval: $ace5d01dece60de5$var$defaultCheckInterval
            });
        }
    }
    init(allData, callback) {
        this.queue.enqueue((cb)=>{
            const afterStoreInit = ()=>{
                this.isInitialized = true;
                if (this.itemCache) {
                    this.itemCache.clear();
                    this.allItemsCache.clear();
                    Object.keys(allData).forEach((kindNamespace)=>{
                        const kind = $27fya.persistentStoreKinds[kindNamespace];
                        const items = allData[kindNamespace];
                        this.allItemsCache.set($ace5d01dece60de5$var$allForKindCacheKey(kind), items);
                        Object.keys(items).forEach((key)=>{
                            const itemForKey = items[key];
                            const itemDescriptor = {
                                version: itemForKey.version,
                                item: itemForKey
                            };
                            this.itemCache.set($ace5d01dece60de5$var$cacheKey(kind, key), itemDescriptor);
                        });
                    });
                }
                cb();
            };
            this.core.init((0, $1k8iX.default)(allData), afterStoreInit);
        }, callback);
    }
    get(kind, key, callback) {
        if (this.itemCache) {
            const item = this.itemCache.get($ace5d01dece60de5$var$cacheKey(kind, key));
            if (item) {
                callback($ace5d01dece60de5$var$itemIfNotDeleted(item));
                return;
            }
        }
        const persistKind = $27fya.persistentStoreKinds[kind.namespace];
        this.core.get(persistKind, key, (descriptor)=>{
            var _a;
            if (descriptor && descriptor.serializedItem) {
                const value = $ace5d01dece60de5$var$deserialize(persistKind, descriptor);
                (_a = this.itemCache) === null || _a === void 0 || _a.set($ace5d01dece60de5$var$cacheKey(kind, key), value);
                callback($ace5d01dece60de5$var$itemIfNotDeleted(value));
                return;
            }
            callback(null);
        });
    }
    initialized(callback) {
        var _a;
        if (this.isInitialized) callback(true);
        else if ((_a = this.itemCache) === null || _a === void 0 ? void 0 : _a.get($ace5d01dece60de5$var$initializationCheckedKey)) callback(false);
        else this.core.initialized((storeInitialized)=>{
            var _a;
            this.isInitialized = storeInitialized;
            if (!this.isInitialized) (_a = this.itemCache) === null || _a === void 0 || _a.set($ace5d01dece60de5$var$initializationCheckedKey, true);
            callback(this.isInitialized);
        });
    }
    all(kind, callback) {
        var _a;
        const items = (_a = this.allItemsCache) === null || _a === void 0 ? void 0 : _a.get($ace5d01dece60de5$var$allForKindCacheKey(kind));
        if (items) {
            callback(items);
            return;
        }
        const persistKind = $27fya.persistentStoreKinds[kind.namespace];
        this.core.getAll(persistKind, (storeItems)=>{
            var _a;
            if (!storeItems) {
                callback({});
                return;
            }
            const filteredItems = {};
            storeItems.forEach(({ key: key, item: item })=>{
                const deserializedItem = $ace5d01dece60de5$var$deserialize(persistKind, item);
                const filteredItem = $ace5d01dece60de5$var$itemIfNotDeleted(deserializedItem);
                if (filteredItem) filteredItems[key] = filteredItem;
            });
            (_a = this.allItemsCache) === null || _a === void 0 || _a.set($ace5d01dece60de5$var$allForKindCacheKey(kind), filteredItems);
            callback(filteredItems);
        });
    }
    upsert(kind, data, callback) {
        this.queue.enqueue((cb)=>{
            // Clear the caches which contain all the values of a specific kind.
            if (this.allItemsCache) this.allItemsCache.clear();
            const persistKind = $27fya.persistentStoreKinds[kind.namespace];
            this.core.upsert(persistKind, data.key, persistKind.serialize(data), (err, updatedDescriptor)=>{
                var _a, _b;
                if (!err && updatedDescriptor) {
                    if (updatedDescriptor.serializedItem) {
                        const value = $ace5d01dece60de5$var$deserialize(persistKind, updatedDescriptor);
                        (_a = this.itemCache) === null || _a === void 0 || _a.set($ace5d01dece60de5$var$cacheKey(kind, data.key), value);
                    } else if (updatedDescriptor.deleted) // Deleted and there was not a serialized representation.
                    (_b = this.itemCache) === null || _b === void 0 || _b.set(data.key, {
                        key: data.key,
                        version: updatedDescriptor.version,
                        deleted: true
                    });
                }
                cb();
            });
        }, callback);
    }
    delete(kind, key, version, callback) {
        this.upsert(kind, {
            key: key,
            version: version,
            deleted: true
        }, callback);
    }
    close() {
        var _a, _b;
        (_a = this.itemCache) === null || _a === void 0 || _a.close();
        (_b = this.allItemsCache) === null || _b === void 0 || _b.close();
        this.core.close();
    }
    getDescription() {
        return this.core.getDescription();
    }
}
module.exports.default = $ace5d01dece60de5$var$PersistentDataStoreWrapper;

});
parcelRequire.register("2m3BQ", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
function $1b706f94d65aa481$var$isStale(record) {
    return Date.now() > record.expiration;
}
/**
 * A basic TTL cache with configurable TTL and check interval.
 *
 * @internal
 */ class $1b706f94d65aa481$var$TtlCache {
    constructor(options){
        this.options = options;
        this.storage = new Map();
        this.checkIntervalHandle = setInterval(()=>{
            this.purgeStale();
        }, options.checkInterval * 1000);
    }
    /**
     * Get a value from the cache.
     * @param key The key to get a value for.
     * @returns The value for the key, or undefined if the key was not added, or
     * if the value has expired.
     */ get(key) {
        const record = this.storage.get(key);
        if (record && $1b706f94d65aa481$var$isStale(record)) {
            this.storage.delete(key);
            return undefined;
        }
        return record === null || record === void 0 ? void 0 : record.value;
    }
    /**
     * Set an item in the cache. It will expire after the TTL specified
     * in the cache configuration.
     * @param key The key for the value.
     * @param value The value to set.
     */ set(key, value) {
        this.storage.set(key, {
            value: value,
            expiration: Date.now() + this.options.ttl * 1000
        });
    }
    /**
     * Delete the item with the specific key. If the item does not exist,
     * then there will be no change to the cache.
     * @param key The key of the value to delete.
     */ delete(key) {
        this.storage.delete(key);
    }
    /**
     * Clear the items that are in the cache.
     */ clear() {
        this.storage.clear();
    }
    /**
     * Indicate that you are no longer going to use the cache. The cache will be
     * cleared and it will stop checking for stale items.
     */ close() {
        this.clear();
        if (this.checkIntervalHandle) {
            clearInterval(this.checkIntervalHandle);
            this.checkIntervalHandle = null;
        }
    }
    purgeStale() {
        this.storage.forEach((record, key)=>{
            if ($1b706f94d65aa481$var$isStale(record)) this.storage.delete(key);
        });
    }
    /**
     * This is for testing.
     * @internal
     */ get size() {
        return this.storage.size;
    }
}
module.exports.default = $1b706f94d65aa481$var$TtlCache;

});

parcelRequire.register("27fya", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.persistentStoreKinds = void 0;

var $2nRBQ = parcelRequire("2nRBQ");

var $h1AVT = parcelRequire("h1AVT");
/**
 * Map namespace to a persistent store kind.
 */ module.exports.persistentStoreKinds = {
    segments: {
        namespace: $h1AVT.default.Segments.namespace,
        deserialize: (data)=>{
            const segment = (0, $2nRBQ.deserializeSegment)(data);
            if (segment) return {
                version: segment.version,
                item: segment
            };
            return undefined;
        },
        serialize: (data)=>{
            const serializedItem = (0, $2nRBQ.serializeSegment)(data);
            return {
                version: data.version,
                deleted: data.deleted,
                serializedItem: serializedItem
            };
        },
        priority: 0
    },
    features: {
        namespace: $h1AVT.default.Features.namespace,
        deserialize: (data)=>{
            const flag = (0, $2nRBQ.deserializeFlag)(data);
            if (flag) return {
                version: flag.version,
                item: flag
            };
            return undefined;
        },
        serialize: (data)=>{
            const serializedItem = (0, $2nRBQ.serializeFlag)(data);
            return {
                version: data.version,
                deleted: data.deleted,
                serializedItem: serializedItem
            };
        },
        priority: 1
    }
};

});

parcelRequire.register("1k8iX", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $27fya = parcelRequire("27fya");
function $0f6e19d89f5b3345$var$getDependencyKeys(flag) {
    if (!flag.prerequisites || !flag.prerequisites.length) return [];
    return flag.prerequisites.map((preReq)=>preReq.key);
}
/**
 * Do a topological sort using a depth-first search.
 * https://en.wikipedia.org/wiki/Topological_sorting
 */ function $0f6e19d89f5b3345$var$topologicalSort(kind, itemsMap) {
    const sortedItems = [];
    const unvisitedItems = new Set(Object.keys(itemsMap));
    const visit = (key)=>{
        if (!unvisitedItems.has(key)) return;
        // Typically in a depth-first search this would be done later, and there
        // would be a temporary mark to detect that this was not an directed acylic graph.
        // Removing it here will mean we cannot do that detection, but we also will
        // not infinitely recurse.
        unvisitedItems.delete(key);
        const item = itemsMap[key];
        if (kind.namespace === "features") $0f6e19d89f5b3345$var$getDependencyKeys(item).forEach((prereqKey)=>{
            visit(prereqKey);
        });
        sortedItems.push({
            key: key,
            item: kind.serialize(item)
        });
    };
    while(unvisitedItems.size > 0){
        // Visit the next item, the order we visit doesn't matter.
        const key = unvisitedItems.values().next().value;
        visit(key);
    }
    return sortedItems;
}
/**
 * For non-atomic stores we want to insert items in an order that no items exist
 * in the store before their dependencies. Segments before flags, because flags
 * are dependent on segments. For flags we want to insert them such that no flags are
 * added before the prerequisites of those flags.
 *
 * Segments can also depend on other segments, but a segment will not be accessed
 * if there are no flags.
 */ function $0f6e19d89f5b3345$var$sortDataSet(dataMap) {
    // We use a different type for collecting the results so that we have access
    // to the serialization methods and priorities.
    const result = [];
    Object.keys(dataMap).forEach((kindNamespace)=>{
        const kind = $27fya.persistentStoreKinds[kindNamespace];
        result.push({
            key: kind,
            item: $0f6e19d89f5b3345$var$topologicalSort(kind, dataMap[kindNamespace])
        });
    });
    result.sort((i1, i2)=>i1.key.priority - i2.key.priority);
    return result;
}
module.exports.default = $0f6e19d89f5b3345$var$sortDataSet;

});

parcelRequire.register("gpStc", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
class $bf393bc2998577f2$var$UpdateQueue {
    constructor(){
        this.queue = [];
    }
    enqueue(updateFn, cb) {
        this.queue.push([
            updateFn,
            cb
        ]);
        if (this.queue.length === 1) // If this is the only item in the queue, then there is not a series
        // of updates already in progress. So we can start executing those updates.
        this.executePendingUpdates();
    }
    executePendingUpdates() {
        if (this.queue.length > 0) {
            const [fn, cb] = this.queue[0];
            const newCb = ()=>{
                // We just completed work, so remove it from the queue.
                // Don't remove it before the work is done, because then the
                // count could hit 0, and overlapping execution chains could be started.
                this.queue.shift();
                // There is more work to do, so schedule an update.
                if (this.queue.length > 0) setTimeout(()=>this.executePendingUpdates(), 0);
                // Call the original callback.
                cb === null || cb === void 0 || cb();
            };
            fn(newCb);
        }
    }
}
module.exports.default = $bf393bc2998577f2$var$UpdateQueue;

});




parcelRequire.register("c5IsF", function(module, exports) {
"use strict";
var $8cd870c548df3d37$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $8cd870c548df3d37$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) $8cd870c548df3d37$var$__createBinding(exports1, m, p);
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.FileDataSourceFactory = void 0;

var $l8muA = parcelRequire("l8muA");
module.exports.FileDataSourceFactory = $l8muA.default;

$8cd870c548df3d37$var$__exportStar((parcelRequire("1tKGr")), module.exports);

});
parcelRequire.register("l8muA", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $hL0JF = parcelRequire("hL0JF");
/**
 * Class for creating file data sources.
 */ class $f62bcad7d1c5c149$var$FileDataSourceFactory {
    constructor(options){
        this.options = options;
    }
    /**
     * Method for creating instances of the file data source. This method is intended to be used
     * by the SDK.
     *
     * @param config SDK configuration required by the file data source.
     * @param filesystem Platform abstraction used for filesystem access.
     * @returns a {@link FileDataSource}
     *
     * @internal
     */ create(ldClientContext, featureStore) {
        const updatedOptions = {
            paths: this.options.paths,
            autoUpdate: this.options.autoUpdate,
            logger: this.options.logger || ldClientContext.basicConfiguration.logger,
            yamlParser: this.options.yamlParser
        };
        return new $hL0JF.default(updatedOptions, ldClientContext.platform.fileSystem, featureStore);
    }
    getFactory() {
        return (ldClientContext, featureStore)=>this.create(ldClientContext, featureStore);
    }
}
module.exports.default = $f62bcad7d1c5c149$var$FileDataSourceFactory;

});
parcelRequire.register("hL0JF", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $2nRBQ = parcelRequire("2nRBQ");

var $h1AVT = parcelRequire("h1AVT");

var $l8w5m = parcelRequire("l8w5m");
function $ced7658071ee3f42$var$makeFlagWithValue(key, value) {
    return {
        key: key,
        on: true,
        fallthrough: {
            variation: 0
        },
        variations: [
            value
        ],
        version: 1
    };
}
class $ced7658071ee3f42$var$FileDataSource {
    /**
     * This is internal because we want instances to only be created with the
     * factory.
     * @internal
     */ constructor(options, filesystem, featureStore){
        var _a;
        this.featureStore = featureStore;
        this.allData = {};
        this.fileLoader = new $l8w5m.default(filesystem, options.paths, (_a = options.autoUpdate) !== null && _a !== void 0 ? _a : false, (results)=>{
            var _a, _b;
            // Whenever changes are detected we re-process all of the data.
            // The FileLoader will have handled debouncing for us.
            try {
                this.processFileData(results);
            } catch (err) {
                // If this was during start, then the initCallback will be present.
                (_a = this.initCallback) === null || _a === void 0 || _a.call(this, err);
                (_b = this.logger) === null || _b === void 0 || _b.error(`Error processing files: ${err}`);
            }
        });
        this.logger = options.logger;
        this.yamlParser = options.yamlParser;
    }
    start(fn) {
        this.initCallback = fn;
        // Use an immediately invoked function expression to allow handling of the
        // async loading without making start async itself.
        (async ()=>{
            try {
                await this.fileLoader.loadAndWatch();
            } catch (err) {
                // There was an issue loading/watching the files.
                // Report back to the caller.
                fn === null || fn === void 0 || fn(err);
            }
        })();
    }
    stop() {
        this.fileLoader.close();
    }
    close() {
        this.stop();
    }
    addItem(kind, item) {
        if (!this.allData[kind.namespace]) this.allData[kind.namespace] = {};
        if (this.allData[kind.namespace][item.key]) throw new Error(`found duplicate key: "${item.key}"`);
        else this.allData[kind.namespace][item.key] = item;
    }
    processFileData(fileData) {
        // Clear any existing data before re-populating it.
        this.allData = {};
        // We let the parsers throw, and the caller can handle the rejection.
        fileData.forEach((fd)=>{
            let parsed;
            if (fd.path.endsWith(".yml") || fd.path.endsWith(".yaml")) {
                if (this.yamlParser) parsed = this.yamlParser(fd.data);
                else throw new Error(`Attempted to parse yaml file (${fd.path}) without parser.`);
            } else parsed = JSON.parse(fd.data);
            this.processParsedData(parsed);
        });
        this.featureStore.init(this.allData, ()=>{
            var _a;
            // Call the init callback if present.
            // Then clear the callback so we cannot call it again.
            (_a = this.initCallback) === null || _a === void 0 || _a.call(this);
            this.initCallback = undefined;
        });
    }
    processParsedData(parsed) {
        Object.keys(parsed.flags || {}).forEach((key)=>{
            (0, $2nRBQ.processFlag)(parsed.flags[key]);
            this.addItem($h1AVT.default.Features, parsed.flags[key]);
        });
        Object.keys(parsed.flagValues || {}).forEach((key)=>{
            const flag = $ced7658071ee3f42$var$makeFlagWithValue(key, parsed.flagValues[key]);
            (0, $2nRBQ.processFlag)(flag);
            this.addItem($h1AVT.default.Features, flag);
        });
        Object.keys(parsed.segments || {}).forEach((key)=>{
            (0, $2nRBQ.processSegment)(parsed.segments[key]);
            this.addItem($h1AVT.default.Segments, parsed.segments[key]);
        });
    }
}
module.exports.default = $ced7658071ee3f42$var$FileDataSource;

});
parcelRequire.register("l8w5m", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
/**
 * A debounced file load/watcher for use with the {@link FileDataSource}.
 *
 * The file loader will load all files specified and keep the string representations in memory.
 * Whenever a change is made to any of the files, then that file will be reloaded and the in
 * memory version updated.
 *
 * Updates to many files, which occur within 10ms of each other, will be coalesced into
 * a single callback.
 *
 * @internal
 */ class $f6333bcf4f07f1f6$var$FileLoader {
    constructor(filesystem, paths, watch, callback){
        this.filesystem = filesystem;
        this.paths = paths;
        this.watch = watch;
        this.callback = callback;
        this.watchers = [];
        this.fileData = {};
        this.fileTimestamps = {};
    }
    /**
     * Load all the files and start watching them if watching is enabled.
     */ async loadAndWatch() {
        const promises = this.paths.map(async (path)=>{
            const data = await this.filesystem.readFile(path);
            const timeStamp = await this.filesystem.getFileTimestamp(path);
            return {
                data: data,
                path: path,
                timeStamp: timeStamp
            };
        });
        // This promise could be rejected, let the caller handle it.
        const results = await Promise.all(promises);
        results.forEach((res)=>{
            this.fileData[res.path] = res.data;
            this.fileTimestamps[res.path] = res.timeStamp;
        });
        this.callback(results);
        // If we are watching, then setup watchers and notify of any changes.
        if (this.watch) this.paths.forEach((path)=>{
            const watcher = this.filesystem.watch(path, async (_, updatePath)=>{
                const timeStamp = await this.filesystem.getFileTimestamp(updatePath);
                // The modification time is the same, so we are going to ignore this update.
                // In some implementations watch might be triggered multiple times for a single update.
                if (timeStamp === this.fileTimestamps[updatePath]) return;
                this.fileTimestamps[updatePath] = timeStamp;
                const data = await this.filesystem.readFile(updatePath);
                this.fileData[updatePath] = data;
                this.debounceCallback();
            });
            this.watchers.push(watcher);
        });
    }
    close() {
        this.watchers.forEach((watcher)=>watcher.close());
    }
    debounceCallback() {
        // If there is a handle, then we have already started the debounce process.
        if (!this.debounceHandle) this.debounceHandle = setTimeout(()=>{
            this.debounceHandle = undefined;
            this.callback(Object.entries(this.fileData).reduce((acc, [path, data])=>{
                acc.push({
                    path: path,
                    data: data
                });
                return acc;
            }, []));
        }, 10);
    }
}
module.exports.default = $f6333bcf4f07f1f6$var$FileLoader;

});



parcelRequire.register("1tKGr", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.TestDataRuleBuilder = module.exports.TestDataFlagBuilder = module.exports.TestData = void 0;

var $8jb7I = parcelRequire("8jb7I");
module.exports.TestData = $8jb7I.default;

var $jPfgl = parcelRequire("jPfgl");
module.exports.TestDataFlagBuilder = $jPfgl.default;

var $iTWFK = parcelRequire("iTWFK");
module.exports.TestDataRuleBuilder = $iTWFK.default;

});
parcelRequire.register("8jb7I", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $CtJ6w = parcelRequire("CtJ6w");

var $2nRBQ = parcelRequire("2nRBQ");

var $h1AVT = parcelRequire("h1AVT");

var $jPfgl = parcelRequire("jPfgl");

var $hfORm = parcelRequire("hfORm");
/**
 * A mechanism for providing dynamically updatable feature flag state in a simplified form to an SDK
 * client in test scenarios.
 *
 * Unlike `FileData`, this mechanism does not use any external resources. It provides only the
 * data that the application has put into it using the {@link TestData.update} method.
 *
 * ```
 *     // Import TestData from the integrations package of the SDK you are using.
 *     // This is a common implementation and may be used in multiple SDKs.
 *
 *     const td = TestData();
 *     testData.update(td.flag("flag-key-1").booleanFlag().variationForAll(true));
 *     // Use the initialization mechanism specified by your SDK.
 *     const client = LDClient.init(sdkKey, { updateProcessor: td.getFactory() });
 *
 *     // flags can be updated at any time:
 *     td.update(td.flag("flag-key-2")
 *         .variationForContext("user", "some-user-key", true)
 *         .fallthroughVariation(false));
 * ```
 *
 * The above example uses a simple boolean flag, but more complex configurations are possible using
 * the methods of the {@link TestDataFlagBuilder} that is returned by {@link TestData.flag}.
 * {@link TestDataFlagBuilder} supports many of the ways a flag can be configured on the
 * LaunchDarkly dashboard, but does not currently support
 *  1. rule operators other than "in" and "not in", or
 *  2. percentage rollouts.
 *
 * If the same `TestData` instance is used to configure multiple `LDClient` instances,
 * any changes made to the data will propagate to all of the `LDClient`s.
 */ class $60c8b9f02d8bbc4e$var$TestData {
    constructor(){
        this.currentFlags = {};
        this.currentSegments = {};
        this.dataSources = [];
        this.flagBuilders = {};
    }
    /**
     * Get a factory for update processors that will be attached to this TestData instance.
     * @returns An update processor factory.
     */ getFactory() {
        // Provides an arrow function to prevent needed to bind the method to
        // maintain `this`.
        return (/* eslint-disable-next-line @typescript-eslint/no-unused-vars */ clientContext, featureStore)=>{
            const newSource = new $hfORm.default(new $CtJ6w.default(featureStore), this.currentFlags, this.currentSegments, (tds)=>{
                this.dataSources.splice(this.dataSources.indexOf(tds));
            });
            this.dataSources.push(newSource);
            return newSource;
        };
    }
    /**
     * Creates or copies a {@link TestDataFlagBuilder} for building a test flag configuration.
     *
     * If the flag key has already been defined in this `TestData` instance,
     * then the builder starts with the same configuration that was last
     * provided for this flag.
     *
     * Otherwise, it starts with a new default configuration in which the flag
     * has `true` and `false` variations, is `true` for all users when targeting
     * is turned on and `false` otherwise, and currently has targeting turned on.
     * You can change any of those properties and provide more complex behavior
     * using the `TestDataFlagBuilder` methods.
     *
     * Once you have set the desired configuration, pass the builder to
     * {@link TestData.update}.
     *
     * @param key the flag key
     * @returns a flag configuration builder
     *
     */ flag(key) {
        if (this.flagBuilders[key]) return this.flagBuilders[key].clone();
        return new $jPfgl.default(key).booleanFlag();
    }
    /**
     * Updates the test data with the specified flag configuration.
     *
     * This has the same effect as if a flag were added or modified in the
     * LaunchDarkly dashboard. It immediately propagates the flag changes to
     * any `LDClient` instance(s) that you have already configured to use
     * this `TestData`. If no `LDClient` has been started yet, it simply adds
     * this flag to the test data which will be provided to any `LDClient`
     * that you subsequently configure.
     *
     * Any subsequent changes to this `TestDataFlagBuilder` instance do not affect
     * the test data unless you call `update` again.
     *
     * @param flagBuilder a flag configuration builder
     * @return a promise that will resolve when the feature stores are updated
     */ update(flagBuilder) {
        const flagKey = flagBuilder.getKey();
        const oldItem = this.currentFlags[flagKey];
        const oldVersion = oldItem ? oldItem.version : 0;
        const newFlag = flagBuilder.build(oldVersion + 1);
        this.currentFlags[flagKey] = newFlag;
        this.flagBuilders[flagKey] = flagBuilder.clone();
        return Promise.all(this.dataSources.map((impl)=>impl.upsert($h1AVT.default.Features, newFlag)));
    }
    /**
     * Copies a full feature flag data model object into the test data.
     *
     * It immediately propagates the flag change to any `LDClient` instance(s) that you have already
     * configured to use this `TestData`. If no `LDClient` has been started yet, it simply adds this
     * flag to the test data which will be provided to any LDClient that you subsequently configure.
     *
     * Use this method if you need to use advanced flag configuration properties that are not
     * supported by the simplified {@link TestDataFlagBuilder} API. Otherwise it is recommended to use
     * the regular {@link flag}/{@link update} mechanism to avoid dependencies on details of the data
     * model.
     *
     * You cannot make incremental changes with {@link flag}/{@link update} to a flag that has been
     * added in this way; you can only replace it with an entirely new flag configuration.
     *
     * @param flagConfig the flag configuration as a JSON object
     * @return a promise that will resolve when the feature stores are updated
     */ usePreconfiguredFlag(inConfig) {
        // We need to do things like process attribute reference, and
        // we do not want to modify the passed in value.
        const flagConfig = JSON.parse(JSON.stringify(inConfig));
        const oldItem = this.currentFlags[flagConfig.key];
        const newItem = Object.assign(Object.assign({}, flagConfig), {
            version: oldItem ? oldItem.version + 1 : flagConfig.version
        });
        (0, $2nRBQ.processFlag)(newItem);
        this.currentFlags[flagConfig.key] = newItem;
        return Promise.all(this.dataSources.map((impl)=>impl.upsert($h1AVT.default.Features, newItem)));
    }
    /**
     * Copies a full segment data model object into the test data.
     *
     * It immediately propagates the change to any `LDClient` instance(s) that you have already
     * configured to use this `TestData`. If no `LDClient` has been started yet, it simply adds
     * this segment to the test data which will be provided to any LDClient that you subsequently
     * configure.
     *
     * This method is currently the only way to inject segment data, since there is no builder
     * API for segments. It is mainly intended for the SDK's own tests of segment functionality,
     * since application tests that need to produce a desired evaluation state could do so more easily
     * by just setting flag values.
     *
     * @param segmentConfig the segment configuration as a JSON object
     * @return a promise that will resolve when the feature stores are updated
     */ usePreconfiguredSegment(inConfig) {
        const segmentConfig = JSON.parse(JSON.stringify(inConfig));
        const oldItem = this.currentSegments[segmentConfig.key];
        const newItem = Object.assign(Object.assign({}, segmentConfig), {
            version: oldItem ? oldItem.version + 1 : segmentConfig.version
        });
        (0, $2nRBQ.processSegment)(newItem);
        this.currentSegments[segmentConfig.key] = newItem;
        return Promise.all(this.dataSources.map((impl)=>impl.upsert($h1AVT.default.Segments, newItem)));
    }
}
module.exports.default = $60c8b9f02d8bbc4e$var$TestData;

});
parcelRequire.register("jPfgl", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $74cHE = parcelRequire("74cHE");

var $4BEyz = parcelRequire("4BEyz");

var $iTWFK = parcelRequire("iTWFK");
/**
 * A builder for feature flag configurations to be used with {@link TestData}.
 */ class $e6ee9e8eb422c086$var$TestDataFlagBuilder {
    /**
     * @internal
     */ constructor(key, data){
        this.key = key;
        this.data = {
            on: true,
            variations: []
        };
        if (data) {
            // Not the fastest way to deep copy, but this is a testing mechanism.
            this.data = {
                on: data.on,
                variations: [
                    ...data.variations
                ]
            };
            if (data.offVariation !== undefined) this.data.offVariation = data.offVariation;
            if (data.fallthroughVariation !== undefined) this.data.fallthroughVariation = data.fallthroughVariation;
            if (data.targetsByVariation) this.data.targetsByVariation = JSON.parse(JSON.stringify(data.targetsByVariation));
            if (data.rules) {
                this.data.rules = [];
                data.rules.forEach((rule)=>{
                    var _a;
                    (_a = this.data.rules) === null || _a === void 0 || _a.push(rule.clone());
                });
            }
        }
    }
    get isBooleanFlag() {
        return this.data.variations.length === 2 && this.data.variations[$4BEyz.TRUE_VARIATION_INDEX] === true && this.data.variations[$4BEyz.FALSE_VARIATION_INDEX] === false;
    }
    /**
     * A shortcut for setting the flag to use the standard boolean configuration.
     *
     * This is the default for all new flags created with {@link TestData.flag}. The
     * flag will have two variations, `true` and `false` (in that order). It
     * will return `false` whenever targeting is off and `true` when targeting
     * is on unless other settings specify otherwise.
     *
     * @return the flag builder
     */ booleanFlag() {
        if (this.isBooleanFlag) return this;
        // Change this flag into a boolean flag.
        return this.variations(true, false).fallthroughVariation($4BEyz.TRUE_VARIATION_INDEX).offVariation($4BEyz.FALSE_VARIATION_INDEX);
    }
    /**
     * Sets the allowable variation values for the flag.
     *
     * The values may be of any JSON-compatible type: boolean, number, string, array,
     * or object. For instance, a boolean flag normally has `variations(true, false)`;
     * a string-valued flag might have `variations("red", "green")`; etc.
     *
     * @param values any number of variation values
     * @return the flag builder
     */ variations(...values) {
        this.data.variations = [
            ...values
        ];
        return this;
    }
    /**
     * Sets targeting to be on or off for this flag.
     *
     * The effect of this depends on the rest of the flag configuration, just
     * as it does on the real LaunchDarkly dashboard. In the default configuration
     * that you get from calling {@link TestData.flag} with a new flag key, the flag
     * will return `false` whenever targeting is off and `true` when targeting
     * is on.
     *
     * @param targetingOn true if targeting should be on
     * @return the flag builder
     */ on(targetingOn) {
        this.data.on = targetingOn;
        return this;
    }
    /**
     * Specifies the fallthrough variation for a flag. The fallthrough is
     * the value that is returned if targeting is on and the user was not
     * matched by a more specific target or rule.
     *
     * If a boolean is supplied, and the flag was previously configured with
     * other variations, this also changes it to a boolean flag.
     *
     * @param variation
     *    either `true` or `false` or the index of the desired fallthrough
     *    variation: 0 for the first, 1 for the second, etc.
     * @return the flag builder
     */ fallthroughVariation(variation) {
        if ($74cHE.TypeValidators.Boolean.is(variation)) return this.booleanFlag().fallthroughVariation((0, $4BEyz.variationForBoolean)(variation));
        this.data.fallthroughVariation = variation;
        return this;
    }
    /**
     * Specifies the off variation for a flag. This is the variation that is
     * returned whenever targeting is off.
     *
     * If a boolean is supplied, and the flag was previously configured with
     * other variations, this also changes it to a boolean flag.
     *
     * @param variation
     *    either `true` or `false` or the index of the desired off
     *    variation: 0 for the first, 1 for the second, etc.
     * @return the flag builder
     */ offVariation(variation) {
        if ($74cHE.TypeValidators.Boolean.is(variation)) return this.booleanFlag().offVariation((0, $4BEyz.variationForBoolean)(variation));
        this.data.offVariation = variation;
        return this;
    }
    /**
     * Sets the flag to always return the specified variation for all contexts.
     *
     * Targeting is switched on, any existing targets or rules are removed,
     * and the fallthrough variation is set to the specified value. The off
     * variation is left unchanged.
     *
     * If a boolean is supplied, and the flag was previously configured with
     * other variations, this also changes it to a boolean flag.
     *
     * @param varation
     *    either `true` or `false` or the index of the desired variation:
     *    0 for the first, 1 for the second, etc.
     * @return the flag builder
     */ variationForAll(variation) {
        return this.on(true).clearRules().clearAllTargets().fallthroughVariation(variation);
    }
    /**
     * Sets the flag to always return the specified variation value for all contexts.
     *
     * The value may be of any valid JSON type. This method changes the flag to have
     * only a single variation, which is this value, and to return the same variation
     * regardless of whether targeting is on or off. Any existing targets or rules
     * are removed.
     *
     * @param value The desired value to be returned for all contexts.
     * @return the flag builder
     */ valueForAll(value) {
        return this.variations(value).variationForAll(0);
    }
    /**
     * Sets the flag to return the specified variation for a specific context key
     * when targeting is on. The context kind for contexts created with this method
     * will be 'user'.
     *
     * This has no effect when targeting is turned off for the flag.
     *
     * If the variation is a boolean value and the flag was not already a boolean
     * flag, this also changes it to be a boolean flag.
     *
     * If the variation is an integer, it specifies a variation out of whatever
     * variation values have already been defined.
     *
     * @param contextKey a context key
     * @param variation
     *    either `true` or `false` or the index of the desired variation:
     *    0 for the first, 1 for the second, etc.
     * @return the flag builder
     */ variationForUser(contextKey, variation) {
        return this.variationForContext("user", contextKey, variation);
    }
    /**
     * Sets the flag to return the specified variation for a specific context key
     * when targeting is on.
     *
     * This has no effect when targeting is turned off for the flag.
     *
     * If the variation is a boolean value and the flag was not already a boolean
     * flag, this also changes it to be a boolean flag.
     *
     * If the variation is an integer, it specifies a variation out of whatever
     * variation values have already been defined.
     *
     * @param contextKind a context kind
     * @param contextKey a context key
     * @param variation
     *    either `true` or `false` or the index of the desired variation:
     *    0 for the first, 1 for the second, etc.
     * @return the flag builder
     */ variationForContext(contextKind, contextKey, variation) {
        if ($74cHE.TypeValidators.Boolean.is(variation)) return this.booleanFlag().variationForContext(contextKind, contextKey, (0, $4BEyz.variationForBoolean)(variation));
        if (!this.data.targetsByVariation) this.data.targetsByVariation = {};
        this.data.variations.forEach((_, i)=>{
            if (i === variation) {
                // If there is nothing set at the current variation then set it to the empty array
                const targetsForVariation = this.data.targetsByVariation[i] || {};
                if (!(contextKind in targetsForVariation)) targetsForVariation[contextKind] = [];
                const exists = targetsForVariation[contextKind].indexOf(contextKey) !== -1;
                // Add context to current variation set if they aren't already there
                if (!exists) targetsForVariation[contextKind].push(contextKey);
                this.data.targetsByVariation[i] = targetsForVariation;
            } else {
                // remove user from other variation set if necessary
                const targetsForVariation = this.data.targetsByVariation[i];
                if (targetsForVariation) {
                    const targetsForContextKind = targetsForVariation[contextKind];
                    if (targetsForContextKind) {
                        const targetIndex = targetsForContextKind.indexOf(contextKey);
                        if (targetIndex !== -1) {
                            targetsForContextKind.splice(targetIndex, 1);
                            if (!targetsForContextKind.length) delete targetsForVariation[contextKind];
                        }
                    }
                    if (!Object.keys(targetsForVariation).length) delete this.data.targetsByVariation[i];
                }
            }
        });
        return this;
    }
    /**
     * Removes any existing rules from the flag. This undoes the effect of methods
     * like {@link  ifMatch}.
     *
     * @return the same flag builder
     */ clearRules() {
        delete this.data.rules;
        return this;
    }
    /**
     * Removes any existing targets from the flag. This undoes the effect of
     * methods like {@link variationForContext}.
     *
     * @return the same flag builder
     */ clearAllTargets() {
        delete this.data.targetsByVariation;
        return this;
    }
    /**
     * Starts defining a flag rule using the "is one of" operator.
     *
     * For example, this creates a rule that returnes `true` if the name is
     * "Patsy" or "Edina":
     *
     *     testData.flag('flag')
     *             .ifMatch('user', name', 'Patsy', 'Edina')
     *             .thenReturn(true)
     *
     * @param contextKind the kind of the context
     * @param attribute the context attribute to match against
     * @param values values to compare to
     * @return
     *    a flag rule builder; call `thenReturn` to finish the rule
     *    or add more tests with another method like `andMatch`
     */ ifMatch(contextKind, attribute, ...values) {
        const flagRuleBuilder = new $iTWFK.default(this);
        return flagRuleBuilder.andMatch(contextKind, attribute, ...values);
    }
    /**
     * Starts defining a flag rule using the "is not one of" operator.
     *
     * For example, this creates a rule that returns `true` if the name is
     * neither "Saffron" nor "Bubble":
     *
     *     testData.flag('flag')
     *             .ifNotMatch('user', 'name', 'Saffron', 'Bubble')
     *             .thenReturn(true)
     *
     * @param contextKind the kind of the context
     * @param attribute the user attribute to match against
     * @param values values to compare to
     * @return
     *    a flag rule builder; call `thenReturn` to finish the rule
     *    or add more tests with another method like `andNotMatch`
     */ ifNotMatch(contextKind, attribute, ...values) {
        const flagRuleBuilder = new $iTWFK.default(this);
        return flagRuleBuilder.andNotMatch(contextKind, attribute, ...values);
    }
    /**
     * @internal
     */ addRule(flagRuleBuilder) {
        if (!this.data.rules) this.data.rules = [];
        this.data.rules.push(flagRuleBuilder);
    }
    /**
     * @internal
     */ build(version) {
        const baseFlagObject = {
            key: this.key,
            version: version,
            on: this.data.on,
            offVariation: this.data.offVariation,
            fallthrough: {
                variation: this.data.fallthroughVariation
            },
            variations: [
                ...this.data.variations
            ]
        };
        if (this.data.targetsByVariation) {
            const contextTargets = [];
            const userTargets = [];
            Object.entries(this.data.targetsByVariation).forEach(([variation, contextTargetsForVariation])=>{
                Object.entries(contextTargetsForVariation).forEach(([contextKind, values])=>{
                    const numberVariation = parseInt(variation, 10);
                    contextTargets.push({
                        contextKind: contextKind,
                        values: contextKind === "user" ? [] : values,
                        // Iterating the object it will be a string.
                        variation: numberVariation
                    });
                    if (contextKind === "user") userTargets.push({
                        values: values,
                        variation: numberVariation
                    });
                });
            });
            baseFlagObject.targets = userTargets;
            baseFlagObject.contextTargets = contextTargets;
        }
        if (this.data.rules) baseFlagObject.rules = this.data.rules.map((rule, i)=>rule.build(String(i)));
        return baseFlagObject;
    }
    /**
     * @internal
     */ clone() {
        return new $e6ee9e8eb422c086$var$TestDataFlagBuilder(this.key, this.data);
    }
    /**
     * @internal
     */ getKey() {
        return this.key;
    }
}
module.exports.default = $e6ee9e8eb422c086$var$TestDataFlagBuilder;

});
parcelRequire.register("4BEyz", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.variationForBoolean = module.exports.FALSE_VARIATION_INDEX = module.exports.TRUE_VARIATION_INDEX = void 0;
module.exports.TRUE_VARIATION_INDEX = 0;
module.exports.FALSE_VARIATION_INDEX = 1;
/**
 * @internal
 */ function $35aa13d65a9ac5aa$var$variationForBoolean(val) {
    return val ? module.exports.TRUE_VARIATION_INDEX : module.exports.FALSE_VARIATION_INDEX;
}
module.exports.variationForBoolean = $35aa13d65a9ac5aa$var$variationForBoolean;

});

parcelRequire.register("iTWFK", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $74cHE = parcelRequire("74cHE");

var $4BEyz = parcelRequire("4BEyz");
/**
 * A builder for feature flag rules to be used with {@link TestDataFlagBuilder}.
 *
 * In the LaunchDarkly model, a flag can have any number of rules, and
 * a rule can have any number of clauses. A clause is an individual test
 * such as "name is 'X'". A rule matches a user if all of the rule's
 * clauses match the user.
 *
 * To start defining a rule, use one of the flag builder's matching methods
 * such as `ifMatch`. This defines the first clause for the rule. Optionally,
 * you may add more clauses with the rule builder's methods such as `andMatch`.
 * Finally, call `thenReturn` to finish defining the rule.
 */ class $dc2ae02bd5bc7ae2$var$TestDataRuleBuilder {
    /**
     * @internal
     */ constructor(flagBuilder, clauses, variation){
        this.flagBuilder = flagBuilder;
        this.clauses = [];
        if (clauses) this.clauses = [
            ...clauses
        ];
        if (variation !== undefined) this.variation = variation;
    }
    /**
     * Adds another clause using the "is one of" operator.
     *
     * For example, this creates a rule that returns `true` if the name is
     * "Patsy" and the country is "gb":
     *
     *     testData.flag('flag')
     *             .ifMatch('name', 'Patsy')
     *             .andMatch('country', 'gb')
     *             .thenReturn(true)
     *
     * @param contextKind the kind of the context
     * @param attribute the user attribute to match against
     * @param values values to compare to
     * @return the flag rule builder
     */ andMatch(contextKind, attribute, ...values) {
        this.clauses.push({
            contextKind: contextKind,
            attribute: attribute,
            attributeReference: new $74cHE.AttributeReference(attribute),
            op: "in",
            values: values,
            negate: false
        });
        return this;
    }
    /**
     * Adds another clause using the "is not one of" operator.
     *
     * For example, this creates a rule that returns `true` if the name is
     * "Patsy" and the country is not "gb":
     *
     *     testData.flag('flag')
     *             .ifMatch('name', 'Patsy')
     *             .andNotMatch('country', 'gb')
     *             .thenReturn(true)
     *
     * @param contextKind the kind of the context
     * @param attribute the user attribute to match against
     * @param values values to compare to
     * @return the flag rule builder
     */ andNotMatch(contextKind, attribute, ...values) {
        this.clauses.push({
            contextKind: contextKind,
            attribute: attribute,
            attributeReference: new $74cHE.AttributeReference(attribute),
            op: "in",
            values: values,
            negate: true
        });
        return this;
    }
    /**
     * Finishes defining the rule, specifying the result value as either a boolean or an index
     *
     * If the variation is a boolean value and the flag was not already a boolean
     * flag, this also changes it to be a boolean flag.
     *
     * If the variation is an integer, it specifies a variation out of whatever
     * variation values have already been defined.
     *
     * @param variation
     *    either `true` or `false` or the index of the desired variation:
     *    0 for the first, 1 for the second, etc.
     * @return the flag rule builder
     */ thenReturn(variation) {
        if ($74cHE.TypeValidators.Boolean.is(variation)) {
            this.flagBuilder.booleanFlag();
            return this.thenReturn((0, $4BEyz.variationForBoolean)(variation));
        }
        this.variation = variation;
        this.flagBuilder.addRule(this);
        return this.flagBuilder;
    }
    /**
     * @internal
     */ build(id) {
        return {
            id: `rule${id}`,
            variation: this.variation,
            clauses: this.clauses
        };
    }
    /**
     * @internal
     */ clone() {
        return new $dc2ae02bd5bc7ae2$var$TestDataRuleBuilder(this.flagBuilder, this.clauses, this.variation);
    }
}
module.exports.default = $dc2ae02bd5bc7ae2$var$TestDataRuleBuilder;

});


parcelRequire.register("hfORm", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $h1AVT = parcelRequire("h1AVT");
/**
 * @internal
 */ class $c8fb4a069d42397a$var$TestDataSource {
    constructor(featureStore, flags, segments, onStop){
        this.featureStore = featureStore;
        this.flags = flags;
        this.segments = segments;
        this.onStop = onStop;
    }
    async start(fn) {
        await this.featureStore.init({
            [$h1AVT.default.Features.namespace]: Object.assign({}, this.flags),
            [$h1AVT.default.Segments.namespace]: Object.assign({}, this.segments)
        });
        fn === null || fn === void 0 || fn();
    }
    stop() {
        this.onStop(this);
    }
    close() {
        this.stop();
    }
    async upsert(kind, value) {
        return this.featureStore.upsert(kind, value);
    }
}
module.exports.default = $c8fb4a069d42397a$var$TestDataSource;

});




parcelRequire.register("3mSl7", function(module, exports) {
"use strict";
var $273d93e571a774a0$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $273d93e571a774a0$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) $273d93e571a774a0$var$__createBinding(exports1, m, p);
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.subsystems = module.exports.interfaces = module.exports.integrations = void 0;

$273d93e571a774a0$var$__exportStar((parcelRequire("1TKnW")), module.exports);

$273d93e571a774a0$var$__exportStar((parcelRequire("7c3IP")), module.exports);

$273d93e571a774a0$var$__exportStar((parcelRequire("9IOph")), module.exports);

$273d93e571a774a0$var$__exportStar((parcelRequire("a8nIX")), module.exports);

$273d93e571a774a0$var$__exportStar((parcelRequire("7HPBX")), module.exports);

$273d93e571a774a0$var$__exportStar((parcelRequire("dpo4n")), module.exports);

// These are items that should be less frequently used, and therefore they
// are namespaced to reduce clutter amongst the top level exports.
module.exports.integrations = (parcelRequire("9kGxp"));

module.exports.interfaces = (parcelRequire("huXHt"));

module.exports.subsystems = (parcelRequire("hEXYm"));

});
parcelRequire.register("1TKnW", function(module, exports) {
"use strict";
var $161ee8a095a50dd7$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $161ee8a095a50dd7$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) $161ee8a095a50dd7$var$__createBinding(exports1, m, p);
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

$161ee8a095a50dd7$var$__exportStar((parcelRequire("9MnKm")), module.exports);

$161ee8a095a50dd7$var$__exportStar((parcelRequire("apduk")), module.exports);

});
parcelRequire.register("9MnKm", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("apduk", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});


parcelRequire.register("7c3IP", function(module, exports) {
"use strict";
var $53cc8a7ca0f5d5ba$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $53cc8a7ca0f5d5ba$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) $53cc8a7ca0f5d5ba$var$__createBinding(exports1, m, p);
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

$53cc8a7ca0f5d5ba$var$__exportStar((parcelRequire("77T0X")), module.exports);

$53cc8a7ca0f5d5ba$var$__exportStar((parcelRequire("elJK9")), module.exports);

$53cc8a7ca0f5d5ba$var$__exportStar((parcelRequire("5e9Mr")), module.exports);

$53cc8a7ca0f5d5ba$var$__exportStar((parcelRequire("k9Xsx")), module.exports);

});
parcelRequire.register("77T0X", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("elJK9", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("5e9Mr", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("k9Xsx", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});


parcelRequire.register("9IOph", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("a8nIX", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("7HPBX", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("dpo4n", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("9kGxp", function(module, exports) {
"use strict";
var $6cb6fa77dd7be0bd$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $6cb6fa77dd7be0bd$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) $6cb6fa77dd7be0bd$var$__createBinding(exports1, m, p);
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

$6cb6fa77dd7be0bd$var$__exportStar((parcelRequire("8T3gQ")), module.exports);

});
parcelRequire.register("8T3gQ", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});


parcelRequire.register("huXHt", function(module, exports) {
"use strict";
var $cbd38c3b12f22068$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $cbd38c3b12f22068$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) $cbd38c3b12f22068$var$__createBinding(exports1, m, p);
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

$cbd38c3b12f22068$var$__exportStar((parcelRequire("6FlxK")), module.exports);

$cbd38c3b12f22068$var$__exportStar((parcelRequire("bsv3u")), module.exports);

$cbd38c3b12f22068$var$__exportStar((parcelRequire("94eES")), module.exports);

$cbd38c3b12f22068$var$__exportStar((parcelRequire("9rqbg")), module.exports);

$cbd38c3b12f22068$var$__exportStar((parcelRequire("7NhY0")), module.exports);

$cbd38c3b12f22068$var$__exportStar((parcelRequire("a8nIX")), module.exports);

$cbd38c3b12f22068$var$__exportStar((parcelRequire("abo2N")), module.exports);

$cbd38c3b12f22068$var$__exportStar((parcelRequire("c83IW")), module.exports);

$cbd38c3b12f22068$var$__exportStar((parcelRequire("DRXHy")), module.exports);

$cbd38c3b12f22068$var$__exportStar((parcelRequire("4hQRH")), module.exports);

$cbd38c3b12f22068$var$__exportStar((parcelRequire("9MzC6")), module.exports);

});
parcelRequire.register("6FlxK", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("bsv3u", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("94eES", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("9rqbg", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("7NhY0", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("abo2N", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("c83IW", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("DRXHy", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("4hQRH", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("9MzC6", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});


parcelRequire.register("hEXYm", function(module, exports) {
"use strict";
var $cdb4b168107eae2b$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $cdb4b168107eae2b$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) $cdb4b168107eae2b$var$__createBinding(exports1, m, p);
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

$cdb4b168107eae2b$var$__exportStar((parcelRequire("cTZQY")), module.exports);

$cdb4b168107eae2b$var$__exportStar((parcelRequire("7HPBX")), module.exports);

$cdb4b168107eae2b$var$__exportStar((parcelRequire("dpo4n")), module.exports);

$cdb4b168107eae2b$var$__exportStar((parcelRequire("jLmrX")), module.exports);

});
parcelRequire.register("cTZQY", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});

parcelRequire.register("jLmrX", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

});



parcelRequire.register("irFpt", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.NullEventSource = void 0;

var $1hQCM = parcelRequire("1hQCM");
module.exports.NullEventSource = $1hQCM.default;

});
parcelRequire.register("1hQCM", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
class $0f00331cc8ac1046$var$NullEventSource {
    constructor(url, options){
        this.handlers = {};
        this.closed = false;
        this.url = url;
        this.options = options;
    }
    addEventListener(type, listener) {
        this.handlers[type] = listener;
    }
    close() {
        this.closed = true;
    }
    simulateError(error) {
        const shouldRetry = this.options.errorFilter(error);
        if (!shouldRetry) this.closed = true;
    }
}
module.exports.default = $0f00331cc8ac1046$var$NullEventSource;

});



parcelRequire.register("d2RPc", function(module, exports) {

$parcel$export(module.exports, "randomBytes", () => $97f536c4a7e281bd$export$5f828d93ff035aa8, (v) => $97f536c4a7e281bd$export$5f828d93ff035aa8 = v);
$parcel$export(module.exports, "rng", () => $97f536c4a7e281bd$export$cd94982b18c6332c, (v) => $97f536c4a7e281bd$export$cd94982b18c6332c = v);
$parcel$export(module.exports, "pseudoRandomBytes", () => $97f536c4a7e281bd$export$1d518568e4f529b0, (v) => $97f536c4a7e281bd$export$1d518568e4f529b0 = v);
$parcel$export(module.exports, "prng", () => $97f536c4a7e281bd$export$5285b6d41c912b41, (v) => $97f536c4a7e281bd$export$5285b6d41c912b41 = v);
$parcel$export(module.exports, "getRandomValues", () => $97f536c4a7e281bd$export$960b9ff25e7d4257, (v) => $97f536c4a7e281bd$export$960b9ff25e7d4257 = v);
$parcel$export(module.exports, "randomUUID", () => $97f536c4a7e281bd$export$f15387b9ab8915bf, (v) => $97f536c4a7e281bd$export$f15387b9ab8915bf = v);
$parcel$export(module.exports, "createHash", () => $97f536c4a7e281bd$export$2fb37efbf6ae0c0e, (v) => $97f536c4a7e281bd$export$2fb37efbf6ae0c0e = v);
$parcel$export(module.exports, "Hash", () => $97f536c4a7e281bd$export$ab85ecd77ce6a5cd, (v) => $97f536c4a7e281bd$export$ab85ecd77ce6a5cd = v);
$parcel$export(module.exports, "createHmac", () => $97f536c4a7e281bd$export$da39cf97e1eb7c91, (v) => $97f536c4a7e281bd$export$da39cf97e1eb7c91 = v);
$parcel$export(module.exports, "Hmac", () => $97f536c4a7e281bd$export$52a9039d7177394f, (v) => $97f536c4a7e281bd$export$52a9039d7177394f = v);
$parcel$export(module.exports, "getHashes", () => $97f536c4a7e281bd$export$f7201db400317331, (v) => $97f536c4a7e281bd$export$f7201db400317331 = v);
$parcel$export(module.exports, "pbkdf2", () => $97f536c4a7e281bd$export$448fa22aedc9dbca, (v) => $97f536c4a7e281bd$export$448fa22aedc9dbca = v);
$parcel$export(module.exports, "pbkdf2Sync", () => $97f536c4a7e281bd$export$b80c7ba289c8fa56, (v) => $97f536c4a7e281bd$export$b80c7ba289c8fa56 = v);
$parcel$export(module.exports, "Cipher", () => $97f536c4a7e281bd$export$26e5786e8ac8e530, (v) => $97f536c4a7e281bd$export$26e5786e8ac8e530 = v);
$parcel$export(module.exports, "createCipher", () => $97f536c4a7e281bd$export$bdd223f16383713e, (v) => $97f536c4a7e281bd$export$bdd223f16383713e = v);
$parcel$export(module.exports, "Cipheriv", () => $97f536c4a7e281bd$export$20533d26f07f1ee0, (v) => $97f536c4a7e281bd$export$20533d26f07f1ee0 = v);
$parcel$export(module.exports, "createCipheriv", () => $97f536c4a7e281bd$export$2f64596b8cbf08b4, (v) => $97f536c4a7e281bd$export$2f64596b8cbf08b4 = v);
$parcel$export(module.exports, "Decipher", () => $97f536c4a7e281bd$export$2ce6d8d0e8b04e1a, (v) => $97f536c4a7e281bd$export$2ce6d8d0e8b04e1a = v);
$parcel$export(module.exports, "createDecipher", () => $97f536c4a7e281bd$export$12ada9414fbc594c, (v) => $97f536c4a7e281bd$export$12ada9414fbc594c = v);
$parcel$export(module.exports, "Decipheriv", () => $97f536c4a7e281bd$export$f5e7e39d57cd9700, (v) => $97f536c4a7e281bd$export$f5e7e39d57cd9700 = v);
$parcel$export(module.exports, "createDecipheriv", () => $97f536c4a7e281bd$export$36b6d6ef312eab39, (v) => $97f536c4a7e281bd$export$36b6d6ef312eab39 = v);
$parcel$export(module.exports, "getCiphers", () => $97f536c4a7e281bd$export$58a258485f1e49f6, (v) => $97f536c4a7e281bd$export$58a258485f1e49f6 = v);
$parcel$export(module.exports, "listCiphers", () => $97f536c4a7e281bd$export$dedd8dc3dc62b370, (v) => $97f536c4a7e281bd$export$dedd8dc3dc62b370 = v);
$parcel$export(module.exports, "DiffieHellmanGroup", () => $97f536c4a7e281bd$export$971862a2fcb1bb40, (v) => $97f536c4a7e281bd$export$971862a2fcb1bb40 = v);
$parcel$export(module.exports, "createDiffieHellmanGroup", () => $97f536c4a7e281bd$export$c6ff6a88acbeaf40, (v) => $97f536c4a7e281bd$export$c6ff6a88acbeaf40 = v);
$parcel$export(module.exports, "getDiffieHellman", () => $97f536c4a7e281bd$export$fdc27893e98845cc, (v) => $97f536c4a7e281bd$export$fdc27893e98845cc = v);
$parcel$export(module.exports, "createDiffieHellman", () => $97f536c4a7e281bd$export$6671fb9a1323bed, (v) => $97f536c4a7e281bd$export$6671fb9a1323bed = v);
$parcel$export(module.exports, "DiffieHellman", () => $97f536c4a7e281bd$export$d74daf141a551db, (v) => $97f536c4a7e281bd$export$d74daf141a551db = v);
$parcel$export(module.exports, "createSign", () => $97f536c4a7e281bd$export$45df7cae684751af, (v) => $97f536c4a7e281bd$export$45df7cae684751af = v);
$parcel$export(module.exports, "Sign", () => $97f536c4a7e281bd$export$1db683ad541682f6, (v) => $97f536c4a7e281bd$export$1db683ad541682f6 = v);
$parcel$export(module.exports, "createVerify", () => $97f536c4a7e281bd$export$6f65485f87568e37, (v) => $97f536c4a7e281bd$export$6f65485f87568e37 = v);
$parcel$export(module.exports, "Verify", () => $97f536c4a7e281bd$export$91a8e56769aeb334, (v) => $97f536c4a7e281bd$export$91a8e56769aeb334 = v);
$parcel$export(module.exports, "createECDH", () => $97f536c4a7e281bd$export$2d4117e99c2179e4, (v) => $97f536c4a7e281bd$export$2d4117e99c2179e4 = v);
$parcel$export(module.exports, "publicEncrypt", () => $97f536c4a7e281bd$export$512823e338ddb1b7, (v) => $97f536c4a7e281bd$export$512823e338ddb1b7 = v);
$parcel$export(module.exports, "privateEncrypt", () => $97f536c4a7e281bd$export$9d0e0c0c4a8d30f3, (v) => $97f536c4a7e281bd$export$9d0e0c0c4a8d30f3 = v);
$parcel$export(module.exports, "publicDecrypt", () => $97f536c4a7e281bd$export$b9d55ff329113abd, (v) => $97f536c4a7e281bd$export$b9d55ff329113abd = v);
$parcel$export(module.exports, "privateDecrypt", () => $97f536c4a7e281bd$export$7efb24e2fddf99b9, (v) => $97f536c4a7e281bd$export$7efb24e2fddf99b9 = v);
$parcel$export(module.exports, "randomFill", () => $97f536c4a7e281bd$export$bb1abf2ce84fc7e8, (v) => $97f536c4a7e281bd$export$bb1abf2ce84fc7e8 = v);
$parcel$export(module.exports, "randomFillSync", () => $97f536c4a7e281bd$export$2f7171e78e524d5e, (v) => $97f536c4a7e281bd$export$2f7171e78e524d5e = v);
$parcel$export(module.exports, "createCredentials", () => $97f536c4a7e281bd$export$e1d879b482f37d98, (v) => $97f536c4a7e281bd$export$e1d879b482f37d98 = v);
$parcel$export(module.exports, "constants", () => $97f536c4a7e281bd$export$1a988e7317c65621, (v) => $97f536c4a7e281bd$export$1a988e7317c65621 = v);
var $97f536c4a7e281bd$export$5f828d93ff035aa8;
var $97f536c4a7e281bd$export$cd94982b18c6332c;
var $97f536c4a7e281bd$export$1d518568e4f529b0;
var $97f536c4a7e281bd$export$5285b6d41c912b41;
var $97f536c4a7e281bd$export$960b9ff25e7d4257;
var $97f536c4a7e281bd$export$f15387b9ab8915bf;
var $97f536c4a7e281bd$export$2fb37efbf6ae0c0e;
var $97f536c4a7e281bd$export$ab85ecd77ce6a5cd;
var $97f536c4a7e281bd$export$da39cf97e1eb7c91;
var $97f536c4a7e281bd$export$52a9039d7177394f;
var $97f536c4a7e281bd$export$f7201db400317331;
var $97f536c4a7e281bd$export$448fa22aedc9dbca;
var $97f536c4a7e281bd$export$b80c7ba289c8fa56;
var $97f536c4a7e281bd$export$26e5786e8ac8e530;
var $97f536c4a7e281bd$export$bdd223f16383713e;
var $97f536c4a7e281bd$export$20533d26f07f1ee0;
var $97f536c4a7e281bd$export$2f64596b8cbf08b4;
var $97f536c4a7e281bd$export$2ce6d8d0e8b04e1a;
var $97f536c4a7e281bd$export$12ada9414fbc594c;
var $97f536c4a7e281bd$export$f5e7e39d57cd9700;
var $97f536c4a7e281bd$export$36b6d6ef312eab39;
var $97f536c4a7e281bd$export$58a258485f1e49f6;
var $97f536c4a7e281bd$export$dedd8dc3dc62b370;
var $97f536c4a7e281bd$export$971862a2fcb1bb40;
var $97f536c4a7e281bd$export$c6ff6a88acbeaf40;
var $97f536c4a7e281bd$export$fdc27893e98845cc;
var $97f536c4a7e281bd$export$6671fb9a1323bed;
var $97f536c4a7e281bd$export$d74daf141a551db;
var $97f536c4a7e281bd$export$45df7cae684751af;
var $97f536c4a7e281bd$export$1db683ad541682f6;
var $97f536c4a7e281bd$export$6f65485f87568e37;
var $97f536c4a7e281bd$export$91a8e56769aeb334;
var $97f536c4a7e281bd$export$2d4117e99c2179e4;
var $97f536c4a7e281bd$export$512823e338ddb1b7;
var $97f536c4a7e281bd$export$9d0e0c0c4a8d30f3;
var $97f536c4a7e281bd$export$b9d55ff329113abd;
var $97f536c4a7e281bd$export$7efb24e2fddf99b9;
var $97f536c4a7e281bd$export$bb1abf2ce84fc7e8;
var $97f536c4a7e281bd$export$2f7171e78e524d5e;
var $97f536c4a7e281bd$export$e1d879b482f37d98;
var $97f536c4a7e281bd$export$1a988e7317c65621;
"use strict";

$97f536c4a7e281bd$export$5f828d93ff035aa8 = $97f536c4a7e281bd$export$cd94982b18c6332c = $97f536c4a7e281bd$export$1d518568e4f529b0 = $97f536c4a7e281bd$export$5285b6d41c912b41 = (parcelRequire("pV6F5"));
$97f536c4a7e281bd$export$960b9ff25e7d4257 = function(abv) {
    var l = abv.length;
    while(l--){
        var bytes = $97f536c4a7e281bd$export$5f828d93ff035aa8(7);
        var randomFloat = bytes[0] % 32 / 32;
        for(var i = 0; i < bytes.length; i++){
            var byte = bytes[i];
            randomFloat = (randomFloat + byte) / 256;
        }
        abv[l] = Math.floor(randomFloat * 256);
    }
    return abv;
};
$97f536c4a7e281bd$export$f15387b9ab8915bf = function() {
    return "10000000-1000-4000-8000-100000000000".replace(/[018]/g, function(c) {
        return (c ^ $97f536c4a7e281bd$export$960b9ff25e7d4257(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
    });
};

$97f536c4a7e281bd$export$2fb37efbf6ae0c0e = $97f536c4a7e281bd$export$ab85ecd77ce6a5cd = (parcelRequire("2CNNr"));

$97f536c4a7e281bd$export$da39cf97e1eb7c91 = $97f536c4a7e281bd$export$52a9039d7177394f = (parcelRequire("6rvaV"));

var $kri2x = parcelRequire("kri2x");
var $97f536c4a7e281bd$var$algoKeys = Object.keys($kri2x);
var $97f536c4a7e281bd$var$hashes = [
    "sha1",
    "sha224",
    "sha256",
    "sha384",
    "sha512",
    "md5",
    "rmd160"
].concat($97f536c4a7e281bd$var$algoKeys);
$97f536c4a7e281bd$export$f7201db400317331 = function() {
    return $97f536c4a7e281bd$var$hashes;
};

var $3oAAz = parcelRequire("3oAAz");
$97f536c4a7e281bd$export$448fa22aedc9dbca = $3oAAz.pbkdf2;
$97f536c4a7e281bd$export$b80c7ba289c8fa56 = $3oAAz.pbkdf2Sync;

var $kRyFV = parcelRequire("kRyFV");
$97f536c4a7e281bd$export$26e5786e8ac8e530 = $kRyFV.Cipher;
$97f536c4a7e281bd$export$bdd223f16383713e = $kRyFV.createCipher;
$97f536c4a7e281bd$export$20533d26f07f1ee0 = $kRyFV.Cipheriv;
$97f536c4a7e281bd$export$2f64596b8cbf08b4 = $kRyFV.createCipheriv;
$97f536c4a7e281bd$export$2ce6d8d0e8b04e1a = $kRyFV.Decipher;
$97f536c4a7e281bd$export$12ada9414fbc594c = $kRyFV.createDecipher;
$97f536c4a7e281bd$export$f5e7e39d57cd9700 = $kRyFV.Decipheriv;
$97f536c4a7e281bd$export$36b6d6ef312eab39 = $kRyFV.createDecipheriv;
$97f536c4a7e281bd$export$58a258485f1e49f6 = $kRyFV.getCiphers;
$97f536c4a7e281bd$export$dedd8dc3dc62b370 = $kRyFV.listCiphers;

var $4zVEV = parcelRequire("4zVEV");
$97f536c4a7e281bd$export$971862a2fcb1bb40 = $4zVEV.DiffieHellmanGroup;
$97f536c4a7e281bd$export$c6ff6a88acbeaf40 = $4zVEV.createDiffieHellmanGroup;
$97f536c4a7e281bd$export$fdc27893e98845cc = $4zVEV.getDiffieHellman;
$97f536c4a7e281bd$export$6671fb9a1323bed = $4zVEV.createDiffieHellman;
$97f536c4a7e281bd$export$d74daf141a551db = $4zVEV.DiffieHellman;

var $bDxpp = parcelRequire("bDxpp");
$97f536c4a7e281bd$export$45df7cae684751af = $bDxpp.createSign;
$97f536c4a7e281bd$export$1db683ad541682f6 = $bDxpp.Sign;
$97f536c4a7e281bd$export$6f65485f87568e37 = $bDxpp.createVerify;
$97f536c4a7e281bd$export$91a8e56769aeb334 = $bDxpp.Verify;

$97f536c4a7e281bd$export$2d4117e99c2179e4 = (parcelRequire("kmbpA"));

var $1cA5r = parcelRequire("1cA5r");
$97f536c4a7e281bd$export$512823e338ddb1b7 = $1cA5r.publicEncrypt;
$97f536c4a7e281bd$export$9d0e0c0c4a8d30f3 = $1cA5r.privateEncrypt;
$97f536c4a7e281bd$export$b9d55ff329113abd = $1cA5r.publicDecrypt;
$97f536c4a7e281bd$export$7efb24e2fddf99b9 = $1cA5r.privateDecrypt;

var $a454F = parcelRequire("a454F");
$97f536c4a7e281bd$export$bb1abf2ce84fc7e8 = $a454F.randomFill;
$97f536c4a7e281bd$export$2f7171e78e524d5e = $a454F.randomFillSync;
$97f536c4a7e281bd$export$e1d879b482f37d98 = function() {
    throw new Error([
        "sorry, createCredentials is not implemented yet",
        "we accept pull requests",
        "https://github.com/crypto-browserify/crypto-browserify"
    ].join("\n"));
};
$97f536c4a7e281bd$export$1a988e7317c65621 = {
    "DH_CHECK_P_NOT_SAFE_PRIME": 2,
    "DH_CHECK_P_NOT_PRIME": 1,
    "DH_UNABLE_TO_CHECK_GENERATOR": 4,
    "DH_NOT_SUITABLE_GENERATOR": 8,
    "NPN_ENABLED": 1,
    "ALPN_ENABLED": 1,
    "RSA_PKCS1_PADDING": 1,
    "RSA_SSLV23_PADDING": 2,
    "RSA_NO_PADDING": 3,
    "RSA_PKCS1_OAEP_PADDING": 4,
    "RSA_X931_PADDING": 5,
    "RSA_PKCS1_PSS_PADDING": 6,
    "POINT_CONVERSION_COMPRESSED": 2,
    "POINT_CONVERSION_UNCOMPRESSED": 4,
    "POINT_CONVERSION_HYBRID": 6
};

});
parcelRequire.register("pV6F5", function(module, exports) {

"use strict";
// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var $04dea210b2c35b4e$var$MAX_BYTES = 65536;
// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var $04dea210b2c35b4e$var$MAX_UINT32 = 4294967295;
function $04dea210b2c35b4e$var$oldBrowser() {
    throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
}

var $iUdYW = parcelRequire("iUdYW");
var $04dea210b2c35b4e$require$Buffer = $iUdYW.Buffer;
var $04dea210b2c35b4e$var$crypto = $parcel$global.crypto || $parcel$global.msCrypto;
if ($04dea210b2c35b4e$var$crypto && $04dea210b2c35b4e$var$crypto.getRandomValues) module.exports = $04dea210b2c35b4e$var$randomBytes;
else module.exports = $04dea210b2c35b4e$var$oldBrowser;
function $04dea210b2c35b4e$var$randomBytes(size, cb) {
    // phantomjs needs to throw
    if (size > $04dea210b2c35b4e$var$MAX_UINT32) throw new RangeError("requested too many random bytes");
    var bytes = $04dea210b2c35b4e$require$Buffer.allocUnsafe(size);
    if (size > 0) {
        if (size > $04dea210b2c35b4e$var$MAX_BYTES) // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        for(var generated = 0; generated < size; generated += $04dea210b2c35b4e$var$MAX_BYTES)// buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        $04dea210b2c35b4e$var$crypto.getRandomValues(bytes.slice(generated, generated + $04dea210b2c35b4e$var$MAX_BYTES));
        else $04dea210b2c35b4e$var$crypto.getRandomValues(bytes);
    }
    if (typeof cb === "function") return $bFvJb$process.nextTick(function() {
        cb(null, bytes);
    });
    return bytes;
}

});
parcelRequire.register("iUdYW", function(module, exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ 
var $dc384d7d84635da6$var$Buffer = $bFvJb$buffer.Buffer;
// alternative to using Object.keys for old browsers
function $dc384d7d84635da6$var$copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if ($dc384d7d84635da6$var$Buffer.from && $dc384d7d84635da6$var$Buffer.alloc && $dc384d7d84635da6$var$Buffer.allocUnsafe && $dc384d7d84635da6$var$Buffer.allocUnsafeSlow) module.exports = $bFvJb$buffer;
else {
    // Copy properties from require('buffer')
    $dc384d7d84635da6$var$copyProps($bFvJb$buffer, module.exports);
    module.exports.Buffer = $dc384d7d84635da6$var$SafeBuffer;
}
function $dc384d7d84635da6$var$SafeBuffer(arg, encodingOrOffset, length) {
    return $dc384d7d84635da6$var$Buffer(arg, encodingOrOffset, length);
}
$dc384d7d84635da6$var$SafeBuffer.prototype = Object.create($dc384d7d84635da6$var$Buffer.prototype);
// Copy static methods from Buffer
$dc384d7d84635da6$var$copyProps($dc384d7d84635da6$var$Buffer, $dc384d7d84635da6$var$SafeBuffer);
$dc384d7d84635da6$var$SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return $dc384d7d84635da6$var$Buffer(arg, encodingOrOffset, length);
};
$dc384d7d84635da6$var$SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = $dc384d7d84635da6$var$Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
$dc384d7d84635da6$var$SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return $dc384d7d84635da6$var$Buffer(size);
};
$dc384d7d84635da6$var$SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return $bFvJb$buffer.SlowBuffer(size);
};

});


parcelRequire.register("2CNNr", function(module, exports) {
"use strict";

var $4gPgC = parcelRequire("4gPgC");

var $lOs9b = parcelRequire("lOs9b");

var $hwcuu = parcelRequire("hwcuu");

var $fV0g8 = parcelRequire("fV0g8");

var $l6Nd0 = parcelRequire("l6Nd0");
function $1e95c1e71f3aa633$var$Hash(hash) {
    $l6Nd0.call(this, "digest");
    this._hash = hash;
}
$4gPgC($1e95c1e71f3aa633$var$Hash, $l6Nd0);
$1e95c1e71f3aa633$var$Hash.prototype._update = function(data) {
    this._hash.update(data);
};
$1e95c1e71f3aa633$var$Hash.prototype._final = function() {
    return this._hash.digest();
};
module.exports = function createHash(alg) {
    alg = alg.toLowerCase();
    if (alg === "md5") return new $lOs9b();
    if (alg === "rmd160" || alg === "ripemd160") return new $hwcuu();
    return new $1e95c1e71f3aa633$var$Hash($fV0g8(alg));
};

});
parcelRequire.register("4gPgC", function(module, exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

});

parcelRequire.register("lOs9b", function(module, exports) {
"use strict";

var $4gPgC = parcelRequire("4gPgC");

var $lPm3p = parcelRequire("lPm3p");

var $iUdYW = parcelRequire("iUdYW");
var $fe1419e6cb036e2c$require$Buffer = $iUdYW.Buffer;
var $fe1419e6cb036e2c$var$ARRAY16 = new Array(16);
function $fe1419e6cb036e2c$var$MD5() {
    $lPm3p.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
}
$4gPgC($fe1419e6cb036e2c$var$MD5, $lPm3p);
$fe1419e6cb036e2c$var$MD5.prototype._update = function() {
    var M = $fe1419e6cb036e2c$var$ARRAY16;
    for(var i = 0; i < 16; ++i)M[i] = this._block.readInt32LE(i * 4);
    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;
    a = $fe1419e6cb036e2c$var$fnF(a, b, c, d, M[0], 0xd76aa478, 7);
    d = $fe1419e6cb036e2c$var$fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
    c = $fe1419e6cb036e2c$var$fnF(c, d, a, b, M[2], 0x242070db, 17);
    b = $fe1419e6cb036e2c$var$fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
    a = $fe1419e6cb036e2c$var$fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
    d = $fe1419e6cb036e2c$var$fnF(d, a, b, c, M[5], 0x4787c62a, 12);
    c = $fe1419e6cb036e2c$var$fnF(c, d, a, b, M[6], 0xa8304613, 17);
    b = $fe1419e6cb036e2c$var$fnF(b, c, d, a, M[7], 0xfd469501, 22);
    a = $fe1419e6cb036e2c$var$fnF(a, b, c, d, M[8], 0x698098d8, 7);
    d = $fe1419e6cb036e2c$var$fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
    c = $fe1419e6cb036e2c$var$fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
    b = $fe1419e6cb036e2c$var$fnF(b, c, d, a, M[11], 0x895cd7be, 22);
    a = $fe1419e6cb036e2c$var$fnF(a, b, c, d, M[12], 0x6b901122, 7);
    d = $fe1419e6cb036e2c$var$fnF(d, a, b, c, M[13], 0xfd987193, 12);
    c = $fe1419e6cb036e2c$var$fnF(c, d, a, b, M[14], 0xa679438e, 17);
    b = $fe1419e6cb036e2c$var$fnF(b, c, d, a, M[15], 0x49b40821, 22);
    a = $fe1419e6cb036e2c$var$fnG(a, b, c, d, M[1], 0xf61e2562, 5);
    d = $fe1419e6cb036e2c$var$fnG(d, a, b, c, M[6], 0xc040b340, 9);
    c = $fe1419e6cb036e2c$var$fnG(c, d, a, b, M[11], 0x265e5a51, 14);
    b = $fe1419e6cb036e2c$var$fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
    a = $fe1419e6cb036e2c$var$fnG(a, b, c, d, M[5], 0xd62f105d, 5);
    d = $fe1419e6cb036e2c$var$fnG(d, a, b, c, M[10], 0x02441453, 9);
    c = $fe1419e6cb036e2c$var$fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
    b = $fe1419e6cb036e2c$var$fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
    a = $fe1419e6cb036e2c$var$fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
    d = $fe1419e6cb036e2c$var$fnG(d, a, b, c, M[14], 0xc33707d6, 9);
    c = $fe1419e6cb036e2c$var$fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
    b = $fe1419e6cb036e2c$var$fnG(b, c, d, a, M[8], 0x455a14ed, 20);
    a = $fe1419e6cb036e2c$var$fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
    d = $fe1419e6cb036e2c$var$fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
    c = $fe1419e6cb036e2c$var$fnG(c, d, a, b, M[7], 0x676f02d9, 14);
    b = $fe1419e6cb036e2c$var$fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
    a = $fe1419e6cb036e2c$var$fnH(a, b, c, d, M[5], 0xfffa3942, 4);
    d = $fe1419e6cb036e2c$var$fnH(d, a, b, c, M[8], 0x8771f681, 11);
    c = $fe1419e6cb036e2c$var$fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
    b = $fe1419e6cb036e2c$var$fnH(b, c, d, a, M[14], 0xfde5380c, 23);
    a = $fe1419e6cb036e2c$var$fnH(a, b, c, d, M[1], 0xa4beea44, 4);
    d = $fe1419e6cb036e2c$var$fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
    c = $fe1419e6cb036e2c$var$fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
    b = $fe1419e6cb036e2c$var$fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
    a = $fe1419e6cb036e2c$var$fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
    d = $fe1419e6cb036e2c$var$fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
    c = $fe1419e6cb036e2c$var$fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
    b = $fe1419e6cb036e2c$var$fnH(b, c, d, a, M[6], 0x04881d05, 23);
    a = $fe1419e6cb036e2c$var$fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
    d = $fe1419e6cb036e2c$var$fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
    c = $fe1419e6cb036e2c$var$fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
    b = $fe1419e6cb036e2c$var$fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
    a = $fe1419e6cb036e2c$var$fnI(a, b, c, d, M[0], 0xf4292244, 6);
    d = $fe1419e6cb036e2c$var$fnI(d, a, b, c, M[7], 0x432aff97, 10);
    c = $fe1419e6cb036e2c$var$fnI(c, d, a, b, M[14], 0xab9423a7, 15);
    b = $fe1419e6cb036e2c$var$fnI(b, c, d, a, M[5], 0xfc93a039, 21);
    a = $fe1419e6cb036e2c$var$fnI(a, b, c, d, M[12], 0x655b59c3, 6);
    d = $fe1419e6cb036e2c$var$fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
    c = $fe1419e6cb036e2c$var$fnI(c, d, a, b, M[10], 0xffeff47d, 15);
    b = $fe1419e6cb036e2c$var$fnI(b, c, d, a, M[1], 0x85845dd1, 21);
    a = $fe1419e6cb036e2c$var$fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
    d = $fe1419e6cb036e2c$var$fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
    c = $fe1419e6cb036e2c$var$fnI(c, d, a, b, M[6], 0xa3014314, 15);
    b = $fe1419e6cb036e2c$var$fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
    a = $fe1419e6cb036e2c$var$fnI(a, b, c, d, M[4], 0xf7537e82, 6);
    d = $fe1419e6cb036e2c$var$fnI(d, a, b, c, M[11], 0xbd3af235, 10);
    c = $fe1419e6cb036e2c$var$fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
    b = $fe1419e6cb036e2c$var$fnI(b, c, d, a, M[9], 0xeb86d391, 21);
    this._a = this._a + a | 0;
    this._b = this._b + b | 0;
    this._c = this._c + c | 0;
    this._d = this._d + d | 0;
};
$fe1419e6cb036e2c$var$MD5.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = $fe1419e6cb036e2c$require$Buffer.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer;
};
function $fe1419e6cb036e2c$var$rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function $fe1419e6cb036e2c$var$fnF(a, b, c, d, m, k, s) {
    return $fe1419e6cb036e2c$var$rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}
function $fe1419e6cb036e2c$var$fnG(a, b, c, d, m, k, s) {
    return $fe1419e6cb036e2c$var$rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}
function $fe1419e6cb036e2c$var$fnH(a, b, c, d, m, k, s) {
    return $fe1419e6cb036e2c$var$rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}
function $fe1419e6cb036e2c$var$fnI(a, b, c, d, m, k, s) {
    return $fe1419e6cb036e2c$var$rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}
module.exports = $fe1419e6cb036e2c$var$MD5;

});
parcelRequire.register("lPm3p", function(module, exports) {
"use strict";

var $iUdYW = parcelRequire("iUdYW");
var $fe3f77d8600db380$require$Buffer = $iUdYW.Buffer;

var $jicMk = parcelRequire("jicMk");
var $fe3f77d8600db380$require$Transform = $jicMk.Transform;

var $4gPgC = parcelRequire("4gPgC");
function $fe3f77d8600db380$var$throwIfNotStringOrBuffer(val, prefix) {
    if (!$fe3f77d8600db380$require$Buffer.isBuffer(val) && typeof val !== "string") throw new TypeError(prefix + " must be a string or a buffer");
}
function $fe3f77d8600db380$var$HashBase(blockSize) {
    $fe3f77d8600db380$require$Transform.call(this);
    this._block = $fe3f77d8600db380$require$Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [
        0,
        0,
        0,
        0
    ];
    this._finalized = false;
}
$4gPgC($fe3f77d8600db380$var$HashBase, $fe3f77d8600db380$require$Transform);
$fe3f77d8600db380$var$HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
        this.update(chunk, encoding);
    } catch (err) {
        error = err;
    }
    callback(error);
};
$fe3f77d8600db380$var$HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
        this.push(this.digest());
    } catch (err) {
        error = err;
    }
    callback(error);
};
$fe3f77d8600db380$var$HashBase.prototype.update = function(data, encoding) {
    $fe3f77d8600db380$var$throwIfNotStringOrBuffer(data, "Data");
    if (this._finalized) throw new Error("Digest already called");
    if (!$fe3f77d8600db380$require$Buffer.isBuffer(data)) data = $fe3f77d8600db380$require$Buffer.from(data, encoding);
    // consume data
    var block = this._block;
    var offset = 0;
    while(this._blockOffset + data.length - offset >= this._blockSize){
        for(var i = this._blockOffset; i < this._blockSize;)block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
    }
    while(offset < data.length)block[this._blockOffset++] = data[offset++];
    // update length
    for(var j = 0, carry = data.length * 8; carry > 0; ++j){
        this._length[j] += carry;
        carry = this._length[j] / 0x0100000000 | 0;
        if (carry > 0) this._length[j] -= 0x0100000000 * carry;
    }
    return this;
};
$fe3f77d8600db380$var$HashBase.prototype._update = function() {
    throw new Error("_update is not implemented");
};
$fe3f77d8600db380$var$HashBase.prototype.digest = function(encoding) {
    if (this._finalized) throw new Error("Digest already called");
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);
    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for(var i = 0; i < 4; ++i)this._length[i] = 0;
    return digest;
};
$fe3f77d8600db380$var$HashBase.prototype._digest = function() {
    throw new Error("_digest is not implemented");
};
module.exports = $fe3f77d8600db380$var$HashBase;

});
parcelRequire.register("jicMk", function(module, exports) {

exports = module.exports = (parcelRequire("eG4dW"));
exports.Stream = exports;
exports.Readable = exports;

exports.Writable = (parcelRequire("aOrJd"));

exports.Duplex = (parcelRequire("8clxO"));

exports.Transform = (parcelRequire("87IRB"));

exports.PassThrough = (parcelRequire("jjHf0"));

exports.finished = (parcelRequire("lxIgQ"));

exports.pipeline = (parcelRequire("fPe99"));

});
parcelRequire.register("eG4dW", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

"use strict";
module.exports = $aaf843b25c9accaf$var$Readable;
/*<replacement>*/ var $aaf843b25c9accaf$var$Duplex;
/*</replacement>*/ $aaf843b25c9accaf$var$Readable.ReadableState = $aaf843b25c9accaf$var$ReadableState;

var $aaf843b25c9accaf$require$EE = $bFvJb$events.EventEmitter;
var $aaf843b25c9accaf$var$EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};

var $ejBL1 = parcelRequire("ejBL1");

var $aaf843b25c9accaf$require$Buffer = $bFvJb$buffer.Buffer;
var $aaf843b25c9accaf$var$OurUint8Array = (typeof $parcel$global !== "undefined" ? $parcel$global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function $aaf843b25c9accaf$var$_uint8ArrayToBuffer(chunk) {
    return $aaf843b25c9accaf$require$Buffer.from(chunk);
}
function $aaf843b25c9accaf$var$_isUint8Array(obj) {
    return $aaf843b25c9accaf$require$Buffer.isBuffer(obj) || obj instanceof $aaf843b25c9accaf$var$OurUint8Array;
}

var $fNNvm = parcelRequire("fNNvm");
var $aaf843b25c9accaf$var$debug;
if ($fNNvm && $fNNvm.debuglog) $aaf843b25c9accaf$var$debug = $fNNvm.debuglog("stream");
else $aaf843b25c9accaf$var$debug = function debug() {};

var $6pxSr = parcelRequire("6pxSr");

var $azknl = parcelRequire("azknl");

var $b3MrN = parcelRequire("b3MrN");
var $aaf843b25c9accaf$var$getHighWaterMark = $b3MrN.getHighWaterMark;

var $k2833 = parcelRequire("k2833");
var $aaf843b25c9accaf$require$_require$codes = $k2833.codes;
var $aaf843b25c9accaf$var$ERR_INVALID_ARG_TYPE = $aaf843b25c9accaf$require$_require$codes.ERR_INVALID_ARG_TYPE, $aaf843b25c9accaf$var$ERR_STREAM_PUSH_AFTER_EOF = $aaf843b25c9accaf$require$_require$codes.ERR_STREAM_PUSH_AFTER_EOF, $aaf843b25c9accaf$var$ERR_METHOD_NOT_IMPLEMENTED = $aaf843b25c9accaf$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $aaf843b25c9accaf$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT = $aaf843b25c9accaf$require$_require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
// Lazy loaded to improve the startup performance.
var $aaf843b25c9accaf$var$StringDecoder;
var $aaf843b25c9accaf$var$createReadableStreamAsyncIterator;
var $aaf843b25c9accaf$var$from;

(parcelRequire("4gPgC"))($aaf843b25c9accaf$var$Readable, $ejBL1);
var $aaf843b25c9accaf$var$errorOrDestroy = $azknl.errorOrDestroy;
var $aaf843b25c9accaf$var$kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function $aaf843b25c9accaf$var$prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}


function $aaf843b25c9accaf$var$ReadableState(options, stream, isDuplex) {
    $aaf843b25c9accaf$var$Duplex = $aaf843b25c9accaf$var$Duplex || (parcelRequire("8clxO"));
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $aaf843b25c9accaf$var$Duplex;
    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = $aaf843b25c9accaf$var$getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new $6pxSr();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;
    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy;
    // has it been destroyed
    this.destroyed = false;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;
    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!$aaf843b25c9accaf$var$StringDecoder) $aaf843b25c9accaf$var$StringDecoder = (parcelRequire("kAGu9")).StringDecoder;
        this.decoder = new $aaf843b25c9accaf$var$StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}

function $aaf843b25c9accaf$var$Readable(options) {
    $aaf843b25c9accaf$var$Duplex = $aaf843b25c9accaf$var$Duplex || (parcelRequire("8clxO"));
    if (!(this instanceof $aaf843b25c9accaf$var$Readable)) return new $aaf843b25c9accaf$var$Readable(options);
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $aaf843b25c9accaf$var$Duplex;
    this._readableState = new $aaf843b25c9accaf$var$ReadableState(options, this, isDuplex);
    // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    $ejBL1.call(this);
}
Object.defineProperty($aaf843b25c9accaf$var$Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
$aaf843b25c9accaf$var$Readable.prototype.destroy = $azknl.destroy;
$aaf843b25c9accaf$var$Readable.prototype._undestroy = $azknl.undestroy;
$aaf843b25c9accaf$var$Readable.prototype._destroy = function(err, cb) {
    cb(err);
};
// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
$aaf843b25c9accaf$var$Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = $aaf843b25c9accaf$require$Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return $aaf843b25c9accaf$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};
// Unshift should *always* be something directly out of read()
$aaf843b25c9accaf$var$Readable.prototype.unshift = function(chunk) {
    return $aaf843b25c9accaf$var$readableAddChunk(this, chunk, null, true, false);
};
function $aaf843b25c9accaf$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    $aaf843b25c9accaf$var$debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        $aaf843b25c9accaf$var$onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = $aaf843b25c9accaf$var$chunkInvalid(state, chunk);
        if (er) $aaf843b25c9accaf$var$errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== $aaf843b25c9accaf$require$Buffer.prototype) chunk = $aaf843b25c9accaf$var$_uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) $aaf843b25c9accaf$var$errorOrDestroy(stream, new $aaf843b25c9accaf$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else $aaf843b25c9accaf$var$addChunk(stream, state, chunk, true);
            } else if (state.ended) $aaf843b25c9accaf$var$errorOrDestroy(stream, new $aaf843b25c9accaf$var$ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) $aaf843b25c9accaf$var$addChunk(stream, state, chunk, false);
                    else $aaf843b25c9accaf$var$maybeReadMore(stream, state);
                } else $aaf843b25c9accaf$var$addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            $aaf843b25c9accaf$var$maybeReadMore(stream, state);
        }
    }
    // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function $aaf843b25c9accaf$var$addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) $aaf843b25c9accaf$var$emitReadable(stream);
    }
    $aaf843b25c9accaf$var$maybeReadMore(stream, state);
}
function $aaf843b25c9accaf$var$chunkInvalid(state, chunk) {
    var er;
    if (!$aaf843b25c9accaf$var$_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new $aaf843b25c9accaf$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
$aaf843b25c9accaf$var$Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
};

// backwards compatibility.
$aaf843b25c9accaf$var$Readable.prototype.setEncoding = function(enc) {
    if (!$aaf843b25c9accaf$var$StringDecoder) $aaf843b25c9accaf$var$StringDecoder = (parcelRequire("kAGu9")).StringDecoder;
    var decoder = new $aaf843b25c9accaf$var$StringDecoder(enc);
    this._readableState.decoder = decoder;
    // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding;
    // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
};
// Don't raise the hwm > 1GB
var $aaf843b25c9accaf$var$MAX_HWM = 0x40000000;
function $aaf843b25c9accaf$var$computeNewHighWaterMark(n) {
    if (n >= $aaf843b25c9accaf$var$MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = $aaf843b25c9accaf$var$MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
}
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $aaf843b25c9accaf$var$howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = $aaf843b25c9accaf$var$computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
}
// you can override either this method, or the async _read(n) below.
$aaf843b25c9accaf$var$Readable.prototype.read = function(n) {
    $aaf843b25c9accaf$var$debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false;
    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        $aaf843b25c9accaf$var$debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) $aaf843b25c9accaf$var$endReadable(this);
        else $aaf843b25c9accaf$var$emitReadable(this);
        return null;
    }
    n = $aaf843b25c9accaf$var$howMuchToRead(n, state);
    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) $aaf843b25c9accaf$var$endReadable(this);
        return null;
    }
    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    $aaf843b25c9accaf$var$debug("need readable", doRead);
    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        $aaf843b25c9accaf$var$debug("length less than watermark", doRead);
    }
    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        $aaf843b25c9accaf$var$debug("reading or ended", doRead);
    } else if (doRead) {
        $aaf843b25c9accaf$var$debug("do read");
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = $aaf843b25c9accaf$var$howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = $aaf843b25c9accaf$var$fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;
        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) $aaf843b25c9accaf$var$endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function $aaf843b25c9accaf$var$onEofChunk(stream, state) {
    $aaf843b25c9accaf$var$debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    $aaf843b25c9accaf$var$emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            $aaf843b25c9accaf$var$emitReadable_(stream);
        }
    }
}
// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function $aaf843b25c9accaf$var$emitReadable(stream) {
    var state = stream._readableState;
    $aaf843b25c9accaf$var$debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        $aaf843b25c9accaf$var$debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        $bFvJb$process.nextTick($aaf843b25c9accaf$var$emitReadable_, stream);
    }
}
function $aaf843b25c9accaf$var$emitReadable_(stream) {
    var state = stream._readableState;
    $aaf843b25c9accaf$var$debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    }
    // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    $aaf843b25c9accaf$var$flow(stream);
}
// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function $aaf843b25c9accaf$var$maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        $bFvJb$process.nextTick($aaf843b25c9accaf$var$maybeReadMore_, stream, state);
    }
}
function $aaf843b25c9accaf$var$maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        $aaf843b25c9accaf$var$debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
}
// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
$aaf843b25c9accaf$var$Readable.prototype._read = function(n) {
    $aaf843b25c9accaf$var$errorOrDestroy(this, new $aaf843b25c9accaf$var$ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
$aaf843b25c9accaf$var$Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    $aaf843b25c9accaf$var$debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $bFvJb$process.stdout && dest !== $bFvJb$process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) $bFvJb$process.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        $aaf843b25c9accaf$var$debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        $aaf843b25c9accaf$var$debug("onend");
        dest.end();
    }
    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = $aaf843b25c9accaf$var$pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        $aaf843b25c9accaf$var$debug("cleanup");
        // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
        $aaf843b25c9accaf$var$debug("ondata");
        var ret = dest.write(chunk);
        $aaf843b25c9accaf$var$debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $aaf843b25c9accaf$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                $aaf843b25c9accaf$var$debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    }
    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        $aaf843b25c9accaf$var$debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if ($aaf843b25c9accaf$var$EElistenerCount(dest, "error") === 0) $aaf843b25c9accaf$var$errorOrDestroy(dest, er);
    }
    // Make sure our error handler is attached before userland ones.
    $aaf843b25c9accaf$var$prependListener(dest, "error", onerror);
    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        $aaf843b25c9accaf$var$debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        $aaf843b25c9accaf$var$debug("unpipe");
        src.unpipe(dest);
    }
    // tell the dest that it's being piped to
    dest.emit("pipe", src);
    // start the flow if it hasn't been started already.
    if (!state.flowing) {
        $aaf843b25c9accaf$var$debug("pipe resume");
        src.resume();
    }
    return dest;
};
function $aaf843b25c9accaf$var$pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        $aaf843b25c9accaf$var$debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && $aaf843b25c9accaf$var$EElistenerCount(src, "data")) {
            state.flowing = true;
            $aaf843b25c9accaf$var$flow(src);
        }
    };
}
$aaf843b25c9accaf$var$Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    };
    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;
    // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    }
    // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    }
    // try to find the right one.
    var index = $aaf843b25c9accaf$var$indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
};
// set up data events if they are asked for
// Ensure readable listeners eventually get something
$aaf843b25c9accaf$var$Readable.prototype.on = function(ev, fn) {
    var res = $ejBL1.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0;
        // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            $aaf843b25c9accaf$var$debug("on readable", state.length, state.reading);
            if (state.length) $aaf843b25c9accaf$var$emitReadable(this);
            else if (!state.reading) $bFvJb$process.nextTick($aaf843b25c9accaf$var$nReadingNextTick, this);
        }
    }
    return res;
};
$aaf843b25c9accaf$var$Readable.prototype.addListener = $aaf843b25c9accaf$var$Readable.prototype.on;
$aaf843b25c9accaf$var$Readable.prototype.removeListener = function(ev, fn) {
    var res = $ejBL1.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $bFvJb$process.nextTick($aaf843b25c9accaf$var$updateReadableListening, this);
    return res;
};
$aaf843b25c9accaf$var$Readable.prototype.removeAllListeners = function(ev) {
    var res = $ejBL1.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $bFvJb$process.nextTick($aaf843b25c9accaf$var$updateReadableListening, this);
    return res;
};
function $aaf843b25c9accaf$var$updateReadableListening(self1) {
    var state = self1._readableState;
    state.readableListening = self1.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;
    else if (self1.listenerCount("data") > 0) self1.resume();
}
function $aaf843b25c9accaf$var$nReadingNextTick(self1) {
    $aaf843b25c9accaf$var$debug("readable nexttick read 0");
    self1.read(0);
}
// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
$aaf843b25c9accaf$var$Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        $aaf843b25c9accaf$var$debug("resume");
        // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        $aaf843b25c9accaf$var$resume(this, state);
    }
    state.paused = false;
    return this;
};
function $aaf843b25c9accaf$var$resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        $bFvJb$process.nextTick($aaf843b25c9accaf$var$resume_, stream, state);
    }
}
function $aaf843b25c9accaf$var$resume_(stream, state) {
    $aaf843b25c9accaf$var$debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    $aaf843b25c9accaf$var$flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
$aaf843b25c9accaf$var$Readable.prototype.pause = function() {
    $aaf843b25c9accaf$var$debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        $aaf843b25c9accaf$var$debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function $aaf843b25c9accaf$var$flow(stream) {
    var state = stream._readableState;
    $aaf843b25c9accaf$var$debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
}
// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
$aaf843b25c9accaf$var$Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        $aaf843b25c9accaf$var$debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        $aaf843b25c9accaf$var$debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk);
        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    });
    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
    // proxy certain important events.
    for(var n = 0; n < $aaf843b25c9accaf$var$kProxyEvents.length; n++)stream.on($aaf843b25c9accaf$var$kProxyEvents[n], this.emit.bind(this, $aaf843b25c9accaf$var$kProxyEvents[n]));
    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        $aaf843b25c9accaf$var$debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};

if (typeof Symbol === "function") $aaf843b25c9accaf$var$Readable.prototype[Symbol.asyncIterator] = function() {
    if ($aaf843b25c9accaf$var$createReadableStreamAsyncIterator === undefined) $aaf843b25c9accaf$var$createReadableStreamAsyncIterator = (parcelRequire("it4qC"));
    return $aaf843b25c9accaf$var$createReadableStreamAsyncIterator(this);
};
Object.defineProperty($aaf843b25c9accaf$var$Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty($aaf843b25c9accaf$var$Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty($aaf843b25c9accaf$var$Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
});
// exposed for testing purposes only.
$aaf843b25c9accaf$var$Readable._fromList = $aaf843b25c9accaf$var$fromList;
Object.defineProperty($aaf843b25c9accaf$var$Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
});
// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $aaf843b25c9accaf$var$fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function $aaf843b25c9accaf$var$endReadable(stream) {
    var state = stream._readableState;
    $aaf843b25c9accaf$var$debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        $bFvJb$process.nextTick($aaf843b25c9accaf$var$endReadableNT, state, stream);
    }
}
function $aaf843b25c9accaf$var$endReadableNT(state, stream) {
    $aaf843b25c9accaf$var$debug("endReadableNT", state.endEmitted, state.length);
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}

if (typeof Symbol === "function") $aaf843b25c9accaf$var$Readable.from = function(iterable, opts) {
    if ($aaf843b25c9accaf$var$from === undefined) $aaf843b25c9accaf$var$from = (parcelRequire("1YTxP"));
    return $aaf843b25c9accaf$var$from($aaf843b25c9accaf$var$Readable, iterable, opts);
};
function $aaf843b25c9accaf$var$indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

});
parcelRequire.register("ejBL1", function(module, exports) {

module.exports = $bFvJb$events.EventEmitter;

});

parcelRequire.register("fNNvm", function(module, exports) {
"use strict";

});

parcelRequire.register("6pxSr", function(module, exports) {
"use strict";
function $4aaf5b29ac861a6e$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function $4aaf5b29ac861a6e$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? $4aaf5b29ac861a6e$var$ownKeys(Object(source), !0).forEach(function(key) {
            $4aaf5b29ac861a6e$var$_defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : $4aaf5b29ac861a6e$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $4aaf5b29ac861a6e$var$_defineProperty(obj, key, value) {
    key = $4aaf5b29ac861a6e$var$_toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $4aaf5b29ac861a6e$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $4aaf5b29ac861a6e$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, $4aaf5b29ac861a6e$var$_toPropertyKey(descriptor.key), descriptor);
    }
}
function $4aaf5b29ac861a6e$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $4aaf5b29ac861a6e$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $4aaf5b29ac861a6e$var$_defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function $4aaf5b29ac861a6e$var$_toPropertyKey(arg) {
    var key = $4aaf5b29ac861a6e$var$_toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function $4aaf5b29ac861a6e$var$_toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

var $4aaf5b29ac861a6e$var$Buffer = $bFvJb$buffer.Buffer;

var $fNNvm = parcelRequire("fNNvm");
var $4aaf5b29ac861a6e$var$inspect = $fNNvm.inspect;
var $4aaf5b29ac861a6e$var$custom = $4aaf5b29ac861a6e$var$inspect && $4aaf5b29ac861a6e$var$inspect.custom || "inspect";
function $4aaf5b29ac861a6e$var$copyBuffer(src, target, offset) {
    $4aaf5b29ac861a6e$var$Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        $4aaf5b29ac861a6e$var$_classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    $4aaf5b29ac861a6e$var$_createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return $4aaf5b29ac861a6e$var$Buffer.alloc(0);
                var ret = $4aaf5b29ac861a6e$var$Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    $4aaf5b29ac861a6e$var$copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            }
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            }
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = $4aaf5b29ac861a6e$var$Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: $4aaf5b29ac861a6e$var$custom,
            value: function value(_, options) {
                return $4aaf5b29ac861a6e$var$inspect(this, $4aaf5b29ac861a6e$var$_objectSpread($4aaf5b29ac861a6e$var$_objectSpread({}, options), {}, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

});

parcelRequire.register("azknl", function(module, exports) {

"use strict";
// undocumented cb() API, needed for core, not for public API
function $7b1cfa6d6586d28f$var$destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) $bFvJb$process.nextTick($7b1cfa6d6586d28f$var$emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $bFvJb$process.nextTick($7b1cfa6d6586d28f$var$emitErrorNT, this, err);
            }
        }
        return this;
    }
    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) $bFvJb$process.nextTick($7b1cfa6d6586d28f$var$emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                $bFvJb$process.nextTick($7b1cfa6d6586d28f$var$emitErrorAndCloseNT, _this, err);
            } else $bFvJb$process.nextTick($7b1cfa6d6586d28f$var$emitCloseNT, _this);
        } else if (cb) {
            $bFvJb$process.nextTick($7b1cfa6d6586d28f$var$emitCloseNT, _this);
            cb(err);
        } else $bFvJb$process.nextTick($7b1cfa6d6586d28f$var$emitCloseNT, _this);
    });
    return this;
}
function $7b1cfa6d6586d28f$var$emitErrorAndCloseNT(self, err) {
    $7b1cfa6d6586d28f$var$emitErrorNT(self, err);
    $7b1cfa6d6586d28f$var$emitCloseNT(self);
}
function $7b1cfa6d6586d28f$var$emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function $7b1cfa6d6586d28f$var$undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function $7b1cfa6d6586d28f$var$emitErrorNT(self, err) {
    self.emit("error", err);
}
function $7b1cfa6d6586d28f$var$errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: $7b1cfa6d6586d28f$var$destroy,
    undestroy: $7b1cfa6d6586d28f$var$undestroy,
    errorOrDestroy: $7b1cfa6d6586d28f$var$errorOrDestroy
};

});

parcelRequire.register("b3MrN", function(module, exports) {
"use strict";

var $k2833 = parcelRequire("k2833");
var $80d58e2436dfc915$var$ERR_INVALID_OPT_VALUE = $k2833.codes.ERR_INVALID_OPT_VALUE;
function $80d58e2436dfc915$var$highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function $80d58e2436dfc915$var$getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = $80d58e2436dfc915$var$highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new $80d58e2436dfc915$var$ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    }
    // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: $80d58e2436dfc915$var$getHighWaterMark
};

});
parcelRequire.register("k2833", function(module, exports) {

$parcel$export(module.exports, "codes", () => $e95a3cbe4b4aed5c$export$e45cb6485273080e, (v) => $e95a3cbe4b4aed5c$export$e45cb6485273080e = v);
var $e95a3cbe4b4aed5c$export$e45cb6485273080e;
"use strict";
function $e95a3cbe4b4aed5c$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var $e95a3cbe4b4aed5c$var$codes = {};
function $e95a3cbe4b4aed5c$var$createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError = /*#__PURE__*/ function(_Base) {
        $e95a3cbe4b4aed5c$var$_inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    $e95a3cbe4b4aed5c$var$codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $e95a3cbe4b4aed5c$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $e95a3cbe4b4aed5c$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $e95a3cbe4b4aed5c$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $e95a3cbe4b4aed5c$var$includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$e95a3cbe4b4aed5c$var$createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
$e95a3cbe4b4aed5c$var$createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && $e95a3cbe4b4aed5c$var$startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if ($e95a3cbe4b4aed5c$var$endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($e95a3cbe4b4aed5c$var$oneOf(expected, "type"));
    else {
        var type = $e95a3cbe4b4aed5c$var$includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat($e95a3cbe4b4aed5c$var$oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
$e95a3cbe4b4aed5c$var$createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
$e95a3cbe4b4aed5c$var$createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
$e95a3cbe4b4aed5c$var$createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
$e95a3cbe4b4aed5c$var$createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
$e95a3cbe4b4aed5c$var$createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
$e95a3cbe4b4aed5c$var$createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
$e95a3cbe4b4aed5c$var$createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
$e95a3cbe4b4aed5c$var$createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
$e95a3cbe4b4aed5c$var$createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
$e95a3cbe4b4aed5c$var$createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
$e95a3cbe4b4aed5c$export$e45cb6485273080e = $e95a3cbe4b4aed5c$var$codes;

});


parcelRequire.register("8clxO", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

"use strict";
/*<replacement>*/ var $5f8027ff17160bc0$var$objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = $5f8027ff17160bc0$var$Duplex;

var $eG4dW = parcelRequire("eG4dW");

var $aOrJd = parcelRequire("aOrJd");

(parcelRequire("4gPgC"))($5f8027ff17160bc0$var$Duplex, $eG4dW);
// Allow the keys array to be GC'ed.
var $5f8027ff17160bc0$var$keys = $5f8027ff17160bc0$var$objectKeys($aOrJd.prototype);
for(var $5f8027ff17160bc0$var$v = 0; $5f8027ff17160bc0$var$v < $5f8027ff17160bc0$var$keys.length; $5f8027ff17160bc0$var$v++){
    var $5f8027ff17160bc0$var$method = $5f8027ff17160bc0$var$keys[$5f8027ff17160bc0$var$v];
    if (!$5f8027ff17160bc0$var$Duplex.prototype[$5f8027ff17160bc0$var$method]) $5f8027ff17160bc0$var$Duplex.prototype[$5f8027ff17160bc0$var$method] = $aOrJd.prototype[$5f8027ff17160bc0$var$method];
}
function $5f8027ff17160bc0$var$Duplex(options) {
    if (!(this instanceof $5f8027ff17160bc0$var$Duplex)) return new $5f8027ff17160bc0$var$Duplex(options);
    $eG4dW.call(this, options);
    $aOrJd.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", $5f8027ff17160bc0$var$onend);
        }
    }
}
Object.defineProperty($5f8027ff17160bc0$var$Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty($5f8027ff17160bc0$var$Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty($5f8027ff17160bc0$var$Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
// the no-half-open enforcer
function $5f8027ff17160bc0$var$onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return;
    // no more data can be written.
    // But allow more writes to happen in this tick.
    $bFvJb$process.nextTick($5f8027ff17160bc0$var$onEndNT, this);
}
function $5f8027ff17160bc0$var$onEndNT(self) {
    self.end();
}
Object.defineProperty($5f8027ff17160bc0$var$Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

});
parcelRequire.register("aOrJd", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

"use strict";
module.exports = $7df4152a11099973$var$Writable;
/* <replacement> */ function $7df4152a11099973$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
}
// It seems a linked list but it is not
// there will be only 2 of these for each stream
function $7df4152a11099973$var$CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        $7df4152a11099973$var$onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $7df4152a11099973$var$Duplex;
/*</replacement>*/ $7df4152a11099973$var$Writable.WritableState = $7df4152a11099973$var$WritableState;

/*<replacement>*/ var $7df4152a11099973$var$internalUtil = {
    deprecate: (parcelRequire("e9eux"))
};

var $ejBL1 = parcelRequire("ejBL1");

var $7df4152a11099973$require$Buffer = $bFvJb$buffer.Buffer;
var $7df4152a11099973$var$OurUint8Array = (typeof $parcel$global !== "undefined" ? $parcel$global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function $7df4152a11099973$var$_uint8ArrayToBuffer(chunk) {
    return $7df4152a11099973$require$Buffer.from(chunk);
}
function $7df4152a11099973$var$_isUint8Array(obj) {
    return $7df4152a11099973$require$Buffer.isBuffer(obj) || obj instanceof $7df4152a11099973$var$OurUint8Array;
}

var $azknl = parcelRequire("azknl");

var $b3MrN = parcelRequire("b3MrN");
var $7df4152a11099973$var$getHighWaterMark = $b3MrN.getHighWaterMark;

var $k2833 = parcelRequire("k2833");
var $7df4152a11099973$require$_require$codes = $k2833.codes;
var $7df4152a11099973$var$ERR_INVALID_ARG_TYPE = $7df4152a11099973$require$_require$codes.ERR_INVALID_ARG_TYPE, $7df4152a11099973$var$ERR_METHOD_NOT_IMPLEMENTED = $7df4152a11099973$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $7df4152a11099973$var$ERR_MULTIPLE_CALLBACK = $7df4152a11099973$require$_require$codes.ERR_MULTIPLE_CALLBACK, $7df4152a11099973$var$ERR_STREAM_CANNOT_PIPE = $7df4152a11099973$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $7df4152a11099973$var$ERR_STREAM_DESTROYED = $7df4152a11099973$require$_require$codes.ERR_STREAM_DESTROYED, $7df4152a11099973$var$ERR_STREAM_NULL_VALUES = $7df4152a11099973$require$_require$codes.ERR_STREAM_NULL_VALUES, $7df4152a11099973$var$ERR_STREAM_WRITE_AFTER_END = $7df4152a11099973$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $7df4152a11099973$var$ERR_UNKNOWN_ENCODING = $7df4152a11099973$require$_require$codes.ERR_UNKNOWN_ENCODING;
var $7df4152a11099973$var$errorOrDestroy = $azknl.errorOrDestroy;

(parcelRequire("4gPgC"))($7df4152a11099973$var$Writable, $ejBL1);
function $7df4152a11099973$var$nop() {}

function $7df4152a11099973$var$WritableState(options, stream, isDuplex) {
    $7df4152a11099973$var$Duplex = $7df4152a11099973$var$Duplex || (parcelRequire("8clxO"));
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $7df4152a11099973$var$Duplex;
    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $7df4152a11099973$var$getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
    // if _final has been called
    this.finalCalled = false;
    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;
    // has it been destroyed
    this.destroyed = false;
    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;
    // a flag to see when we're in the middle of a write.
    this.writing = false;
    // when true all writes will be buffered until .uncork() call
    this.corked = 0;
    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;
    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;
    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $7df4152a11099973$var$onwrite(stream, er);
    };
    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;
    // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;
    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;
    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy;
    // count buffered requests
    this.bufferedRequestCount = 0;
    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $7df4152a11099973$var$CorkedRequest(this);
}
$7df4152a11099973$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($7df4152a11099973$var$WritableState.prototype, "buffer", {
            get: $7df4152a11099973$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})();
// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $7df4152a11099973$var$realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    $7df4152a11099973$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($7df4152a11099973$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($7df4152a11099973$var$realHasInstance.call(this, object)) return true;
            if (this !== $7df4152a11099973$var$Writable) return false;
            return object && object._writableState instanceof $7df4152a11099973$var$WritableState;
        }
    });
} else $7df4152a11099973$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};

function $7df4152a11099973$var$Writable(options) {
    $7df4152a11099973$var$Duplex = $7df4152a11099973$var$Duplex || (parcelRequire("8clxO"));
    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $7df4152a11099973$var$Duplex;
    if (!isDuplex && !$7df4152a11099973$var$realHasInstance.call($7df4152a11099973$var$Writable, this)) return new $7df4152a11099973$var$Writable(options);
    this._writableState = new $7df4152a11099973$var$WritableState(options, this, isDuplex);
    // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    $ejBL1.call(this);
}
// Otherwise people can pipe Writable streams, which is just wrong.
$7df4152a11099973$var$Writable.prototype.pipe = function() {
    $7df4152a11099973$var$errorOrDestroy(this, new $7df4152a11099973$var$ERR_STREAM_CANNOT_PIPE());
};
function $7df4152a11099973$var$writeAfterEnd(stream, cb) {
    var er = new $7df4152a11099973$var$ERR_STREAM_WRITE_AFTER_END();
    // TODO: defer error events consistently everywhere, not just the cb
    $7df4152a11099973$var$errorOrDestroy(stream, er);
    $bFvJb$process.nextTick(cb, er);
}
// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $7df4152a11099973$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $7df4152a11099973$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new $7df4152a11099973$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        $7df4152a11099973$var$errorOrDestroy(stream, er);
        $bFvJb$process.nextTick(cb, er);
        return false;
    }
    return true;
}
$7df4152a11099973$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $7df4152a11099973$var$_isUint8Array(chunk);
    if (isBuf && !$7df4152a11099973$require$Buffer.isBuffer(chunk)) chunk = $7df4152a11099973$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = $7df4152a11099973$var$nop;
    if (state.ending) $7df4152a11099973$var$writeAfterEnd(this, cb);
    else if (isBuf || $7df4152a11099973$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $7df4152a11099973$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$7df4152a11099973$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$7df4152a11099973$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $7df4152a11099973$var$clearBuffer(this, state);
    }
};
$7df4152a11099973$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new $7df4152a11099973$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($7df4152a11099973$var$Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $7df4152a11099973$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = $7df4152a11099973$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($7df4152a11099973$var$Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $7df4152a11099973$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $7df4152a11099973$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $7df4152a11099973$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $7df4152a11099973$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $7df4152a11099973$var$ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $7df4152a11099973$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $bFvJb$process.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        $bFvJb$process.nextTick($7df4152a11099973$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $7df4152a11099973$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $7df4152a11099973$var$errorOrDestroy(stream, er);
        // this can emit finish, but finish must
        // always follow error
        $7df4152a11099973$var$finishMaybe(stream, state);
    }
}
function $7df4152a11099973$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $7df4152a11099973$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new $7df4152a11099973$var$ERR_MULTIPLE_CALLBACK();
    $7df4152a11099973$var$onwriteStateUpdate(state);
    if (er) $7df4152a11099973$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $7df4152a11099973$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $7df4152a11099973$var$clearBuffer(stream, state);
        if (sync) $bFvJb$process.nextTick($7df4152a11099973$var$afterWrite, stream, state, finished, cb);
        else $7df4152a11099973$var$afterWrite(stream, state, finished, cb);
    }
}
function $7df4152a11099973$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $7df4152a11099973$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $7df4152a11099973$var$finishMaybe(stream, state);
}
// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $7df4152a11099973$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
}
// if there's something in the buffer waiting, then process it
function $7df4152a11099973$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $7df4152a11099973$var$doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $7df4152a11099973$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $7df4152a11099973$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$7df4152a11099973$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $7df4152a11099973$var$ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
$7df4152a11099973$var$Writable.prototype._writev = null;
$7df4152a11099973$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
    // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    }
    // ignore unnecessary end() calls.
    if (!state.ending) $7df4152a11099973$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($7df4152a11099973$var$Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function $7df4152a11099973$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $7df4152a11099973$var$callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) $7df4152a11099973$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        $7df4152a11099973$var$finishMaybe(stream, state);
    });
}
function $7df4152a11099973$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $bFvJb$process.nextTick($7df4152a11099973$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function $7df4152a11099973$var$finishMaybe(stream, state) {
    var need = $7df4152a11099973$var$needFinish(state);
    if (need) {
        $7df4152a11099973$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $7df4152a11099973$var$endWritable(stream, state, cb) {
    state.ending = true;
    $7df4152a11099973$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $bFvJb$process.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $7df4152a11099973$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    }
    // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($7df4152a11099973$var$Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$7df4152a11099973$var$Writable.prototype.destroy = $azknl.destroy;
$7df4152a11099973$var$Writable.prototype._undestroy = $azknl.undestroy;
$7df4152a11099973$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

});
parcelRequire.register("e9eux", function(module, exports) {
/**
 * Module exports.
 */ module.exports = $a4cd25b17530f8a7$var$deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function $a4cd25b17530f8a7$var$deprecate(fn, msg) {
    if ($a4cd25b17530f8a7$var$config("noDeprecation")) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if ($a4cd25b17530f8a7$var$config("throwDeprecation")) throw new Error(msg);
            else if ($a4cd25b17530f8a7$var$config("traceDeprecation")) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function $a4cd25b17530f8a7$var$config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!$parcel$global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = $parcel$global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === "true";
}

});



parcelRequire.register("kAGu9", function(module, exports) {

$parcel$export(module.exports, "StringDecoder", () => $03de5319638d1f4e$export$63a7aa211a91ed69, (v) => $03de5319638d1f4e$export$63a7aa211a91ed69 = v);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
var $03de5319638d1f4e$export$63a7aa211a91ed69;
"use strict";

var $iUdYW = parcelRequire("iUdYW");
var $03de5319638d1f4e$require$Buffer = $iUdYW.Buffer;
/*</replacement>*/ var $03de5319638d1f4e$var$isEncoding = $03de5319638d1f4e$require$Buffer.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch(encoding && encoding.toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return true;
        default:
            return false;
    }
};
function $03de5319638d1f4e$var$_normalizeEncoding(enc) {
    if (!enc) return "utf8";
    var retried;
    while(true)switch(enc){
        case "utf8":
        case "utf-8":
            return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return "utf16le";
        case "latin1":
        case "binary":
            return "latin1";
        case "base64":
        case "ascii":
        case "hex":
            return enc;
        default:
            if (retried) return; // undefined
            enc = ("" + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function $03de5319638d1f4e$var$normalizeEncoding(enc) {
    var nenc = $03de5319638d1f4e$var$_normalizeEncoding(enc);
    if (typeof nenc !== "string" && ($03de5319638d1f4e$require$Buffer.isEncoding === $03de5319638d1f4e$var$isEncoding || !$03de5319638d1f4e$var$isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
}
$03de5319638d1f4e$export$63a7aa211a91ed69 = $03de5319638d1f4e$var$StringDecoder;
function $03de5319638d1f4e$var$StringDecoder(encoding) {
    this.encoding = $03de5319638d1f4e$var$normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case "utf16le":
            this.text = $03de5319638d1f4e$var$utf16Text;
            this.end = $03de5319638d1f4e$var$utf16End;
            nb = 4;
            break;
        case "utf8":
            this.fillLast = $03de5319638d1f4e$var$utf8FillLast;
            nb = 4;
            break;
        case "base64":
            this.text = $03de5319638d1f4e$var$base64Text;
            this.end = $03de5319638d1f4e$var$base64End;
            nb = 3;
            break;
        default:
            this.write = $03de5319638d1f4e$var$simpleWrite;
            this.end = $03de5319638d1f4e$var$simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = $03de5319638d1f4e$require$Buffer.allocUnsafe(nb);
}
$03de5319638d1f4e$var$StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return "";
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
};
$03de5319638d1f4e$var$StringDecoder.prototype.end = $03de5319638d1f4e$var$utf8End;
// Returns only complete characters in a Buffer
$03de5319638d1f4e$var$StringDecoder.prototype.text = $03de5319638d1f4e$var$utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
$03de5319638d1f4e$var$StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function $03de5319638d1f4e$var$utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function $03de5319638d1f4e$var$utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = $03de5319638d1f4e$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $03de5319638d1f4e$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $03de5319638d1f4e$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function $03de5319638d1f4e$var$utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return "�";
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return "�";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return "�";
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function $03de5319638d1f4e$var$utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = $03de5319638d1f4e$var$utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function $03de5319638d1f4e$var$utf8Text(buf, i) {
    var total = $03de5319638d1f4e$var$utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function $03de5319638d1f4e$var$utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + "�";
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function $03de5319638d1f4e$var$utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function $03de5319638d1f4e$var$utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
}
function $03de5319638d1f4e$var$base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
}
function $03de5319638d1f4e$var$base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function $03de5319638d1f4e$var$simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function $03de5319638d1f4e$var$simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
}

});

parcelRequire.register("it4qC", function(module, exports) {

"use strict";
var $d71e5ece087a09cd$var$_Object$setPrototypeO;
function $d71e5ece087a09cd$var$_defineProperty(obj, key, value) {
    key = $d71e5ece087a09cd$var$_toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $d71e5ece087a09cd$var$_toPropertyKey(arg) {
    var key = $d71e5ece087a09cd$var$_toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function $d71e5ece087a09cd$var$_toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

var $lxIgQ = parcelRequire("lxIgQ");
var $d71e5ece087a09cd$var$kLastResolve = Symbol("lastResolve");
var $d71e5ece087a09cd$var$kLastReject = Symbol("lastReject");
var $d71e5ece087a09cd$var$kError = Symbol("error");
var $d71e5ece087a09cd$var$kEnded = Symbol("ended");
var $d71e5ece087a09cd$var$kLastPromise = Symbol("lastPromise");
var $d71e5ece087a09cd$var$kHandlePromise = Symbol("handlePromise");
var $d71e5ece087a09cd$var$kStream = Symbol("stream");
function $d71e5ece087a09cd$var$createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function $d71e5ece087a09cd$var$readAndResolve(iter) {
    var resolve = iter[$d71e5ece087a09cd$var$kLastResolve];
    if (resolve !== null) {
        var data = iter[$d71e5ece087a09cd$var$kStream].read();
        // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[$d71e5ece087a09cd$var$kLastPromise] = null;
            iter[$d71e5ece087a09cd$var$kLastResolve] = null;
            iter[$d71e5ece087a09cd$var$kLastReject] = null;
            resolve($d71e5ece087a09cd$var$createIterResult(data, false));
        }
    }
}
function $d71e5ece087a09cd$var$onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    $bFvJb$process.nextTick($d71e5ece087a09cd$var$readAndResolve, iter);
}
function $d71e5ece087a09cd$var$wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[$d71e5ece087a09cd$var$kEnded]) {
                resolve($d71e5ece087a09cd$var$createIterResult(undefined, true));
                return;
            }
            iter[$d71e5ece087a09cd$var$kHandlePromise](resolve, reject);
        }, reject);
    };
}
var $d71e5ece087a09cd$var$AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var $d71e5ece087a09cd$var$ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(($d71e5ece087a09cd$var$_Object$setPrototypeO = {
    get stream () {
        return this[$d71e5ece087a09cd$var$kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[$d71e5ece087a09cd$var$kError];
        if (error !== null) return Promise.reject(error);
        if (this[$d71e5ece087a09cd$var$kEnded]) return Promise.resolve($d71e5ece087a09cd$var$createIterResult(undefined, true));
        if (this[$d71e5ece087a09cd$var$kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            $bFvJb$process.nextTick(function() {
                if (_this[$d71e5ece087a09cd$var$kError]) reject(_this[$d71e5ece087a09cd$var$kError]);
                else resolve($d71e5ece087a09cd$var$createIterResult(undefined, true));
            });
        });
        // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[$d71e5ece087a09cd$var$kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise($d71e5ece087a09cd$var$wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[$d71e5ece087a09cd$var$kStream].read();
            if (data !== null) return Promise.resolve($d71e5ece087a09cd$var$createIterResult(data, false));
            promise = new Promise(this[$d71e5ece087a09cd$var$kHandlePromise]);
        }
        this[$d71e5ece087a09cd$var$kLastPromise] = promise;
        return promise;
    }
}, $d71e5ece087a09cd$var$_defineProperty($d71e5ece087a09cd$var$_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), $d71e5ece087a09cd$var$_defineProperty($d71e5ece087a09cd$var$_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[$d71e5ece087a09cd$var$kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve($d71e5ece087a09cd$var$createIterResult(undefined, true));
        });
    });
}), $d71e5ece087a09cd$var$_Object$setPrototypeO), $d71e5ece087a09cd$var$AsyncIteratorPrototype);
var $d71e5ece087a09cd$var$createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create($d71e5ece087a09cd$var$ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, $d71e5ece087a09cd$var$_defineProperty(_Object$create, $d71e5ece087a09cd$var$kStream, {
        value: stream,
        writable: true
    }), $d71e5ece087a09cd$var$_defineProperty(_Object$create, $d71e5ece087a09cd$var$kLastResolve, {
        value: null,
        writable: true
    }), $d71e5ece087a09cd$var$_defineProperty(_Object$create, $d71e5ece087a09cd$var$kLastReject, {
        value: null,
        writable: true
    }), $d71e5ece087a09cd$var$_defineProperty(_Object$create, $d71e5ece087a09cd$var$kError, {
        value: null,
        writable: true
    }), $d71e5ece087a09cd$var$_defineProperty(_Object$create, $d71e5ece087a09cd$var$kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), $d71e5ece087a09cd$var$_defineProperty(_Object$create, $d71e5ece087a09cd$var$kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[$d71e5ece087a09cd$var$kStream].read();
            if (data) {
                iterator[$d71e5ece087a09cd$var$kLastPromise] = null;
                iterator[$d71e5ece087a09cd$var$kLastResolve] = null;
                iterator[$d71e5ece087a09cd$var$kLastReject] = null;
                resolve($d71e5ece087a09cd$var$createIterResult(data, false));
            } else {
                iterator[$d71e5ece087a09cd$var$kLastResolve] = resolve;
                iterator[$d71e5ece087a09cd$var$kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[$d71e5ece087a09cd$var$kLastPromise] = null;
    $lxIgQ(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[$d71e5ece087a09cd$var$kLastReject];
            // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[$d71e5ece087a09cd$var$kLastPromise] = null;
                iterator[$d71e5ece087a09cd$var$kLastResolve] = null;
                iterator[$d71e5ece087a09cd$var$kLastReject] = null;
                reject(err);
            }
            iterator[$d71e5ece087a09cd$var$kError] = err;
            return;
        }
        var resolve = iterator[$d71e5ece087a09cd$var$kLastResolve];
        if (resolve !== null) {
            iterator[$d71e5ece087a09cd$var$kLastPromise] = null;
            iterator[$d71e5ece087a09cd$var$kLastResolve] = null;
            iterator[$d71e5ece087a09cd$var$kLastReject] = null;
            resolve($d71e5ece087a09cd$var$createIterResult(undefined, true));
        }
        iterator[$d71e5ece087a09cd$var$kEnded] = true;
    });
    stream.on("readable", $d71e5ece087a09cd$var$onReadable.bind(null, iterator));
    return iterator;
};
module.exports = $d71e5ece087a09cd$var$createReadableStreamAsyncIterator;

});
parcelRequire.register("lxIgQ", function(module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";

var $k2833 = parcelRequire("k2833");
var $faef0542e476bc7f$var$ERR_STREAM_PREMATURE_CLOSE = $k2833.codes.ERR_STREAM_PREMATURE_CLOSE;
function $faef0542e476bc7f$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function $faef0542e476bc7f$var$noop() {}
function $faef0542e476bc7f$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function $faef0542e476bc7f$var$eos(stream, opts, callback) {
    if (typeof opts === "function") return $faef0542e476bc7f$var$eos(stream, null, opts);
    if (!opts) opts = {};
    callback = $faef0542e476bc7f$var$once(callback || $faef0542e476bc7f$var$noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new $faef0542e476bc7f$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new $faef0542e476bc7f$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if ($faef0542e476bc7f$var$isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = $faef0542e476bc7f$var$eos;

});


parcelRequire.register("1YTxP", function(module, exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

});


parcelRequire.register("87IRB", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = $5ea1c724ef619829$var$Transform;

var $k2833 = parcelRequire("k2833");
var $5ea1c724ef619829$require$_require$codes = $k2833.codes;
var $5ea1c724ef619829$var$ERR_METHOD_NOT_IMPLEMENTED = $5ea1c724ef619829$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $5ea1c724ef619829$var$ERR_MULTIPLE_CALLBACK = $5ea1c724ef619829$require$_require$codes.ERR_MULTIPLE_CALLBACK, $5ea1c724ef619829$var$ERR_TRANSFORM_ALREADY_TRANSFORMING = $5ea1c724ef619829$require$_require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, $5ea1c724ef619829$var$ERR_TRANSFORM_WITH_LENGTH_0 = $5ea1c724ef619829$require$_require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var $8clxO = parcelRequire("8clxO");

(parcelRequire("4gPgC"))($5ea1c724ef619829$var$Transform, $8clxO);
function $5ea1c724ef619829$var$afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new $5ea1c724ef619829$var$ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function $5ea1c724ef619829$var$Transform(options) {
    if (!(this instanceof $5ea1c724ef619829$var$Transform)) return new $5ea1c724ef619829$var$Transform(options);
    $8clxO.call(this, options);
    this._transformState = {
        afterTransform: $5ea1c724ef619829$var$afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    };
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    }
    // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", $5ea1c724ef619829$var$prefinish);
}
function $5ea1c724ef619829$var$prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        $5ea1c724ef619829$var$done(_this, er, data);
    });
    else $5ea1c724ef619829$var$done(this, null, null);
}
$5ea1c724ef619829$var$Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return $8clxO.prototype.push.call(this, chunk, encoding);
};
// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
$5ea1c724ef619829$var$Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new $5ea1c724ef619829$var$ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
$5ea1c724ef619829$var$Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
};
// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
$5ea1c724ef619829$var$Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
$5ea1c724ef619829$var$Transform.prototype._destroy = function(err, cb) {
    $8clxO.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function $5ea1c724ef619829$var$done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);
    // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new $5ea1c724ef619829$var$ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new $5ea1c724ef619829$var$ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

});

parcelRequire.register("jjHf0", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = $e1015574538a3dbe$var$PassThrough;

var $87IRB = parcelRequire("87IRB");

(parcelRequire("4gPgC"))($e1015574538a3dbe$var$PassThrough, $87IRB);
function $e1015574538a3dbe$var$PassThrough(options) {
    if (!(this instanceof $e1015574538a3dbe$var$PassThrough)) return new $e1015574538a3dbe$var$PassThrough(options);
    $87IRB.call(this, options);
}
$e1015574538a3dbe$var$PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

});

parcelRequire.register("fPe99", function(module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var $b85697a2fbfaa0af$var$eos;
function $b85697a2fbfaa0af$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}

var $k2833 = parcelRequire("k2833");
var $b85697a2fbfaa0af$require$_require$codes = $k2833.codes;
var $b85697a2fbfaa0af$var$ERR_MISSING_ARGS = $b85697a2fbfaa0af$require$_require$codes.ERR_MISSING_ARGS, $b85697a2fbfaa0af$var$ERR_STREAM_DESTROYED = $b85697a2fbfaa0af$require$_require$codes.ERR_STREAM_DESTROYED;
function $b85697a2fbfaa0af$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $b85697a2fbfaa0af$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}

function $b85697a2fbfaa0af$var$destroyer(stream, reading, writing, callback) {
    callback = $b85697a2fbfaa0af$var$once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if ($b85697a2fbfaa0af$var$eos === undefined) $b85697a2fbfaa0af$var$eos = (parcelRequire("lxIgQ"));
    $b85697a2fbfaa0af$var$eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true;
        // request.destroy just do .end - .abort is what we want
        if ($b85697a2fbfaa0af$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new $b85697a2fbfaa0af$var$ERR_STREAM_DESTROYED("pipe"));
    };
}
function $b85697a2fbfaa0af$var$call(fn) {
    fn();
}
function $b85697a2fbfaa0af$var$pipe(from, to) {
    return from.pipe(to);
}
function $b85697a2fbfaa0af$var$popCallback(streams) {
    if (!streams.length) return $b85697a2fbfaa0af$var$noop;
    if (typeof streams[streams.length - 1] !== "function") return $b85697a2fbfaa0af$var$noop;
    return streams.pop();
}
function $b85697a2fbfaa0af$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = $b85697a2fbfaa0af$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $b85697a2fbfaa0af$var$ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return $b85697a2fbfaa0af$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($b85697a2fbfaa0af$var$call);
            if (reading) return;
            destroys.forEach($b85697a2fbfaa0af$var$call);
            callback(error);
        });
    });
    return streams.reduce($b85697a2fbfaa0af$var$pipe);
}
module.exports = $b85697a2fbfaa0af$var$pipeline;

});




parcelRequire.register("hwcuu", function(module, exports) {
"use strict";

var $cc0f1d3adb9eeb67$require$Buffer = $bFvJb$buffer.Buffer;

var $4gPgC = parcelRequire("4gPgC");

var $lPm3p = parcelRequire("lPm3p");
var $cc0f1d3adb9eeb67$var$ARRAY16 = new Array(16);
var $cc0f1d3adb9eeb67$var$zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var $cc0f1d3adb9eeb67$var$zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var $cc0f1d3adb9eeb67$var$sl = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var $cc0f1d3adb9eeb67$var$sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];
var $cc0f1d3adb9eeb67$var$hl = [
    0x00000000,
    0x5a827999,
    0x6ed9eba1,
    0x8f1bbcdc,
    0xa953fd4e
];
var $cc0f1d3adb9eeb67$var$hr = [
    0x50a28be6,
    0x5c4dd124,
    0x6d703ef3,
    0x7a6d76e9,
    0x00000000
];
function $cc0f1d3adb9eeb67$var$RIPEMD160() {
    $lPm3p.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
}
$4gPgC($cc0f1d3adb9eeb67$var$RIPEMD160, $lPm3p);
$cc0f1d3adb9eeb67$var$RIPEMD160.prototype._update = function() {
    var words = $cc0f1d3adb9eeb67$var$ARRAY16;
    for(var j = 0; j < 16; ++j)words[j] = this._block.readInt32LE(j * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    // computation
    for(var i = 0; i < 80; i += 1){
        var tl;
        var tr;
        if (i < 16) {
            tl = $cc0f1d3adb9eeb67$var$fn1(al, bl, cl, dl, el, words[$cc0f1d3adb9eeb67$var$zl[i]], $cc0f1d3adb9eeb67$var$hl[0], $cc0f1d3adb9eeb67$var$sl[i]);
            tr = $cc0f1d3adb9eeb67$var$fn5(ar, br, cr, dr, er, words[$cc0f1d3adb9eeb67$var$zr[i]], $cc0f1d3adb9eeb67$var$hr[0], $cc0f1d3adb9eeb67$var$sr[i]);
        } else if (i < 32) {
            tl = $cc0f1d3adb9eeb67$var$fn2(al, bl, cl, dl, el, words[$cc0f1d3adb9eeb67$var$zl[i]], $cc0f1d3adb9eeb67$var$hl[1], $cc0f1d3adb9eeb67$var$sl[i]);
            tr = $cc0f1d3adb9eeb67$var$fn4(ar, br, cr, dr, er, words[$cc0f1d3adb9eeb67$var$zr[i]], $cc0f1d3adb9eeb67$var$hr[1], $cc0f1d3adb9eeb67$var$sr[i]);
        } else if (i < 48) {
            tl = $cc0f1d3adb9eeb67$var$fn3(al, bl, cl, dl, el, words[$cc0f1d3adb9eeb67$var$zl[i]], $cc0f1d3adb9eeb67$var$hl[2], $cc0f1d3adb9eeb67$var$sl[i]);
            tr = $cc0f1d3adb9eeb67$var$fn3(ar, br, cr, dr, er, words[$cc0f1d3adb9eeb67$var$zr[i]], $cc0f1d3adb9eeb67$var$hr[2], $cc0f1d3adb9eeb67$var$sr[i]);
        } else if (i < 64) {
            tl = $cc0f1d3adb9eeb67$var$fn4(al, bl, cl, dl, el, words[$cc0f1d3adb9eeb67$var$zl[i]], $cc0f1d3adb9eeb67$var$hl[3], $cc0f1d3adb9eeb67$var$sl[i]);
            tr = $cc0f1d3adb9eeb67$var$fn2(ar, br, cr, dr, er, words[$cc0f1d3adb9eeb67$var$zr[i]], $cc0f1d3adb9eeb67$var$hr[3], $cc0f1d3adb9eeb67$var$sr[i]);
        } else {
            tl = $cc0f1d3adb9eeb67$var$fn5(al, bl, cl, dl, el, words[$cc0f1d3adb9eeb67$var$zl[i]], $cc0f1d3adb9eeb67$var$hl[4], $cc0f1d3adb9eeb67$var$sl[i]);
            tr = $cc0f1d3adb9eeb67$var$fn1(ar, br, cr, dr, er, words[$cc0f1d3adb9eeb67$var$zr[i]], $cc0f1d3adb9eeb67$var$hr[4], $cc0f1d3adb9eeb67$var$sr[i]);
        }
        al = el;
        el = dl;
        dl = $cc0f1d3adb9eeb67$var$rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = $cc0f1d3adb9eeb67$var$rotl(cr, 10);
        cr = br;
        br = tr;
    }
    // update state
    var t = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t;
};
$cc0f1d3adb9eeb67$var$RIPEMD160.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = $cc0f1d3adb9eeb67$require$Buffer.alloc ? $cc0f1d3adb9eeb67$require$Buffer.alloc(20) : new $cc0f1d3adb9eeb67$require$Buffer(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
};
function $cc0f1d3adb9eeb67$var$rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function $cc0f1d3adb9eeb67$var$fn1(a, b, c, d, e, m, k, s) {
    return $cc0f1d3adb9eeb67$var$rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}
function $cc0f1d3adb9eeb67$var$fn2(a, b, c, d, e, m, k, s) {
    return $cc0f1d3adb9eeb67$var$rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}
function $cc0f1d3adb9eeb67$var$fn3(a, b, c, d, e, m, k, s) {
    return $cc0f1d3adb9eeb67$var$rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}
function $cc0f1d3adb9eeb67$var$fn4(a, b, c, d, e, m, k, s) {
    return $cc0f1d3adb9eeb67$var$rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}
function $cc0f1d3adb9eeb67$var$fn5(a, b, c, d, e, m, k, s) {
    return $cc0f1d3adb9eeb67$var$rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}
module.exports = $cc0f1d3adb9eeb67$var$RIPEMD160;

});

parcelRequire.register("fV0g8", function(module, exports) {
var $b96c615768d2b981$var$exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = $b96c615768d2b981$var$exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + " is not supported (we accept pull requests)");
    return new Algorithm();
};

$b96c615768d2b981$var$exports.sha = (parcelRequire("9FlJL"));

$b96c615768d2b981$var$exports.sha1 = (parcelRequire("7SC3y"));

$b96c615768d2b981$var$exports.sha224 = (parcelRequire("22dgp"));

$b96c615768d2b981$var$exports.sha256 = (parcelRequire("aLW2o"));

$b96c615768d2b981$var$exports.sha384 = (parcelRequire("2qL4e"));

$b96c615768d2b981$var$exports.sha512 = (parcelRequire("Gt9Nk"));

});
parcelRequire.register("9FlJL", function(module, exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */ 
var $4gPgC = parcelRequire("4gPgC");

var $hh8eh = parcelRequire("hh8eh");

var $iUdYW = parcelRequire("iUdYW");
var $7098cdef2aaf64cd$require$Buffer = $iUdYW.Buffer;
var $7098cdef2aaf64cd$var$K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var $7098cdef2aaf64cd$var$W = new Array(80);
function $7098cdef2aaf64cd$var$Sha() {
    this.init();
    this._w = $7098cdef2aaf64cd$var$W;
    $hh8eh.call(this, 64, 56);
}
$4gPgC($7098cdef2aaf64cd$var$Sha, $hh8eh);
$7098cdef2aaf64cd$var$Sha.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function $7098cdef2aaf64cd$var$rotl5(num) {
    return num << 5 | num >>> 27;
}
function $7098cdef2aaf64cd$var$rotl30(num) {
    return num << 30 | num >>> 2;
}
function $7098cdef2aaf64cd$var$ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
$7098cdef2aaf64cd$var$Sha.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = $7098cdef2aaf64cd$var$rotl5(a) + $7098cdef2aaf64cd$var$ft(s, b, c, d) + e + W[j] + $7098cdef2aaf64cd$var$K[s] | 0;
        e = d;
        d = c;
        c = $7098cdef2aaf64cd$var$rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
$7098cdef2aaf64cd$var$Sha.prototype._hash = function() {
    var H = $7098cdef2aaf64cd$require$Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = $7098cdef2aaf64cd$var$Sha;

});
parcelRequire.register("hh8eh", function(module, exports) {

var $iUdYW = parcelRequire("iUdYW");
var $c93a685f4e394b5c$require$Buffer = $iUdYW.Buffer;
// prototype class for hash functions
function $c93a685f4e394b5c$var$Hash(blockSize, finalSize) {
    this._block = $c93a685f4e394b5c$require$Buffer.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
}
$c93a685f4e394b5c$var$Hash.prototype.update = function(data, enc) {
    if (typeof data === "string") {
        enc = enc || "utf8";
        data = $c93a685f4e394b5c$require$Buffer.from(data, enc);
    }
    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;
    for(var offset = 0; offset < length;){
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for(var i = 0; i < remainder; i++)block[assigned + i] = data[offset + i];
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) this._update(block);
    }
    this._len += length;
    return this;
};
$c93a685f4e394b5c$var$Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 0x80;
    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
    }
    var bits = this._len * 8;
    // uint32
    if (bits <= 0xffffffff) this._block.writeUInt32BE(bits, this._blockSize - 4);
    else {
        var lowBits = (bits & 0xffffffff) >>> 0;
        var highBits = (bits - lowBits) / 0x100000000;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
};
$c93a685f4e394b5c$var$Hash.prototype._update = function() {
    throw new Error("_update must be implemented by subclass");
};
module.exports = $c93a685f4e394b5c$var$Hash;

});


parcelRequire.register("7SC3y", function(module, exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */ 
var $4gPgC = parcelRequire("4gPgC");

var $hh8eh = parcelRequire("hh8eh");

var $iUdYW = parcelRequire("iUdYW");
var $5bcb18c48934bc69$require$Buffer = $iUdYW.Buffer;
var $5bcb18c48934bc69$var$K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var $5bcb18c48934bc69$var$W = new Array(80);
function $5bcb18c48934bc69$var$Sha1() {
    this.init();
    this._w = $5bcb18c48934bc69$var$W;
    $hh8eh.call(this, 64, 56);
}
$4gPgC($5bcb18c48934bc69$var$Sha1, $hh8eh);
$5bcb18c48934bc69$var$Sha1.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function $5bcb18c48934bc69$var$rotl1(num) {
    return num << 1 | num >>> 31;
}
function $5bcb18c48934bc69$var$rotl5(num) {
    return num << 5 | num >>> 27;
}
function $5bcb18c48934bc69$var$rotl30(num) {
    return num << 30 | num >>> 2;
}
function $5bcb18c48934bc69$var$ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
$5bcb18c48934bc69$var$Sha1.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = $5bcb18c48934bc69$var$rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = $5bcb18c48934bc69$var$rotl5(a) + $5bcb18c48934bc69$var$ft(s, b, c, d) + e + W[j] + $5bcb18c48934bc69$var$K[s] | 0;
        e = d;
        d = c;
        c = $5bcb18c48934bc69$var$rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
$5bcb18c48934bc69$var$Sha1.prototype._hash = function() {
    var H = $5bcb18c48934bc69$require$Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = $5bcb18c48934bc69$var$Sha1;

});

parcelRequire.register("22dgp", function(module, exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ 
var $4gPgC = parcelRequire("4gPgC");

var $aLW2o = parcelRequire("aLW2o");

var $hh8eh = parcelRequire("hh8eh");

var $iUdYW = parcelRequire("iUdYW");
var $17b60e8bf3a764c4$require$Buffer = $iUdYW.Buffer;
var $17b60e8bf3a764c4$var$W = new Array(64);
function $17b60e8bf3a764c4$var$Sha224() {
    this.init();
    this._w = $17b60e8bf3a764c4$var$W // new Array(64)
    ;
    $hh8eh.call(this, 64, 56);
}
$4gPgC($17b60e8bf3a764c4$var$Sha224, $aLW2o);
$17b60e8bf3a764c4$var$Sha224.prototype.init = function() {
    this._a = 0xc1059ed8;
    this._b = 0x367cd507;
    this._c = 0x3070dd17;
    this._d = 0xf70e5939;
    this._e = 0xffc00b31;
    this._f = 0x68581511;
    this._g = 0x64f98fa7;
    this._h = 0xbefa4fa4;
    return this;
};
$17b60e8bf3a764c4$var$Sha224.prototype._hash = function() {
    var H = $17b60e8bf3a764c4$require$Buffer.allocUnsafe(28);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    return H;
};
module.exports = $17b60e8bf3a764c4$var$Sha224;

});
parcelRequire.register("aLW2o", function(module, exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ 
var $4gPgC = parcelRequire("4gPgC");

var $hh8eh = parcelRequire("hh8eh");

var $iUdYW = parcelRequire("iUdYW");
var $7d7b503533184a16$require$Buffer = $iUdYW.Buffer;
var $7d7b503533184a16$var$K = [
    0x428A2F98,
    0x71374491,
    0xB5C0FBCF,
    0xE9B5DBA5,
    0x3956C25B,
    0x59F111F1,
    0x923F82A4,
    0xAB1C5ED5,
    0xD807AA98,
    0x12835B01,
    0x243185BE,
    0x550C7DC3,
    0x72BE5D74,
    0x80DEB1FE,
    0x9BDC06A7,
    0xC19BF174,
    0xE49B69C1,
    0xEFBE4786,
    0x0FC19DC6,
    0x240CA1CC,
    0x2DE92C6F,
    0x4A7484AA,
    0x5CB0A9DC,
    0x76F988DA,
    0x983E5152,
    0xA831C66D,
    0xB00327C8,
    0xBF597FC7,
    0xC6E00BF3,
    0xD5A79147,
    0x06CA6351,
    0x14292967,
    0x27B70A85,
    0x2E1B2138,
    0x4D2C6DFC,
    0x53380D13,
    0x650A7354,
    0x766A0ABB,
    0x81C2C92E,
    0x92722C85,
    0xA2BFE8A1,
    0xA81A664B,
    0xC24B8B70,
    0xC76C51A3,
    0xD192E819,
    0xD6990624,
    0xF40E3585,
    0x106AA070,
    0x19A4C116,
    0x1E376C08,
    0x2748774C,
    0x34B0BCB5,
    0x391C0CB3,
    0x4ED8AA4A,
    0x5B9CCA4F,
    0x682E6FF3,
    0x748F82EE,
    0x78A5636F,
    0x84C87814,
    0x8CC70208,
    0x90BEFFFA,
    0xA4506CEB,
    0xBEF9A3F7,
    0xC67178F2
];
var $7d7b503533184a16$var$W = new Array(64);
function $7d7b503533184a16$var$Sha256() {
    this.init();
    this._w = $7d7b503533184a16$var$W // new Array(64)
    ;
    $hh8eh.call(this, 64, 56);
}
$4gPgC($7d7b503533184a16$var$Sha256, $hh8eh);
$7d7b503533184a16$var$Sha256.prototype.init = function() {
    this._a = 0x6a09e667;
    this._b = 0xbb67ae85;
    this._c = 0x3c6ef372;
    this._d = 0xa54ff53a;
    this._e = 0x510e527f;
    this._f = 0x9b05688c;
    this._g = 0x1f83d9ab;
    this._h = 0x5be0cd19;
    return this;
};
function $7d7b503533184a16$var$ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function $7d7b503533184a16$var$maj(x, y, z) {
    return x & y | z & (x | y);
}
function $7d7b503533184a16$var$sigma0(x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}
function $7d7b503533184a16$var$sigma1(x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}
function $7d7b503533184a16$var$gamma0(x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}
function $7d7b503533184a16$var$gamma1(x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}
$7d7b503533184a16$var$Sha256.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 64; ++i)W[i] = $7d7b503533184a16$var$gamma1(W[i - 2]) + W[i - 7] + $7d7b503533184a16$var$gamma0(W[i - 15]) + W[i - 16] | 0;
    for(var j = 0; j < 64; ++j){
        var T1 = h + $7d7b503533184a16$var$sigma1(e) + $7d7b503533184a16$var$ch(e, f, g) + $7d7b503533184a16$var$K[j] + W[j] | 0;
        var T2 = $7d7b503533184a16$var$sigma0(a) + $7d7b503533184a16$var$maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
    this._f = f + this._f | 0;
    this._g = g + this._g | 0;
    this._h = h + this._h | 0;
};
$7d7b503533184a16$var$Sha256.prototype._hash = function() {
    var H = $7d7b503533184a16$require$Buffer.allocUnsafe(32);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);
    return H;
};
module.exports = $7d7b503533184a16$var$Sha256;

});


parcelRequire.register("2qL4e", function(module, exports) {

var $4gPgC = parcelRequire("4gPgC");

var $Gt9Nk = parcelRequire("Gt9Nk");

var $hh8eh = parcelRequire("hh8eh");

var $iUdYW = parcelRequire("iUdYW");
var $1c5285095eb48e97$require$Buffer = $iUdYW.Buffer;
var $1c5285095eb48e97$var$W = new Array(160);
function $1c5285095eb48e97$var$Sha384() {
    this.init();
    this._w = $1c5285095eb48e97$var$W;
    $hh8eh.call(this, 128, 112);
}
$4gPgC($1c5285095eb48e97$var$Sha384, $Gt9Nk);
$1c5285095eb48e97$var$Sha384.prototype.init = function() {
    this._ah = 0xcbbb9d5d;
    this._bh = 0x629a292a;
    this._ch = 0x9159015a;
    this._dh = 0x152fecd8;
    this._eh = 0x67332667;
    this._fh = 0x8eb44a87;
    this._gh = 0xdb0c2e0d;
    this._hh = 0x47b5481d;
    this._al = 0xc1059ed8;
    this._bl = 0x367cd507;
    this._cl = 0x3070dd17;
    this._dl = 0xf70e5939;
    this._el = 0xffc00b31;
    this._fl = 0x68581511;
    this._gl = 0x64f98fa7;
    this._hl = 0xbefa4fa4;
    return this;
};
$1c5285095eb48e97$var$Sha384.prototype._hash = function() {
    var H = $1c5285095eb48e97$require$Buffer.allocUnsafe(48);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H;
};
module.exports = $1c5285095eb48e97$var$Sha384;

});
parcelRequire.register("Gt9Nk", function(module, exports) {

var $4gPgC = parcelRequire("4gPgC");

var $hh8eh = parcelRequire("hh8eh");

var $iUdYW = parcelRequire("iUdYW");
var $07fa8a53ca865462$require$Buffer = $iUdYW.Buffer;
var $07fa8a53ca865462$var$K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
var $07fa8a53ca865462$var$W = new Array(160);
function $07fa8a53ca865462$var$Sha512() {
    this.init();
    this._w = $07fa8a53ca865462$var$W;
    $hh8eh.call(this, 128, 112);
}
$4gPgC($07fa8a53ca865462$var$Sha512, $hh8eh);
$07fa8a53ca865462$var$Sha512.prototype.init = function() {
    this._ah = 0x6a09e667;
    this._bh = 0xbb67ae85;
    this._ch = 0x3c6ef372;
    this._dh = 0xa54ff53a;
    this._eh = 0x510e527f;
    this._fh = 0x9b05688c;
    this._gh = 0x1f83d9ab;
    this._hh = 0x5be0cd19;
    this._al = 0xf3bcc908;
    this._bl = 0x84caa73b;
    this._cl = 0xfe94f82b;
    this._dl = 0x5f1d36f1;
    this._el = 0xade682d1;
    this._fl = 0x2b3e6c1f;
    this._gl = 0xfb41bd6b;
    this._hl = 0x137e2179;
    return this;
};
function $07fa8a53ca865462$var$Ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function $07fa8a53ca865462$var$maj(x, y, z) {
    return x & y | z & (x | y);
}
function $07fa8a53ca865462$var$sigma0(x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}
function $07fa8a53ca865462$var$sigma1(x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}
function $07fa8a53ca865462$var$Gamma0(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}
function $07fa8a53ca865462$var$Gamma0l(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}
function $07fa8a53ca865462$var$Gamma1(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}
function $07fa8a53ca865462$var$Gamma1l(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}
function $07fa8a53ca865462$var$getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
}
$07fa8a53ca865462$var$Sha512.prototype._update = function(M) {
    var W = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;
    for(var i = 0; i < 32; i += 2){
        W[i] = M.readInt32BE(i * 4);
        W[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for(; i < 160; i += 2){
        var xh = W[i - 30];
        var xl = W[i - 30 + 1];
        var gamma0 = $07fa8a53ca865462$var$Gamma0(xh, xl);
        var gamma0l = $07fa8a53ca865462$var$Gamma0l(xl, xh);
        xh = W[i - 4];
        xl = W[i - 4 + 1];
        var gamma1 = $07fa8a53ca865462$var$Gamma1(xh, xl);
        var gamma1l = $07fa8a53ca865462$var$Gamma1l(xl, xh);
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W[i - 14];
        var Wi7l = W[i - 14 + 1];
        var Wi16h = W[i - 32];
        var Wi16l = W[i - 32 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + $07fa8a53ca865462$var$getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + $07fa8a53ca865462$var$getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + $07fa8a53ca865462$var$getCarry(Wil, Wi16l) | 0;
        W[i] = Wih;
        W[i + 1] = Wil;
    }
    for(var j = 0; j < 160; j += 2){
        Wih = W[j];
        Wil = W[j + 1];
        var majh = $07fa8a53ca865462$var$maj(ah, bh, ch);
        var majl = $07fa8a53ca865462$var$maj(al, bl, cl);
        var sigma0h = $07fa8a53ca865462$var$sigma0(ah, al);
        var sigma0l = $07fa8a53ca865462$var$sigma0(al, ah);
        var sigma1h = $07fa8a53ca865462$var$sigma1(eh, el);
        var sigma1l = $07fa8a53ca865462$var$sigma1(el, eh);
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = $07fa8a53ca865462$var$K[j];
        var Kil = $07fa8a53ca865462$var$K[j + 1];
        var chh = $07fa8a53ca865462$var$Ch(eh, fh, gh);
        var chl = $07fa8a53ca865462$var$Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + $07fa8a53ca865462$var$getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + $07fa8a53ca865462$var$getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + $07fa8a53ca865462$var$getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + $07fa8a53ca865462$var$getCarry(t1l, Wil) | 0;
        // t2 = sigma0 + maj
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + $07fa8a53ca865462$var$getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + $07fa8a53ca865462$var$getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + $07fa8a53ca865462$var$getCarry(al, t1l) | 0;
    }
    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + $07fa8a53ca865462$var$getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + $07fa8a53ca865462$var$getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + $07fa8a53ca865462$var$getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh + $07fa8a53ca865462$var$getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + $07fa8a53ca865462$var$getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + $07fa8a53ca865462$var$getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + $07fa8a53ca865462$var$getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + $07fa8a53ca865462$var$getCarry(this._hl, hl) | 0;
};
$07fa8a53ca865462$var$Sha512.prototype._hash = function() {
    var H = $07fa8a53ca865462$require$Buffer.allocUnsafe(64);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H;
};
module.exports = $07fa8a53ca865462$var$Sha512;

});



parcelRequire.register("l6Nd0", function(module, exports) {

var $iUdYW = parcelRequire("iUdYW");
var $f5e0545738085f56$require$Buffer = $iUdYW.Buffer;

var $f5e0545738085f56$require$Transform = $bFvJb$stream.Transform;

var $f5e0545738085f56$require$StringDecoder = $bFvJb$string_decoder.StringDecoder;

var $4gPgC = parcelRequire("4gPgC");
function $f5e0545738085f56$var$CipherBase(hashMode) {
    $f5e0545738085f56$require$Transform.call(this);
    this.hashMode = typeof hashMode === "string";
    if (this.hashMode) this[hashMode] = this._finalOrDigest;
    else this.final = this._finalOrDigest;
    if (this._final) {
        this.__final = this._final;
        this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
}
$4gPgC($f5e0545738085f56$var$CipherBase, $f5e0545738085f56$require$Transform);
$f5e0545738085f56$var$CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === "string") data = $f5e0545738085f56$require$Buffer.from(data, inputEnc);
    var outData = this._update(data);
    if (this.hashMode) return this;
    if (outputEnc) outData = this._toString(outData, outputEnc);
    return outData;
};
$f5e0545738085f56$var$CipherBase.prototype.setAutoPadding = function() {};
$f5e0545738085f56$var$CipherBase.prototype.getAuthTag = function() {
    throw new Error("trying to get auth tag in unsupported state");
};
$f5e0545738085f56$var$CipherBase.prototype.setAuthTag = function() {
    throw new Error("trying to set auth tag in unsupported state");
};
$f5e0545738085f56$var$CipherBase.prototype.setAAD = function() {
    throw new Error("trying to set aad in unsupported state");
};
$f5e0545738085f56$var$CipherBase.prototype._transform = function(data, _, next) {
    var err;
    try {
        if (this.hashMode) this._update(data);
        else this.push(this._update(data));
    } catch (e) {
        err = e;
    } finally{
        next(err);
    }
};
$f5e0545738085f56$var$CipherBase.prototype._flush = function(done) {
    var err;
    try {
        this.push(this.__final());
    } catch (e) {
        err = e;
    }
    done(err);
};
$f5e0545738085f56$var$CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || $f5e0545738085f56$require$Buffer.alloc(0);
    if (outputEnc) outData = this._toString(outData, outputEnc, true);
    return outData;
};
$f5e0545738085f56$var$CipherBase.prototype._toString = function(value, enc, fin) {
    if (!this._decoder) {
        this._decoder = new $f5e0545738085f56$require$StringDecoder(enc);
        this._encoding = enc;
    }
    if (this._encoding !== enc) throw new Error("can't switch encodings");
    var out = this._decoder.write(value);
    if (fin) out += this._decoder.end();
    return out;
};
module.exports = $f5e0545738085f56$var$CipherBase;

});


parcelRequire.register("6rvaV", function(module, exports) {
"use strict";

var $4gPgC = parcelRequire("4gPgC");

var $2G7nY = parcelRequire("2G7nY");

var $l6Nd0 = parcelRequire("l6Nd0");

var $iUdYW = parcelRequire("iUdYW");
var $4b0d726ce074d6a4$require$Buffer = $iUdYW.Buffer;

var $3wBKO = parcelRequire("3wBKO");

var $hwcuu = parcelRequire("hwcuu");

var $fV0g8 = parcelRequire("fV0g8");
var $4b0d726ce074d6a4$var$ZEROS = $4b0d726ce074d6a4$require$Buffer.alloc(128);
function $4b0d726ce074d6a4$var$Hmac(alg, key) {
    $l6Nd0.call(this, "digest");
    if (typeof key === "string") key = $4b0d726ce074d6a4$require$Buffer.from(key);
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
        var hash = alg === "rmd160" ? new $hwcuu() : $fV0g8(alg);
        key = hash.update(key).digest();
    } else if (key.length < blocksize) key = $4b0d726ce074d6a4$require$Buffer.concat([
        key,
        $4b0d726ce074d6a4$var$ZEROS
    ], blocksize);
    var ipad = this._ipad = $4b0d726ce074d6a4$require$Buffer.allocUnsafe(blocksize);
    var opad = this._opad = $4b0d726ce074d6a4$require$Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = alg === "rmd160" ? new $hwcuu() : $fV0g8(alg);
    this._hash.update(ipad);
}
$4gPgC($4b0d726ce074d6a4$var$Hmac, $l6Nd0);
$4b0d726ce074d6a4$var$Hmac.prototype._update = function(data) {
    this._hash.update(data);
};
$4b0d726ce074d6a4$var$Hmac.prototype._final = function() {
    var h = this._hash.digest();
    var hash = this._alg === "rmd160" ? new $hwcuu() : $fV0g8(this._alg);
    return hash.update(this._opad).update(h).digest();
};
module.exports = function createHmac(alg, key) {
    alg = alg.toLowerCase();
    if (alg === "rmd160" || alg === "ripemd160") return new $4b0d726ce074d6a4$var$Hmac("rmd160", key);
    if (alg === "md5") return new $2G7nY($3wBKO, key);
    return new $4b0d726ce074d6a4$var$Hmac(alg, key);
};

});
parcelRequire.register("2G7nY", function(module, exports) {
"use strict";

var $4gPgC = parcelRequire("4gPgC");

var $iUdYW = parcelRequire("iUdYW");
var $1f353bad7108d051$require$Buffer = $iUdYW.Buffer;

var $l6Nd0 = parcelRequire("l6Nd0");
var $1f353bad7108d051$var$ZEROS = $1f353bad7108d051$require$Buffer.alloc(128);
var $1f353bad7108d051$var$blocksize = 64;
function $1f353bad7108d051$var$Hmac(alg, key) {
    $l6Nd0.call(this, "digest");
    if (typeof key === "string") key = $1f353bad7108d051$require$Buffer.from(key);
    this._alg = alg;
    this._key = key;
    if (key.length > $1f353bad7108d051$var$blocksize) key = alg(key);
    else if (key.length < $1f353bad7108d051$var$blocksize) key = $1f353bad7108d051$require$Buffer.concat([
        key,
        $1f353bad7108d051$var$ZEROS
    ], $1f353bad7108d051$var$blocksize);
    var ipad = this._ipad = $1f353bad7108d051$require$Buffer.allocUnsafe($1f353bad7108d051$var$blocksize);
    var opad = this._opad = $1f353bad7108d051$require$Buffer.allocUnsafe($1f353bad7108d051$var$blocksize);
    for(var i = 0; i < $1f353bad7108d051$var$blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = [
        ipad
    ];
}
$4gPgC($1f353bad7108d051$var$Hmac, $l6Nd0);
$1f353bad7108d051$var$Hmac.prototype._update = function(data) {
    this._hash.push(data);
};
$1f353bad7108d051$var$Hmac.prototype._final = function() {
    var h = this._alg($1f353bad7108d051$require$Buffer.concat(this._hash));
    return this._alg($1f353bad7108d051$require$Buffer.concat([
        this._opad,
        h
    ]));
};
module.exports = $1f353bad7108d051$var$Hmac;

});

parcelRequire.register("3wBKO", function(module, exports) {

var $lOs9b = parcelRequire("lOs9b");
module.exports = function(buffer) {
    return new $lOs9b().update(buffer).digest();
};

});


parcelRequire.register("kri2x", function(module, exports) {

module.exports = (parcelRequire("kK12h"));

});
parcelRequire.register("kK12h", function(module, exports) {
module.exports = JSON.parse('{"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}');

});


parcelRequire.register("3oAAz", function(module, exports) {

$parcel$export(module.exports, "pbkdf2", () => $278ffec6b8b59295$export$448fa22aedc9dbca, (v) => $278ffec6b8b59295$export$448fa22aedc9dbca = v);
$parcel$export(module.exports, "pbkdf2Sync", () => $278ffec6b8b59295$export$b80c7ba289c8fa56, (v) => $278ffec6b8b59295$export$b80c7ba289c8fa56 = v);
var $278ffec6b8b59295$export$448fa22aedc9dbca;
var $278ffec6b8b59295$export$b80c7ba289c8fa56;

$278ffec6b8b59295$export$448fa22aedc9dbca = (parcelRequire("fOnlr"));

$278ffec6b8b59295$export$b80c7ba289c8fa56 = (parcelRequire("lSjub"));

});
parcelRequire.register("fOnlr", function(module, exports) {

var $iUdYW = parcelRequire("iUdYW");
var $b82da24df9750827$require$Buffer = $iUdYW.Buffer;

var $iljOu = parcelRequire("iljOu");

var $27sEK = parcelRequire("27sEK");

var $lSjub = parcelRequire("lSjub");

var $2zlAD = parcelRequire("2zlAD");
var $b82da24df9750827$var$ZERO_BUF;
var $b82da24df9750827$var$subtle = $parcel$global.crypto && $parcel$global.crypto.subtle;
var $b82da24df9750827$var$toBrowser = {
    sha: "SHA-1",
    "sha-1": "SHA-1",
    sha1: "SHA-1",
    sha256: "SHA-256",
    "sha-256": "SHA-256",
    sha384: "SHA-384",
    "sha-384": "SHA-384",
    "sha-512": "SHA-512",
    sha512: "SHA-512"
};
var $b82da24df9750827$var$checks = [];
function $b82da24df9750827$var$checkNative(algo) {
    if ($parcel$global.process && !$parcel$global.process.browser) return Promise.resolve(false);
    if (!$b82da24df9750827$var$subtle || !$b82da24df9750827$var$subtle.importKey || !$b82da24df9750827$var$subtle.deriveBits) return Promise.resolve(false);
    if ($b82da24df9750827$var$checks[algo] !== undefined) return $b82da24df9750827$var$checks[algo];
    $b82da24df9750827$var$ZERO_BUF = $b82da24df9750827$var$ZERO_BUF || $b82da24df9750827$require$Buffer.alloc(8);
    var prom = $b82da24df9750827$var$browserPbkdf2($b82da24df9750827$var$ZERO_BUF, $b82da24df9750827$var$ZERO_BUF, 10, 128, algo).then(function() {
        return true;
    }).catch(function() {
        return false;
    });
    $b82da24df9750827$var$checks[algo] = prom;
    return prom;
}
var $b82da24df9750827$var$nextTick;
function $b82da24df9750827$var$getNextTick() {
    if ($b82da24df9750827$var$nextTick) return $b82da24df9750827$var$nextTick;
    if ($parcel$global.process && $parcel$global.process.nextTick) $b82da24df9750827$var$nextTick = $parcel$global.process.nextTick;
    else if ($parcel$global.queueMicrotask) $b82da24df9750827$var$nextTick = $parcel$global.queueMicrotask;
    else if ($parcel$global.setImmediate) $b82da24df9750827$var$nextTick = $parcel$global.setImmediate;
    else $b82da24df9750827$var$nextTick = $parcel$global.setTimeout;
    return $b82da24df9750827$var$nextTick;
}
function $b82da24df9750827$var$browserPbkdf2(password, salt, iterations, length, algo) {
    return $b82da24df9750827$var$subtle.importKey("raw", password, {
        name: "PBKDF2"
    }, false, [
        "deriveBits"
    ]).then(function(key) {
        return $b82da24df9750827$var$subtle.deriveBits({
            name: "PBKDF2",
            salt: salt,
            iterations: iterations,
            hash: {
                name: algo
            }
        }, key, length << 3);
    }).then(function(res) {
        return $b82da24df9750827$require$Buffer.from(res);
    });
}
function $b82da24df9750827$var$resolvePromise(promise, callback) {
    promise.then(function(out) {
        $b82da24df9750827$var$getNextTick()(function() {
            callback(null, out);
        });
    }, function(e) {
        $b82da24df9750827$var$getNextTick()(function() {
            callback(e);
        });
    });
}
module.exports = function(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === "function") {
        callback = digest;
        digest = undefined;
    }
    digest = digest || "sha1";
    var algo = $b82da24df9750827$var$toBrowser[digest.toLowerCase()];
    if (!algo || typeof $parcel$global.Promise !== "function") {
        $b82da24df9750827$var$getNextTick()(function() {
            var out;
            try {
                out = $lSjub(password, salt, iterations, keylen, digest);
            } catch (e) {
                return callback(e);
            }
            callback(null, out);
        });
        return;
    }
    $iljOu(iterations, keylen);
    password = $2zlAD(password, $27sEK, "Password");
    salt = $2zlAD(salt, $27sEK, "Salt");
    if (typeof callback !== "function") throw new Error("No callback provided to pbkdf2");
    $b82da24df9750827$var$resolvePromise($b82da24df9750827$var$checkNative(algo).then(function(resp) {
        if (resp) return $b82da24df9750827$var$browserPbkdf2(password, salt, iterations, keylen, algo);
        return $lSjub(password, salt, iterations, keylen, digest);
    }), callback);
};

});
parcelRequire.register("iljOu", function(module, exports) {
var $d5a98eb2056f2b5c$var$MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
;
module.exports = function(iterations, keylen) {
    if (typeof iterations !== "number") throw new TypeError("Iterations not a number");
    if (iterations < 0) throw new TypeError("Bad iterations");
    if (typeof keylen !== "number") throw new TypeError("Key length not a number");
    if (keylen < 0 || keylen > $d5a98eb2056f2b5c$var$MAX_ALLOC || keylen !== keylen) throw new TypeError("Bad key length");
};

});

parcelRequire.register("27sEK", function(module, exports) {

var $18b276bf612bb33f$var$defaultEncoding;
/* istanbul ignore next */ if ($parcel$global.process && $parcel$global.process.browser) $18b276bf612bb33f$var$defaultEncoding = "utf-8";
else if ($parcel$global.process && $parcel$global.process.version) {
    var $18b276bf612bb33f$var$pVersionMajor = parseInt($bFvJb$process.version.split(".")[0].slice(1), 10);
    $18b276bf612bb33f$var$defaultEncoding = $18b276bf612bb33f$var$pVersionMajor >= 6 ? "utf-8" : "binary";
} else $18b276bf612bb33f$var$defaultEncoding = "utf-8";
module.exports = $18b276bf612bb33f$var$defaultEncoding;

});

parcelRequire.register("lSjub", function(module, exports) {

var $3wBKO = parcelRequire("3wBKO");

var $hwcuu = parcelRequire("hwcuu");

var $fV0g8 = parcelRequire("fV0g8");

var $iUdYW = parcelRequire("iUdYW");
var $fecdc19df7bee731$require$Buffer = $iUdYW.Buffer;

var $iljOu = parcelRequire("iljOu");

var $27sEK = parcelRequire("27sEK");

var $2zlAD = parcelRequire("2zlAD");
var $fecdc19df7bee731$var$ZEROS = $fecdc19df7bee731$require$Buffer.alloc(128);
var $fecdc19df7bee731$var$sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
};
function $fecdc19df7bee731$var$Hmac(alg, key, saltLen) {
    var hash = $fecdc19df7bee731$var$getDigest(alg);
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    if (key.length > blocksize) key = hash(key);
    else if (key.length < blocksize) key = $fecdc19df7bee731$require$Buffer.concat([
        key,
        $fecdc19df7bee731$var$ZEROS
    ], blocksize);
    var ipad = $fecdc19df7bee731$require$Buffer.allocUnsafe(blocksize + $fecdc19df7bee731$var$sizes[alg]);
    var opad = $fecdc19df7bee731$require$Buffer.allocUnsafe(blocksize + $fecdc19df7bee731$var$sizes[alg]);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    var ipad1 = $fecdc19df7bee731$require$Buffer.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    this.ipad1 = ipad1;
    this.ipad2 = ipad;
    this.opad = opad;
    this.alg = alg;
    this.blocksize = blocksize;
    this.hash = hash;
    this.size = $fecdc19df7bee731$var$sizes[alg];
}
$fecdc19df7bee731$var$Hmac.prototype.run = function(data, ipad) {
    data.copy(ipad, this.blocksize);
    var h = this.hash(ipad);
    h.copy(this.opad, this.blocksize);
    return this.hash(this.opad);
};
function $fecdc19df7bee731$var$getDigest(alg) {
    function shaFunc(data) {
        return $fV0g8(alg).update(data).digest();
    }
    function rmd160Func(data) {
        return new $hwcuu().update(data).digest();
    }
    if (alg === "rmd160" || alg === "ripemd160") return rmd160Func;
    if (alg === "md5") return $3wBKO;
    return shaFunc;
}
function $fecdc19df7bee731$var$pbkdf2(password, salt, iterations, keylen, digest) {
    $iljOu(iterations, keylen);
    password = $2zlAD(password, $27sEK, "Password");
    salt = $2zlAD(salt, $27sEK, "Salt");
    digest = digest || "sha1";
    var hmac = new $fecdc19df7bee731$var$Hmac(digest, password, salt.length);
    var DK = $fecdc19df7bee731$require$Buffer.allocUnsafe(keylen);
    var block1 = $fecdc19df7bee731$require$Buffer.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = $fecdc19df7bee731$var$sizes[digest];
    var l = Math.ceil(keylen / hLen);
    for(var i = 1; i <= l; i++){
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for(var j = 1; j < iterations; j++){
            U = hmac.run(U, hmac.ipad2);
            for(var k = 0; k < hLen; k++)T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
    }
    return DK;
}
module.exports = $fecdc19df7bee731$var$pbkdf2;

});
parcelRequire.register("2zlAD", function(module, exports) {

var $iUdYW = parcelRequire("iUdYW");
var $1def98f29b41c5d5$require$Buffer = $iUdYW.Buffer;
module.exports = function(thing, encoding, name) {
    if ($1def98f29b41c5d5$require$Buffer.isBuffer(thing)) return thing;
    else if (typeof thing === "string") return $1def98f29b41c5d5$require$Buffer.from(thing, encoding);
    else if (ArrayBuffer.isView(thing)) return $1def98f29b41c5d5$require$Buffer.from(thing.buffer);
    else throw new TypeError(name + " must be a string, a Buffer, a typed array or a DataView");
};

});




parcelRequire.register("kRyFV", function(module, exports) {

$parcel$export(module.exports, "createCipher", () => $f303a7a311f71e7f$export$bdd223f16383713e, (v) => $f303a7a311f71e7f$export$bdd223f16383713e = v);
$parcel$export(module.exports, "Cipher", () => $f303a7a311f71e7f$export$26e5786e8ac8e530, (v) => $f303a7a311f71e7f$export$26e5786e8ac8e530 = v);
$parcel$export(module.exports, "createCipheriv", () => $f303a7a311f71e7f$export$2f64596b8cbf08b4, (v) => $f303a7a311f71e7f$export$2f64596b8cbf08b4 = v);
$parcel$export(module.exports, "Cipheriv", () => $f303a7a311f71e7f$export$20533d26f07f1ee0, (v) => $f303a7a311f71e7f$export$20533d26f07f1ee0 = v);
$parcel$export(module.exports, "createDecipher", () => $f303a7a311f71e7f$export$12ada9414fbc594c, (v) => $f303a7a311f71e7f$export$12ada9414fbc594c = v);
$parcel$export(module.exports, "Decipher", () => $f303a7a311f71e7f$export$2ce6d8d0e8b04e1a, (v) => $f303a7a311f71e7f$export$2ce6d8d0e8b04e1a = v);
$parcel$export(module.exports, "createDecipheriv", () => $f303a7a311f71e7f$export$36b6d6ef312eab39, (v) => $f303a7a311f71e7f$export$36b6d6ef312eab39 = v);
$parcel$export(module.exports, "Decipheriv", () => $f303a7a311f71e7f$export$f5e7e39d57cd9700, (v) => $f303a7a311f71e7f$export$f5e7e39d57cd9700 = v);
$parcel$export(module.exports, "listCiphers", () => $f303a7a311f71e7f$export$dedd8dc3dc62b370, (v) => $f303a7a311f71e7f$export$dedd8dc3dc62b370 = v);
$parcel$export(module.exports, "getCiphers", () => $f303a7a311f71e7f$export$58a258485f1e49f6, (v) => $f303a7a311f71e7f$export$58a258485f1e49f6 = v);
var $f303a7a311f71e7f$export$bdd223f16383713e;
var $f303a7a311f71e7f$export$26e5786e8ac8e530;
var $f303a7a311f71e7f$export$2f64596b8cbf08b4;
var $f303a7a311f71e7f$export$20533d26f07f1ee0;
var $f303a7a311f71e7f$export$12ada9414fbc594c;
var $f303a7a311f71e7f$export$2ce6d8d0e8b04e1a;
var $f303a7a311f71e7f$export$36b6d6ef312eab39;
var $f303a7a311f71e7f$export$f5e7e39d57cd9700;
var $f303a7a311f71e7f$export$dedd8dc3dc62b370;
var $f303a7a311f71e7f$export$58a258485f1e49f6;

var $9EyNZ = parcelRequire("9EyNZ");

var $3xfw9 = parcelRequire("3xfw9");

var $kN4pE = parcelRequire("kN4pE");

var $3Uj2k = parcelRequire("3Uj2k");

var $60byP = parcelRequire("60byP");
function $f303a7a311f71e7f$var$createCipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if ($kN4pE[suite]) {
        keyLen = $kN4pE[suite].key;
        ivLen = $kN4pE[suite].iv;
    } else if ($3Uj2k[suite]) {
        keyLen = $3Uj2k[suite].key * 8;
        ivLen = $3Uj2k[suite].iv;
    } else throw new TypeError("invalid suite type");
    var keys = $60byP(password, false, keyLen, ivLen);
    return $f303a7a311f71e7f$var$createCipheriv(suite, keys.key, keys.iv);
}
function $f303a7a311f71e7f$var$createDecipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if ($kN4pE[suite]) {
        keyLen = $kN4pE[suite].key;
        ivLen = $kN4pE[suite].iv;
    } else if ($3Uj2k[suite]) {
        keyLen = $3Uj2k[suite].key * 8;
        ivLen = $3Uj2k[suite].iv;
    } else throw new TypeError("invalid suite type");
    var keys = $60byP(password, false, keyLen, ivLen);
    return $f303a7a311f71e7f$var$createDecipheriv(suite, keys.key, keys.iv);
}
function $f303a7a311f71e7f$var$createCipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if ($kN4pE[suite]) return $3xfw9.createCipheriv(suite, key, iv);
    if ($3Uj2k[suite]) return new $9EyNZ({
        key: key,
        iv: iv,
        mode: suite
    });
    throw new TypeError("invalid suite type");
}
function $f303a7a311f71e7f$var$createDecipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if ($kN4pE[suite]) return $3xfw9.createDecipheriv(suite, key, iv);
    if ($3Uj2k[suite]) return new $9EyNZ({
        key: key,
        iv: iv,
        mode: suite,
        decrypt: true
    });
    throw new TypeError("invalid suite type");
}
function $f303a7a311f71e7f$var$getCiphers() {
    return Object.keys($3Uj2k).concat($3xfw9.getCiphers());
}
$f303a7a311f71e7f$export$bdd223f16383713e = $f303a7a311f71e7f$export$26e5786e8ac8e530 = $f303a7a311f71e7f$var$createCipher;
$f303a7a311f71e7f$export$2f64596b8cbf08b4 = $f303a7a311f71e7f$export$20533d26f07f1ee0 = $f303a7a311f71e7f$var$createCipheriv;
$f303a7a311f71e7f$export$12ada9414fbc594c = $f303a7a311f71e7f$export$2ce6d8d0e8b04e1a = $f303a7a311f71e7f$var$createDecipher;
$f303a7a311f71e7f$export$36b6d6ef312eab39 = $f303a7a311f71e7f$export$f5e7e39d57cd9700 = $f303a7a311f71e7f$var$createDecipheriv;
$f303a7a311f71e7f$export$dedd8dc3dc62b370 = $f303a7a311f71e7f$export$58a258485f1e49f6 = $f303a7a311f71e7f$var$getCiphers;

});
parcelRequire.register("9EyNZ", function(module, exports) {

var $l6Nd0 = parcelRequire("l6Nd0");

var $irBFh = parcelRequire("irBFh");

var $4gPgC = parcelRequire("4gPgC");

var $iUdYW = parcelRequire("iUdYW");
var $7072d914d6d88c61$require$Buffer = $iUdYW.Buffer;
var $7072d914d6d88c61$var$modes = {
    "des-ede3-cbc": $irBFh.CBC.instantiate($irBFh.EDE),
    "des-ede3": $irBFh.EDE,
    "des-ede-cbc": $irBFh.CBC.instantiate($irBFh.EDE),
    "des-ede": $irBFh.EDE,
    "des-cbc": $irBFh.CBC.instantiate($irBFh.DES),
    "des-ecb": $irBFh.DES
};
$7072d914d6d88c61$var$modes.des = $7072d914d6d88c61$var$modes["des-cbc"];
$7072d914d6d88c61$var$modes.des3 = $7072d914d6d88c61$var$modes["des-ede3-cbc"];
module.exports = $7072d914d6d88c61$var$DES;
$4gPgC($7072d914d6d88c61$var$DES, $l6Nd0);
function $7072d914d6d88c61$var$DES(opts) {
    $l6Nd0.call(this);
    var modeName = opts.mode.toLowerCase();
    var mode = $7072d914d6d88c61$var$modes[modeName];
    var type;
    if (opts.decrypt) type = "decrypt";
    else type = "encrypt";
    var key = opts.key;
    if (!$7072d914d6d88c61$require$Buffer.isBuffer(key)) key = $7072d914d6d88c61$require$Buffer.from(key);
    if (modeName === "des-ede" || modeName === "des-ede-cbc") key = $7072d914d6d88c61$require$Buffer.concat([
        key,
        key.slice(0, 8)
    ]);
    var iv = opts.iv;
    if (!$7072d914d6d88c61$require$Buffer.isBuffer(iv)) iv = $7072d914d6d88c61$require$Buffer.from(iv);
    this._des = mode.create({
        key: key,
        iv: iv,
        type: type
    });
}
$7072d914d6d88c61$var$DES.prototype._update = function(data) {
    return $7072d914d6d88c61$require$Buffer.from(this._des.update(data));
};
$7072d914d6d88c61$var$DES.prototype._final = function() {
    return $7072d914d6d88c61$require$Buffer.from(this._des.final());
};

});
parcelRequire.register("irBFh", function(module, exports) {

$parcel$export(module.exports, "DES", () => $d6d7f70edce58e21$export$cc8859615686b300, (v) => $d6d7f70edce58e21$export$cc8859615686b300 = v);
$parcel$export(module.exports, "CBC", () => $d6d7f70edce58e21$export$8ad3f227af08fcc5, (v) => $d6d7f70edce58e21$export$8ad3f227af08fcc5 = v);
$parcel$export(module.exports, "EDE", () => $d6d7f70edce58e21$export$947646e34766044f, (v) => $d6d7f70edce58e21$export$947646e34766044f = v);
var $d6d7f70edce58e21$export$eab97d15b1788b8d;
var $d6d7f70edce58e21$export$26e5786e8ac8e530;
var $d6d7f70edce58e21$export$cc8859615686b300;
var $d6d7f70edce58e21$export$8ad3f227af08fcc5;
var $d6d7f70edce58e21$export$947646e34766044f;
"use strict";

$d6d7f70edce58e21$export$eab97d15b1788b8d = (parcelRequire("eKb7H"));

$d6d7f70edce58e21$export$26e5786e8ac8e530 = (parcelRequire("11H5d"));

$d6d7f70edce58e21$export$cc8859615686b300 = (parcelRequire("fOted"));

$d6d7f70edce58e21$export$8ad3f227af08fcc5 = (parcelRequire("9aZX5"));

$d6d7f70edce58e21$export$947646e34766044f = (parcelRequire("6S0KL"));

});
parcelRequire.register("eKb7H", function(module, exports) {

$parcel$export(module.exports, "readUInt32BE", () => $abbdfd60d74bd23c$export$cfaef8ed399428b0, (v) => $abbdfd60d74bd23c$export$cfaef8ed399428b0 = v);
$parcel$export(module.exports, "writeUInt32BE", () => $abbdfd60d74bd23c$export$a80c7deaea7cbd80, (v) => $abbdfd60d74bd23c$export$a80c7deaea7cbd80 = v);
$parcel$export(module.exports, "ip", () => $abbdfd60d74bd23c$export$ed7577ae6e1cd0ef, (v) => $abbdfd60d74bd23c$export$ed7577ae6e1cd0ef = v);
$parcel$export(module.exports, "rip", () => $abbdfd60d74bd23c$export$5dcbef3aa594f567, (v) => $abbdfd60d74bd23c$export$5dcbef3aa594f567 = v);
$parcel$export(module.exports, "pc1", () => $abbdfd60d74bd23c$export$5bc8001ca71ed9c5, (v) => $abbdfd60d74bd23c$export$5bc8001ca71ed9c5 = v);
$parcel$export(module.exports, "r28shl", () => $abbdfd60d74bd23c$export$3e714e2c5d5d8cb2, (v) => $abbdfd60d74bd23c$export$3e714e2c5d5d8cb2 = v);
$parcel$export(module.exports, "pc2", () => $abbdfd60d74bd23c$export$94c3e544fd062b7f, (v) => $abbdfd60d74bd23c$export$94c3e544fd062b7f = v);
$parcel$export(module.exports, "expand", () => $abbdfd60d74bd23c$export$9f77e0932fb78f72, (v) => $abbdfd60d74bd23c$export$9f77e0932fb78f72 = v);
$parcel$export(module.exports, "substitute", () => $abbdfd60d74bd23c$export$d865ce2836f5927f, (v) => $abbdfd60d74bd23c$export$d865ce2836f5927f = v);
$parcel$export(module.exports, "permute", () => $abbdfd60d74bd23c$export$95e62ad65da8b7d2, (v) => $abbdfd60d74bd23c$export$95e62ad65da8b7d2 = v);
$parcel$export(module.exports, "padSplit", () => $abbdfd60d74bd23c$export$209139ff098c441a, (v) => $abbdfd60d74bd23c$export$209139ff098c441a = v);
var $abbdfd60d74bd23c$export$cfaef8ed399428b0;
var $abbdfd60d74bd23c$export$a80c7deaea7cbd80;
var $abbdfd60d74bd23c$export$ed7577ae6e1cd0ef;
var $abbdfd60d74bd23c$export$5dcbef3aa594f567;
var $abbdfd60d74bd23c$export$5bc8001ca71ed9c5;
var $abbdfd60d74bd23c$export$3e714e2c5d5d8cb2;
var $abbdfd60d74bd23c$export$94c3e544fd062b7f;
var $abbdfd60d74bd23c$export$9f77e0932fb78f72;
var $abbdfd60d74bd23c$export$d865ce2836f5927f;
var $abbdfd60d74bd23c$export$95e62ad65da8b7d2;
var $abbdfd60d74bd23c$export$209139ff098c441a;
"use strict";
$abbdfd60d74bd23c$export$cfaef8ed399428b0 = function readUInt32BE(bytes, off) {
    var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
    return res >>> 0;
};
$abbdfd60d74bd23c$export$a80c7deaea7cbd80 = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = value >>> 16 & 0xff;
    bytes[2 + off] = value >>> 8 & 0xff;
    bytes[3 + off] = value & 0xff;
};
$abbdfd60d74bd23c$export$ed7577ae6e1cd0ef = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >>> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >>> j + i & 1;
        }
    }
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inR >>> j + i & 1;
        }
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inL >>> j + i & 1;
        }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$abbdfd60d74bd23c$export$5dcbef3aa594f567 = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 0; i < 4; i++)for(var j = 24; j >= 0; j -= 8){
        outL <<= 1;
        outL |= inR >>> j + i & 1;
        outL <<= 1;
        outL |= inL >>> j + i & 1;
    }
    for(var i = 4; i < 8; i++)for(var j = 24; j >= 0; j -= 8){
        outR <<= 1;
        outR |= inR >>> j + i & 1;
        outR <<= 1;
        outR |= inL >>> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$abbdfd60d74bd23c$export$5bc8001ca71ed9c5 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    // 7, 15, 23, 31, 39, 47, 55, 63
    // 6, 14, 22, 30, 39, 47, 55, 63
    // 5, 13, 21, 29, 39, 47, 55, 63
    // 4, 12, 20, 28
    for(var i = 7; i >= 5; i--){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outL <<= 1;
        outL |= inR >> j + i & 1;
    }
    // 1, 9, 17, 25, 33, 41, 49, 57
    // 2, 10, 18, 26, 34, 42, 50, 58
    // 3, 11, 19, 27, 35, 43, 51, 59
    // 36, 44, 52, 60
    for(var i = 1; i <= 3; i++){
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outR <<= 1;
        outR |= inL >> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$abbdfd60d74bd23c$export$3e714e2c5d5d8cb2 = function r28shl(num, shift) {
    return num << shift & 0xfffffff | num >>> 28 - shift;
};
var $abbdfd60d74bd23c$var$pc2table = [
    // inL => outL
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    // inR => outR
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
];
$abbdfd60d74bd23c$export$94c3e544fd062b7f = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    var len = $abbdfd60d74bd23c$var$pc2table.length >>> 1;
    for(var i = 0; i < len; i++){
        outL <<= 1;
        outL |= inL >>> $abbdfd60d74bd23c$var$pc2table[i] & 0x1;
    }
    for(var i = len; i < $abbdfd60d74bd23c$var$pc2table.length; i++){
        outR <<= 1;
        outR |= inR >>> $abbdfd60d74bd23c$var$pc2table[i] & 0x1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$abbdfd60d74bd23c$export$9f77e0932fb78f72 = function expand(r, out, off) {
    var outL = 0;
    var outR = 0;
    outL = (r & 1) << 5 | r >>> 27;
    for(var i = 23; i >= 15; i -= 4){
        outL <<= 6;
        outL |= r >>> i & 0x3f;
    }
    for(var i = 11; i >= 3; i -= 4){
        outR |= r >>> i & 0x3f;
        outR <<= 6;
    }
    outR |= (r & 0x1f) << 1 | r >>> 31;
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
var $abbdfd60d74bd23c$var$sTable = [
    14,
    0,
    4,
    15,
    13,
    7,
    1,
    4,
    2,
    14,
    15,
    2,
    11,
    13,
    8,
    1,
    3,
    10,
    10,
    6,
    6,
    12,
    12,
    11,
    5,
    9,
    9,
    5,
    0,
    3,
    7,
    8,
    4,
    15,
    1,
    12,
    14,
    8,
    8,
    2,
    13,
    4,
    6,
    9,
    2,
    1,
    11,
    7,
    15,
    5,
    12,
    11,
    9,
    3,
    7,
    14,
    3,
    10,
    10,
    0,
    5,
    6,
    0,
    13,
    15,
    3,
    1,
    13,
    8,
    4,
    14,
    7,
    6,
    15,
    11,
    2,
    3,
    8,
    4,
    14,
    9,
    12,
    7,
    0,
    2,
    1,
    13,
    10,
    12,
    6,
    0,
    9,
    5,
    11,
    10,
    5,
    0,
    13,
    14,
    8,
    7,
    10,
    11,
    1,
    10,
    3,
    4,
    15,
    13,
    4,
    1,
    2,
    5,
    11,
    8,
    6,
    12,
    7,
    6,
    12,
    9,
    0,
    3,
    5,
    2,
    14,
    15,
    9,
    10,
    13,
    0,
    7,
    9,
    0,
    14,
    9,
    6,
    3,
    3,
    4,
    15,
    6,
    5,
    10,
    1,
    2,
    13,
    8,
    12,
    5,
    7,
    14,
    11,
    12,
    4,
    11,
    2,
    15,
    8,
    1,
    13,
    1,
    6,
    10,
    4,
    13,
    9,
    0,
    8,
    6,
    15,
    9,
    3,
    8,
    0,
    7,
    11,
    4,
    1,
    15,
    2,
    14,
    12,
    3,
    5,
    11,
    10,
    5,
    14,
    2,
    7,
    12,
    7,
    13,
    13,
    8,
    14,
    11,
    3,
    5,
    0,
    6,
    6,
    15,
    9,
    0,
    10,
    3,
    1,
    4,
    2,
    7,
    8,
    2,
    5,
    12,
    11,
    1,
    12,
    10,
    4,
    14,
    15,
    9,
    10,
    3,
    6,
    15,
    9,
    0,
    0,
    6,
    12,
    10,
    11,
    1,
    7,
    13,
    13,
    8,
    15,
    9,
    1,
    4,
    3,
    5,
    14,
    11,
    5,
    12,
    2,
    7,
    8,
    2,
    4,
    14,
    2,
    14,
    12,
    11,
    4,
    2,
    1,
    12,
    7,
    4,
    10,
    7,
    11,
    13,
    6,
    1,
    8,
    5,
    5,
    0,
    3,
    15,
    15,
    10,
    13,
    3,
    0,
    9,
    14,
    8,
    9,
    6,
    4,
    11,
    2,
    8,
    1,
    12,
    11,
    7,
    10,
    1,
    13,
    14,
    7,
    2,
    8,
    13,
    15,
    6,
    9,
    15,
    12,
    0,
    5,
    9,
    6,
    10,
    3,
    4,
    0,
    5,
    14,
    3,
    12,
    10,
    1,
    15,
    10,
    4,
    15,
    2,
    9,
    7,
    2,
    12,
    6,
    9,
    8,
    5,
    0,
    6,
    13,
    1,
    3,
    13,
    4,
    14,
    14,
    0,
    7,
    11,
    5,
    3,
    11,
    8,
    9,
    4,
    14,
    3,
    15,
    2,
    5,
    12,
    2,
    9,
    8,
    5,
    12,
    15,
    3,
    10,
    7,
    11,
    0,
    14,
    4,
    1,
    10,
    7,
    1,
    6,
    13,
    0,
    11,
    8,
    6,
    13,
    4,
    13,
    11,
    0,
    2,
    11,
    14,
    7,
    15,
    4,
    0,
    9,
    8,
    1,
    13,
    10,
    3,
    14,
    12,
    3,
    9,
    5,
    7,
    12,
    5,
    2,
    10,
    15,
    6,
    8,
    1,
    6,
    1,
    6,
    4,
    11,
    11,
    13,
    13,
    8,
    12,
    1,
    3,
    4,
    7,
    10,
    14,
    7,
    10,
    9,
    15,
    5,
    6,
    0,
    8,
    15,
    0,
    14,
    5,
    2,
    9,
    3,
    2,
    12,
    13,
    1,
    2,
    15,
    8,
    13,
    4,
    8,
    6,
    10,
    15,
    3,
    11,
    7,
    1,
    4,
    10,
    12,
    9,
    5,
    3,
    6,
    14,
    11,
    5,
    0,
    0,
    14,
    12,
    9,
    7,
    2,
    7,
    2,
    11,
    1,
    4,
    14,
    1,
    7,
    9,
    4,
    12,
    10,
    14,
    8,
    2,
    13,
    0,
    15,
    6,
    12,
    10,
    9,
    13,
    0,
    15,
    3,
    3,
    5,
    5,
    6,
    8,
    11
];
$abbdfd60d74bd23c$export$d865ce2836f5927f = function substitute(inL, inR) {
    var out = 0;
    for(var i = 0; i < 4; i++){
        var b = inL >>> 18 - i * 6 & 0x3f;
        var sb = $abbdfd60d74bd23c$var$sTable[i * 0x40 + b];
        out <<= 4;
        out |= sb;
    }
    for(var i = 0; i < 4; i++){
        var b = inR >>> 18 - i * 6 & 0x3f;
        var sb = $abbdfd60d74bd23c$var$sTable[256 + i * 0x40 + b];
        out <<= 4;
        out |= sb;
    }
    return out >>> 0;
};
var $abbdfd60d74bd23c$var$permuteTable = [
    16,
    25,
    12,
    11,
    3,
    20,
    4,
    15,
    31,
    17,
    9,
    6,
    27,
    14,
    1,
    22,
    30,
    24,
    8,
    18,
    0,
    5,
    29,
    23,
    13,
    19,
    2,
    26,
    10,
    21,
    28,
    7
];
$abbdfd60d74bd23c$export$95e62ad65da8b7d2 = function permute(num) {
    var out = 0;
    for(var i = 0; i < $abbdfd60d74bd23c$var$permuteTable.length; i++){
        out <<= 1;
        out |= num >>> $abbdfd60d74bd23c$var$permuteTable[i] & 0x1;
    }
    return out >>> 0;
};
$abbdfd60d74bd23c$export$209139ff098c441a = function padSplit(num, size, group) {
    var str = num.toString(2);
    while(str.length < size)str = "0" + str;
    var out = [];
    for(var i = 0; i < size; i += group)out.push(str.slice(i, i + group));
    return out.join(" ");
};

});

parcelRequire.register("11H5d", function(module, exports) {
"use strict";

var $fWN7B = parcelRequire("fWN7B");
function $0bf74dda97751c5e$var$Cipher(options) {
    this.options = options;
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
    this.padding = options.padding !== false;
}
module.exports = $0bf74dda97751c5e$var$Cipher;
$0bf74dda97751c5e$var$Cipher.prototype._init = function _init() {
// Might be overrided
};
$0bf74dda97751c5e$var$Cipher.prototype.update = function update(data) {
    if (data.length === 0) return [];
    if (this.type === "decrypt") return this._updateDecrypt(data);
    else return this._updateEncrypt(data);
};
$0bf74dda97751c5e$var$Cipher.prototype._buffer = function _buffer(data, off) {
    // Append data to buffer
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
    for(var i = 0; i < min; i++)this.buffer[this.bufferOff + i] = data[off + i];
    this.bufferOff += min;
    // Shift next
    return min;
};
$0bf74dda97751c5e$var$Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
};
$0bf74dda97751c5e$var$Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = (this.bufferOff + data.length) / this.blockSize | 0;
    var out = new Array(count * this.blockSize);
    if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
    }
    // Write blocks
    var max = data.length - (data.length - inputOff) % this.blockSize;
    for(; inputOff < max; inputOff += this.blockSize){
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
    }
    // Queue rest
    for(; inputOff < data.length; inputOff++, this.bufferOff++)this.buffer[this.bufferOff] = data[inputOff];
    return out;
};
$0bf74dda97751c5e$var$Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
    // TODO(indutny): optimize it, this is far from optimal
    for(; count > 0; count--){
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
    }
    // Buffer rest of the input
    inputOff += this._buffer(data, inputOff);
    return out;
};
$0bf74dda97751c5e$var$Cipher.prototype.final = function final(buffer) {
    var first;
    if (buffer) first = this.update(buffer);
    var last;
    if (this.type === "encrypt") last = this._finalEncrypt();
    else last = this._finalDecrypt();
    if (first) return first.concat(last);
    else return last;
};
$0bf74dda97751c5e$var$Cipher.prototype._pad = function _pad(buffer, off) {
    if (off === 0) return false;
    while(off < buffer.length)buffer[off++] = 0;
    return true;
};
$0bf74dda97751c5e$var$Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff)) return [];
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
};
$0bf74dda97751c5e$var$Cipher.prototype._unpad = function _unpad(buffer) {
    return buffer;
};
$0bf74dda97751c5e$var$Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    $fWN7B.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
    return this._unpad(out);
};

});
parcelRequire.register("fWN7B", function(module, exports) {
module.exports = $b9c2605829b59634$var$assert;
function $b9c2605829b59634$var$assert(val, msg) {
    if (!val) throw new Error(msg || "Assertion failed");
}
$b9c2605829b59634$var$assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
};

});


parcelRequire.register("fOted", function(module, exports) {
"use strict";

var $fWN7B = parcelRequire("fWN7B");

var $4gPgC = parcelRequire("4gPgC");

var $eKb7H = parcelRequire("eKb7H");

var $11H5d = parcelRequire("11H5d");
function $b83232a65cbeddf9$var$DESState() {
    this.tmp = new Array(2);
    this.keys = null;
}
function $b83232a65cbeddf9$var$DES(options) {
    $11H5d.call(this, options);
    var state = new $b83232a65cbeddf9$var$DESState();
    this._desState = state;
    this.deriveKeys(state, options.key);
}
$4gPgC($b83232a65cbeddf9$var$DES, $11H5d);
module.exports = $b83232a65cbeddf9$var$DES;
$b83232a65cbeddf9$var$DES.create = function create(options) {
    return new $b83232a65cbeddf9$var$DES(options);
};
var $b83232a65cbeddf9$var$shiftTable = [
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1
];
$b83232a65cbeddf9$var$DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(32);
    $fWN7B.equal(key.length, this.blockSize, "Invalid key length");
    var kL = $eKb7H.readUInt32BE(key, 0);
    var kR = $eKb7H.readUInt32BE(key, 4);
    $eKb7H.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for(var i = 0; i < state.keys.length; i += 2){
        var shift = $b83232a65cbeddf9$var$shiftTable[i >>> 1];
        kL = $eKb7H.r28shl(kL, shift);
        kR = $eKb7H.r28shl(kR, shift);
        $eKb7H.pc2(kL, kR, state.keys, i);
    }
};
$b83232a65cbeddf9$var$DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;
    var l = $eKb7H.readUInt32BE(inp, inOff);
    var r = $eKb7H.readUInt32BE(inp, inOff + 4);
    // Initial Permutation
    $eKb7H.ip(l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    if (this.type === "encrypt") this._encrypt(state, l, r, state.tmp, 0);
    else this._decrypt(state, l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    $eKb7H.writeUInt32BE(out, l, outOff);
    $eKb7H.writeUInt32BE(out, r, outOff + 4);
};
$b83232a65cbeddf9$var$DES.prototype._pad = function _pad(buffer, off) {
    if (this.padding === false) return false;
    var value = buffer.length - off;
    for(var i = off; i < buffer.length; i++)buffer[i] = value;
    return true;
};
$b83232a65cbeddf9$var$DES.prototype._unpad = function _unpad(buffer) {
    if (this.padding === false) return buffer;
    var pad = buffer[buffer.length - 1];
    for(var i = buffer.length - pad; i < buffer.length; i++)$fWN7B.equal(buffer[i], pad);
    return buffer.slice(0, buffer.length - pad);
};
$b83232a65cbeddf9$var$DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart;
    // Apply f() x16 times
    for(var i = 0; i < state.keys.length; i += 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        $eKb7H.expand(r, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = $eKb7H.substitute(keyL, keyR);
        var f = $eKb7H.permute(s);
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
    }
    // Reverse Initial Permutation
    $eKb7H.rip(r, l, out, off);
};
$b83232a65cbeddf9$var$DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart;
    // Apply f() x16 times
    for(var i = state.keys.length - 2; i >= 0; i -= 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        $eKb7H.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = $eKb7H.substitute(keyL, keyR);
        var f = $eKb7H.permute(s);
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
    }
    // Reverse Initial Permutation
    $eKb7H.rip(l, r, out, off);
};

});

parcelRequire.register("9aZX5", function(module, exports) {

$parcel$export(module.exports, "instantiate", () => $6ae51a9e833c74e8$export$f9bb8d20ccc7477a, (v) => $6ae51a9e833c74e8$export$f9bb8d20ccc7477a = v);
var $6ae51a9e833c74e8$export$f9bb8d20ccc7477a;
"use strict";

var $fWN7B = parcelRequire("fWN7B");

var $4gPgC = parcelRequire("4gPgC");
var $6ae51a9e833c74e8$var$proto = {};
function $6ae51a9e833c74e8$var$CBCState(iv) {
    $fWN7B.equal(iv.length, 8, "Invalid IV length");
    this.iv = new Array(8);
    for(var i = 0; i < this.iv.length; i++)this.iv[i] = iv[i];
}
function $6ae51a9e833c74e8$var$instantiate(Base) {
    function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
    }
    $4gPgC(CBC, Base);
    var keys = Object.keys($6ae51a9e833c74e8$var$proto);
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        CBC.prototype[key] = $6ae51a9e833c74e8$var$proto[key];
    }
    CBC.create = function create(options) {
        return new CBC(options);
    };
    return CBC;
}
$6ae51a9e833c74e8$export$f9bb8d20ccc7477a = $6ae51a9e833c74e8$var$instantiate;
$6ae51a9e833c74e8$var$proto._cbcInit = function _cbcInit() {
    var state = new $6ae51a9e833c74e8$var$CBCState(this.options.iv);
    this._cbcState = state;
};
$6ae51a9e833c74e8$var$proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state.iv;
    if (this.type === "encrypt") {
        for(var i = 0; i < this.blockSize; i++)iv[i] ^= inp[inOff + i];
        superProto._update.call(this, iv, 0, out, outOff);
        for(var i = 0; i < this.blockSize; i++)iv[i] = out[outOff + i];
    } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for(var i = 0; i < this.blockSize; i++)out[outOff + i] ^= iv[i];
        for(var i = 0; i < this.blockSize; i++)iv[i] = inp[inOff + i];
    }
};

});

parcelRequire.register("6S0KL", function(module, exports) {
"use strict";

var $fWN7B = parcelRequire("fWN7B");

var $4gPgC = parcelRequire("4gPgC");

var $11H5d = parcelRequire("11H5d");

var $fOted = parcelRequire("fOted");
function $50085ecffdb42a99$var$EDEState(type, key) {
    $fWN7B.equal(key.length, 24, "Invalid key length");
    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);
    if (type === "encrypt") this.ciphers = [
        $fOted.create({
            type: "encrypt",
            key: k1
        }),
        $fOted.create({
            type: "decrypt",
            key: k2
        }),
        $fOted.create({
            type: "encrypt",
            key: k3
        })
    ];
    else this.ciphers = [
        $fOted.create({
            type: "decrypt",
            key: k3
        }),
        $fOted.create({
            type: "encrypt",
            key: k2
        }),
        $fOted.create({
            type: "decrypt",
            key: k1
        })
    ];
}
function $50085ecffdb42a99$var$EDE(options) {
    $11H5d.call(this, options);
    var state = new $50085ecffdb42a99$var$EDEState(this.type, this.options.key);
    this._edeState = state;
}
$4gPgC($50085ecffdb42a99$var$EDE, $11H5d);
module.exports = $50085ecffdb42a99$var$EDE;
$50085ecffdb42a99$var$EDE.create = function create(options) {
    return new $50085ecffdb42a99$var$EDE(options);
};
$50085ecffdb42a99$var$EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;
    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
};
$50085ecffdb42a99$var$EDE.prototype._pad = $fOted.prototype._pad;
$50085ecffdb42a99$var$EDE.prototype._unpad = $fOted.prototype._unpad;

});



parcelRequire.register("3xfw9", function(module, exports) {

$parcel$export(module.exports, "createCipheriv", () => $29307d9f56b4a1d1$export$2f64596b8cbf08b4, (v) => $29307d9f56b4a1d1$export$2f64596b8cbf08b4 = v);
$parcel$export(module.exports, "createDecipheriv", () => $29307d9f56b4a1d1$export$36b6d6ef312eab39, (v) => $29307d9f56b4a1d1$export$36b6d6ef312eab39 = v);
$parcel$export(module.exports, "getCiphers", () => $29307d9f56b4a1d1$export$58a258485f1e49f6, (v) => $29307d9f56b4a1d1$export$58a258485f1e49f6 = v);
var $29307d9f56b4a1d1$export$bdd223f16383713e;
var $29307d9f56b4a1d1$export$26e5786e8ac8e530;
var $29307d9f56b4a1d1$export$2f64596b8cbf08b4;
var $29307d9f56b4a1d1$export$20533d26f07f1ee0;
var $29307d9f56b4a1d1$export$12ada9414fbc594c;
var $29307d9f56b4a1d1$export$2ce6d8d0e8b04e1a;
var $29307d9f56b4a1d1$export$36b6d6ef312eab39;
var $29307d9f56b4a1d1$export$f5e7e39d57cd9700;
var $29307d9f56b4a1d1$export$dedd8dc3dc62b370;
var $29307d9f56b4a1d1$export$58a258485f1e49f6;

var $hPQ4n = parcelRequire("hPQ4n");

var $ihzTQ = parcelRequire("ihzTQ");

var $gl200 = parcelRequire("gl200");
function $29307d9f56b4a1d1$var$getCiphers() {
    return Object.keys($gl200);
}
$29307d9f56b4a1d1$export$bdd223f16383713e = $29307d9f56b4a1d1$export$26e5786e8ac8e530 = $hPQ4n.createCipher;
$29307d9f56b4a1d1$export$2f64596b8cbf08b4 = $29307d9f56b4a1d1$export$20533d26f07f1ee0 = $hPQ4n.createCipheriv;
$29307d9f56b4a1d1$export$12ada9414fbc594c = $29307d9f56b4a1d1$export$2ce6d8d0e8b04e1a = $ihzTQ.createDecipher;
$29307d9f56b4a1d1$export$36b6d6ef312eab39 = $29307d9f56b4a1d1$export$f5e7e39d57cd9700 = $ihzTQ.createDecipheriv;
$29307d9f56b4a1d1$export$dedd8dc3dc62b370 = $29307d9f56b4a1d1$export$58a258485f1e49f6 = $29307d9f56b4a1d1$var$getCiphers;

});
parcelRequire.register("hPQ4n", function(module, exports) {

$parcel$export(module.exports, "createCipheriv", () => $cfbf970646061546$export$2f64596b8cbf08b4, (v) => $cfbf970646061546$export$2f64596b8cbf08b4 = v);
$parcel$export(module.exports, "createCipher", () => $cfbf970646061546$export$bdd223f16383713e, (v) => $cfbf970646061546$export$bdd223f16383713e = v);
var $cfbf970646061546$export$2f64596b8cbf08b4;
var $cfbf970646061546$export$bdd223f16383713e;

var $kN4pE = parcelRequire("kN4pE");

var $irHON = parcelRequire("irHON");

var $iUdYW = parcelRequire("iUdYW");
var $cfbf970646061546$require$Buffer = $iUdYW.Buffer;

var $TbKPi = parcelRequire("TbKPi");

var $l6Nd0 = parcelRequire("l6Nd0");

var $hNdGi = parcelRequire("hNdGi");

var $60byP = parcelRequire("60byP");

var $4gPgC = parcelRequire("4gPgC");
function $cfbf970646061546$var$Cipher(mode, key, iv) {
    $l6Nd0.call(this);
    this._cache = new $cfbf970646061546$var$Splitter();
    this._cipher = new $hNdGi.AES(key);
    this._prev = $cfbf970646061546$require$Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
$4gPgC($cfbf970646061546$var$Cipher, $l6Nd0);
$cfbf970646061546$var$Cipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get()){
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
    }
    return $cfbf970646061546$require$Buffer.concat(out);
};
var $cfbf970646061546$var$PADDING = $cfbf970646061546$require$Buffer.alloc(16, 0x10);
$cfbf970646061546$var$Cipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
    }
    if (!chunk.equals($cfbf970646061546$var$PADDING)) {
        this._cipher.scrub();
        throw new Error("data not multiple of block length");
    }
};
$cfbf970646061546$var$Cipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function $cfbf970646061546$var$Splitter() {
    this.cache = $cfbf970646061546$require$Buffer.allocUnsafe(0);
}
$cfbf970646061546$var$Splitter.prototype.add = function(data) {
    this.cache = $cfbf970646061546$require$Buffer.concat([
        this.cache,
        data
    ]);
};
$cfbf970646061546$var$Splitter.prototype.get = function() {
    if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
$cfbf970646061546$var$Splitter.prototype.flush = function() {
    var len = 16 - this.cache.length;
    var padBuff = $cfbf970646061546$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)padBuff.writeUInt8(len, i);
    return $cfbf970646061546$require$Buffer.concat([
        this.cache,
        padBuff
    ]);
};
function $cfbf970646061546$var$createCipheriv(suite, password, iv) {
    var config = $kN4pE[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    if (typeof password === "string") password = $cfbf970646061546$require$Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
    if (typeof iv === "string") iv = $cfbf970646061546$require$Buffer.from(iv);
    if (config.mode !== "GCM" && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
    if (config.type === "stream") return new $TbKPi(config.module, password, iv);
    else if (config.type === "auth") return new $irHON(config.module, password, iv);
    return new $cfbf970646061546$var$Cipher(config.module, password, iv);
}
function $cfbf970646061546$var$createCipher(suite, password) {
    var config = $kN4pE[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    var keys = $60byP(password, false, config.key, config.iv);
    return $cfbf970646061546$var$createCipheriv(suite, keys.key, keys.iv);
}
$cfbf970646061546$export$2f64596b8cbf08b4 = $cfbf970646061546$var$createCipheriv;
$cfbf970646061546$export$bdd223f16383713e = $cfbf970646061546$var$createCipher;

});
parcelRequire.register("kN4pE", function(module, exports) {








var $f22bce888b006b5c$var$modeModules = {
    ECB: (parcelRequire("3WwiY")),
    CBC: (parcelRequire("4L2DT")),
    CFB: (parcelRequire("kGvPY")),
    CFB8: (parcelRequire("4cgBx")),
    CFB1: (parcelRequire("iMUIM")),
    OFB: (parcelRequire("e5aFn")),
    CTR: (parcelRequire("70qAU")),
    GCM: (parcelRequire("70qAU"))
};

var $gl200 = parcelRequire("gl200");
for(var $f22bce888b006b5c$var$key in $gl200)$gl200[$f22bce888b006b5c$var$key].module = $f22bce888b006b5c$var$modeModules[$gl200[$f22bce888b006b5c$var$key].mode];
module.exports = $gl200;

});
parcelRequire.register("3WwiY", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $2defd8fbb7627f3e$export$5b0f6292f11d1d18, (v) => $2defd8fbb7627f3e$export$5b0f6292f11d1d18 = v);
$parcel$export(module.exports, "decrypt", () => $2defd8fbb7627f3e$export$e85a0c9a1067c5d3, (v) => $2defd8fbb7627f3e$export$e85a0c9a1067c5d3 = v);
var $2defd8fbb7627f3e$export$5b0f6292f11d1d18;
var $2defd8fbb7627f3e$export$e85a0c9a1067c5d3;
$2defd8fbb7627f3e$export$5b0f6292f11d1d18 = function(self, block) {
    return self._cipher.encryptBlock(block);
};
$2defd8fbb7627f3e$export$e85a0c9a1067c5d3 = function(self, block) {
    return self._cipher.decryptBlock(block);
};

});

parcelRequire.register("4L2DT", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $376d99f188e5d1b0$export$5b0f6292f11d1d18, (v) => $376d99f188e5d1b0$export$5b0f6292f11d1d18 = v);
$parcel$export(module.exports, "decrypt", () => $376d99f188e5d1b0$export$e85a0c9a1067c5d3, (v) => $376d99f188e5d1b0$export$e85a0c9a1067c5d3 = v);
var $376d99f188e5d1b0$export$5b0f6292f11d1d18;
var $376d99f188e5d1b0$export$e85a0c9a1067c5d3;

var $9YvtF = parcelRequire("9YvtF");
$376d99f188e5d1b0$export$5b0f6292f11d1d18 = function(self, block) {
    var data = $9YvtF(block, self._prev);
    self._prev = self._cipher.encryptBlock(data);
    return self._prev;
};
$376d99f188e5d1b0$export$e85a0c9a1067c5d3 = function(self, block) {
    var pad = self._prev;
    self._prev = block;
    var out = self._cipher.decryptBlock(block);
    return $9YvtF(out, pad);
};

});
parcelRequire.register("9YvtF", function(module, exports) {

var $7432226f77ca8f87$require$Buffer = $bFvJb$buffer.Buffer;
module.exports = function xor(a, b) {
    var length = Math.min(a.length, b.length);
    var buffer = new $7432226f77ca8f87$require$Buffer(length);
    for(var i = 0; i < length; ++i)buffer[i] = a[i] ^ b[i];
    return buffer;
};

});


parcelRequire.register("kGvPY", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $f0f06d230c2f6d0d$export$5b0f6292f11d1d18, (v) => $f0f06d230c2f6d0d$export$5b0f6292f11d1d18 = v);
var $f0f06d230c2f6d0d$export$5b0f6292f11d1d18;

var $iUdYW = parcelRequire("iUdYW");
var $f0f06d230c2f6d0d$require$Buffer = $iUdYW.Buffer;

var $9YvtF = parcelRequire("9YvtF");
function $f0f06d230c2f6d0d$var$encryptStart(self, data, decrypt) {
    var len = data.length;
    var out = $9YvtF(data, self._cache);
    self._cache = self._cache.slice(len);
    self._prev = $f0f06d230c2f6d0d$require$Buffer.concat([
        self._prev,
        decrypt ? data : out
    ]);
    return out;
}
$f0f06d230c2f6d0d$export$5b0f6292f11d1d18 = function(self, data, decrypt) {
    var out = $f0f06d230c2f6d0d$require$Buffer.allocUnsafe(0);
    var len;
    while(data.length){
        if (self._cache.length === 0) {
            self._cache = self._cipher.encryptBlock(self._prev);
            self._prev = $f0f06d230c2f6d0d$require$Buffer.allocUnsafe(0);
        }
        if (self._cache.length <= data.length) {
            len = self._cache.length;
            out = $f0f06d230c2f6d0d$require$Buffer.concat([
                out,
                $f0f06d230c2f6d0d$var$encryptStart(self, data.slice(0, len), decrypt)
            ]);
            data = data.slice(len);
        } else {
            out = $f0f06d230c2f6d0d$require$Buffer.concat([
                out,
                $f0f06d230c2f6d0d$var$encryptStart(self, data, decrypt)
            ]);
            break;
        }
    }
    return out;
};

});

parcelRequire.register("4cgBx", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $30e529b430e46358$export$5b0f6292f11d1d18, (v) => $30e529b430e46358$export$5b0f6292f11d1d18 = v);
var $30e529b430e46358$export$5b0f6292f11d1d18;

var $iUdYW = parcelRequire("iUdYW");
var $30e529b430e46358$require$Buffer = $iUdYW.Buffer;
function $30e529b430e46358$var$encryptByte(self, byteParam, decrypt) {
    var pad = self._cipher.encryptBlock(self._prev);
    var out = pad[0] ^ byteParam;
    self._prev = $30e529b430e46358$require$Buffer.concat([
        self._prev.slice(1),
        $30e529b430e46358$require$Buffer.from([
            decrypt ? byteParam : out
        ])
    ]);
    return out;
}
$30e529b430e46358$export$5b0f6292f11d1d18 = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = $30e529b430e46358$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = $30e529b430e46358$var$encryptByte(self, chunk[i], decrypt);
    return out;
};

});

parcelRequire.register("iMUIM", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $dad8b55ce36762e2$export$5b0f6292f11d1d18, (v) => $dad8b55ce36762e2$export$5b0f6292f11d1d18 = v);
var $dad8b55ce36762e2$export$5b0f6292f11d1d18;

var $iUdYW = parcelRequire("iUdYW");
var $dad8b55ce36762e2$require$Buffer = $iUdYW.Buffer;
function $dad8b55ce36762e2$var$encryptByte(self, byteParam, decrypt) {
    var pad;
    var i = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while(++i < len){
        pad = self._cipher.encryptBlock(self._prev);
        bit = byteParam & 1 << 7 - i ? 0x80 : 0;
        value = pad[0] ^ bit;
        out += (value & 0x80) >> i % 8;
        self._prev = $dad8b55ce36762e2$var$shiftIn(self._prev, decrypt ? bit : value);
    }
    return out;
}
function $dad8b55ce36762e2$var$shiftIn(buffer, value) {
    var len = buffer.length;
    var i = -1;
    var out = $dad8b55ce36762e2$require$Buffer.allocUnsafe(buffer.length);
    buffer = $dad8b55ce36762e2$require$Buffer.concat([
        buffer,
        $dad8b55ce36762e2$require$Buffer.from([
            value
        ])
    ]);
    while(++i < len)out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
    return out;
}
$dad8b55ce36762e2$export$5b0f6292f11d1d18 = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = $dad8b55ce36762e2$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = $dad8b55ce36762e2$var$encryptByte(self, chunk[i], decrypt);
    return out;
};

});

parcelRequire.register("e5aFn", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $a409ce734b22b26c$export$5b0f6292f11d1d18, (v) => $a409ce734b22b26c$export$5b0f6292f11d1d18 = v);
var $a409ce734b22b26c$export$5b0f6292f11d1d18;

var $a409ce734b22b26c$require$Buffer = $bFvJb$buffer.Buffer;

var $9YvtF = parcelRequire("9YvtF");
function $a409ce734b22b26c$var$getBlock(self) {
    self._prev = self._cipher.encryptBlock(self._prev);
    return self._prev;
}
$a409ce734b22b26c$export$5b0f6292f11d1d18 = function(self, chunk) {
    while(self._cache.length < chunk.length)self._cache = $a409ce734b22b26c$require$Buffer.concat([
        self._cache,
        $a409ce734b22b26c$var$getBlock(self)
    ]);
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return $9YvtF(chunk, pad);
};

});

parcelRequire.register("70qAU", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $519d29965d50578e$export$5b0f6292f11d1d18, (v) => $519d29965d50578e$export$5b0f6292f11d1d18 = v);
var $519d29965d50578e$export$5b0f6292f11d1d18;

var $9YvtF = parcelRequire("9YvtF");

var $iUdYW = parcelRequire("iUdYW");
var $519d29965d50578e$require$Buffer = $iUdYW.Buffer;

var $meZYS = parcelRequire("meZYS");
function $519d29965d50578e$var$getBlock(self) {
    var out = self._cipher.encryptBlockRaw(self._prev);
    $meZYS(self._prev);
    return out;
}
var $519d29965d50578e$var$blockSize = 16;
$519d29965d50578e$export$5b0f6292f11d1d18 = function(self, chunk) {
    var chunkNum = Math.ceil(chunk.length / $519d29965d50578e$var$blockSize);
    var start = self._cache.length;
    self._cache = $519d29965d50578e$require$Buffer.concat([
        self._cache,
        $519d29965d50578e$require$Buffer.allocUnsafe(chunkNum * $519d29965d50578e$var$blockSize)
    ]);
    for(var i = 0; i < chunkNum; i++){
        var out = $519d29965d50578e$var$getBlock(self);
        var offset = start + i * $519d29965d50578e$var$blockSize;
        self._cache.writeUInt32BE(out[0], offset + 0);
        self._cache.writeUInt32BE(out[1], offset + 4);
        self._cache.writeUInt32BE(out[2], offset + 8);
        self._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return $9YvtF(chunk, pad);
};

});
parcelRequire.register("meZYS", function(module, exports) {
function $042db09dbe2c9f87$var$incr32(iv) {
    var len = iv.length;
    var item;
    while(len--){
        item = iv.readUInt8(len);
        if (item === 255) iv.writeUInt8(0, len);
        else {
            item++;
            iv.writeUInt8(item, len);
            break;
        }
    }
}
module.exports = $042db09dbe2c9f87$var$incr32;

});


parcelRequire.register("gl200", function(module, exports) {
module.exports = JSON.parse('{"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}');

});


parcelRequire.register("irHON", function(module, exports) {

var $hNdGi = parcelRequire("hNdGi");

var $iUdYW = parcelRequire("iUdYW");
var $d6dcbd0591ade4fa$require$Buffer = $iUdYW.Buffer;

var $l6Nd0 = parcelRequire("l6Nd0");

var $4gPgC = parcelRequire("4gPgC");

var $ezD9n = parcelRequire("ezD9n");

var $9YvtF = parcelRequire("9YvtF");

var $meZYS = parcelRequire("meZYS");
function $d6dcbd0591ade4fa$var$xorTest(a, b) {
    var out = 0;
    if (a.length !== b.length) out++;
    var len = Math.min(a.length, b.length);
    for(var i = 0; i < len; ++i)out += a[i] ^ b[i];
    return out;
}
function $d6dcbd0591ade4fa$var$calcIv(self, iv, ck) {
    if (iv.length === 12) {
        self._finID = $d6dcbd0591ade4fa$require$Buffer.concat([
            iv,
            $d6dcbd0591ade4fa$require$Buffer.from([
                0,
                0,
                0,
                1
            ])
        ]);
        return $d6dcbd0591ade4fa$require$Buffer.concat([
            iv,
            $d6dcbd0591ade4fa$require$Buffer.from([
                0,
                0,
                0,
                2
            ])
        ]);
    }
    var ghash = new $ezD9n(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash.update(iv);
    if (toPad) {
        toPad = 16 - toPad;
        ghash.update($d6dcbd0591ade4fa$require$Buffer.alloc(toPad, 0));
    }
    ghash.update($d6dcbd0591ade4fa$require$Buffer.alloc(8, 0));
    var ivBits = len * 8;
    var tail = $d6dcbd0591ade4fa$require$Buffer.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash.update(tail);
    self._finID = ghash.state;
    var out = $d6dcbd0591ade4fa$require$Buffer.from(self._finID);
    $meZYS(out);
    return out;
}
function $d6dcbd0591ade4fa$var$StreamCipher(mode, key, iv, decrypt) {
    $l6Nd0.call(this);
    var h = $d6dcbd0591ade4fa$require$Buffer.alloc(4, 0);
    this._cipher = new $hNdGi.AES(key);
    var ck = this._cipher.encryptBlock(h);
    this._ghash = new $ezD9n(ck);
    iv = $d6dcbd0591ade4fa$var$calcIv(this, iv, ck);
    this._prev = $d6dcbd0591ade4fa$require$Buffer.from(iv);
    this._cache = $d6dcbd0591ade4fa$require$Buffer.allocUnsafe(0);
    this._secCache = $d6dcbd0591ade4fa$require$Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;
    this._authTag = null;
    this._called = false;
}
$4gPgC($d6dcbd0591ade4fa$var$StreamCipher, $l6Nd0);
$d6dcbd0591ade4fa$var$StreamCipher.prototype._update = function(chunk) {
    if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
            rump = $d6dcbd0591ade4fa$require$Buffer.alloc(rump, 0);
            this._ghash.update(rump);
        }
    }
    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) this._ghash.update(chunk);
    else this._ghash.update(out);
    this._len += chunk.length;
    return out;
};
$d6dcbd0591ade4fa$var$StreamCipher.prototype._final = function() {
    if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
    var tag = $9YvtF(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && $d6dcbd0591ade4fa$var$xorTest(tag, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
    this._authTag = tag;
    this._cipher.scrub();
};
$d6dcbd0591ade4fa$var$StreamCipher.prototype.getAuthTag = function getAuthTag() {
    if (this._decrypt || !$d6dcbd0591ade4fa$require$Buffer.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
    return this._authTag;
};
$d6dcbd0591ade4fa$var$StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
    if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
    this._authTag = tag;
};
$d6dcbd0591ade4fa$var$StreamCipher.prototype.setAAD = function setAAD(buf) {
    if (this._called) throw new Error("Attempting to set AAD in unsupported state");
    this._ghash.update(buf);
    this._alen += buf.length;
};
module.exports = $d6dcbd0591ade4fa$var$StreamCipher;

});
parcelRequire.register("hNdGi", function(module, exports) {

$parcel$export(module.exports, "AES", () => $cf41a018c4caa567$export$b80fbe1c3a2b92b5, (v) => $cf41a018c4caa567$export$b80fbe1c3a2b92b5 = v);
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/
var $cf41a018c4caa567$export$b80fbe1c3a2b92b5;

var $iUdYW = parcelRequire("iUdYW");
var $cf41a018c4caa567$require$Buffer = $iUdYW.Buffer;
function $cf41a018c4caa567$var$asUInt32Array(buf) {
    if (!$cf41a018c4caa567$require$Buffer.isBuffer(buf)) buf = $cf41a018c4caa567$require$Buffer.from(buf);
    var len = buf.length / 4 | 0;
    var out = new Array(len);
    for(var i = 0; i < len; i++)out[i] = buf.readUInt32BE(i * 4);
    return out;
}
function $cf41a018c4caa567$var$scrubVec(v) {
    for(var i = 0; i < v.length; v++)v[i] = 0;
}
function $cf41a018c4caa567$var$cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];
    var s0 = M[0] ^ keySchedule[0];
    var s1 = M[1] ^ keySchedule[1];
    var s2 = M[2] ^ keySchedule[2];
    var s3 = M[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;
    for(var round = 1; round < nRounds; round++){
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
    }
    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
    t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
    t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;
    return [
        t0,
        t1,
        t2,
        t3
    ];
}
// AES constants
var $cf41a018c4caa567$var$RCON = [
    0x00,
    0x01,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x40,
    0x80,
    0x1b,
    0x36
];
var $cf41a018c4caa567$var$G = function() {
    // Compute double table
    var d = new Array(256);
    for(var j = 0; j < 256; j++)if (j < 128) d[j] = j << 1;
    else d[j] = j << 1 ^ 0x11b;
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    var INV_SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    // Walk GF(2^8)
    var x = 0;
    var xi = 0;
    for(var i = 0; i < 256; ++i){
        // Compute sbox
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        // Compute multiplication
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        // Compute sub bytes, mix columns tables
        var t = d[sx] * 0x101 ^ sx * 0x1010100;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t;
        // Compute inv sub bytes, inv mix columns tables
        t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;
        if (x === 0) x = xi = 1;
        else {
            x = x2 ^ d[d[d[x8 ^ x2]]];
            xi ^= d[d[xi]];
        }
    }
    return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
    };
}();
function $cf41a018c4caa567$var$AES(key) {
    this._key = $cf41a018c4caa567$var$asUInt32Array(key);
    this._reset();
}
$cf41a018c4caa567$var$AES.blockSize = 16;
$cf41a018c4caa567$var$AES.keySize = 32;
$cf41a018c4caa567$var$AES.prototype.blockSize = $cf41a018c4caa567$var$AES.blockSize;
$cf41a018c4caa567$var$AES.prototype.keySize = $cf41a018c4caa567$var$AES.keySize;
$cf41a018c4caa567$var$AES.prototype._reset = function() {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;
    var keySchedule = [];
    for(var k = 0; k < keySize; k++)keySchedule[k] = keyWords[k];
    for(k = keySize; k < ksRows; k++){
        var t = keySchedule[k - 1];
        if (k % keySize === 0) {
            t = t << 8 | t >>> 24;
            t = $cf41a018c4caa567$var$G.SBOX[t >>> 24] << 24 | $cf41a018c4caa567$var$G.SBOX[t >>> 16 & 0xff] << 16 | $cf41a018c4caa567$var$G.SBOX[t >>> 8 & 0xff] << 8 | $cf41a018c4caa567$var$G.SBOX[t & 0xff];
            t ^= $cf41a018c4caa567$var$RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) t = $cf41a018c4caa567$var$G.SBOX[t >>> 24] << 24 | $cf41a018c4caa567$var$G.SBOX[t >>> 16 & 0xff] << 16 | $cf41a018c4caa567$var$G.SBOX[t >>> 8 & 0xff] << 8 | $cf41a018c4caa567$var$G.SBOX[t & 0xff];
        keySchedule[k] = keySchedule[k - keySize] ^ t;
    }
    var invKeySchedule = [];
    for(var ik = 0; ik < ksRows; ik++){
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) invKeySchedule[ik] = tt;
        else invKeySchedule[ik] = $cf41a018c4caa567$var$G.INV_SUB_MIX[0][$cf41a018c4caa567$var$G.SBOX[tt >>> 24]] ^ $cf41a018c4caa567$var$G.INV_SUB_MIX[1][$cf41a018c4caa567$var$G.SBOX[tt >>> 16 & 0xff]] ^ $cf41a018c4caa567$var$G.INV_SUB_MIX[2][$cf41a018c4caa567$var$G.SBOX[tt >>> 8 & 0xff]] ^ $cf41a018c4caa567$var$G.INV_SUB_MIX[3][$cf41a018c4caa567$var$G.SBOX[tt & 0xff]];
    }
    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
};
$cf41a018c4caa567$var$AES.prototype.encryptBlockRaw = function(M) {
    M = $cf41a018c4caa567$var$asUInt32Array(M);
    return $cf41a018c4caa567$var$cryptBlock(M, this._keySchedule, $cf41a018c4caa567$var$G.SUB_MIX, $cf41a018c4caa567$var$G.SBOX, this._nRounds);
};
$cf41a018c4caa567$var$AES.prototype.encryptBlock = function(M) {
    var out = this.encryptBlockRaw(M);
    var buf = $cf41a018c4caa567$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf;
};
$cf41a018c4caa567$var$AES.prototype.decryptBlock = function(M) {
    M = $cf41a018c4caa567$var$asUInt32Array(M);
    // swap
    var m1 = M[1];
    M[1] = M[3];
    M[3] = m1;
    var out = $cf41a018c4caa567$var$cryptBlock(M, this._invKeySchedule, $cf41a018c4caa567$var$G.INV_SUB_MIX, $cf41a018c4caa567$var$G.INV_SBOX, this._nRounds);
    var buf = $cf41a018c4caa567$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf;
};
$cf41a018c4caa567$var$AES.prototype.scrub = function() {
    $cf41a018c4caa567$var$scrubVec(this._keySchedule);
    $cf41a018c4caa567$var$scrubVec(this._invKeySchedule);
    $cf41a018c4caa567$var$scrubVec(this._key);
};
$cf41a018c4caa567$export$b80fbe1c3a2b92b5 = $cf41a018c4caa567$var$AES;

});

parcelRequire.register("ezD9n", function(module, exports) {

var $iUdYW = parcelRequire("iUdYW");
var $a9c2b3fc0f81c43c$require$Buffer = $iUdYW.Buffer;
var $a9c2b3fc0f81c43c$var$ZEROES = $a9c2b3fc0f81c43c$require$Buffer.alloc(16, 0);
function $a9c2b3fc0f81c43c$var$toArray(buf) {
    return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
    ];
}
function $a9c2b3fc0f81c43c$var$fromArray(out) {
    var buf = $a9c2b3fc0f81c43c$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf;
}
function $a9c2b3fc0f81c43c$var$GHASH(key) {
    this.h = key;
    this.state = $a9c2b3fc0f81c43c$require$Buffer.alloc(16, 0);
    this.cache = $a9c2b3fc0f81c43c$require$Buffer.allocUnsafe(0);
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
$a9c2b3fc0f81c43c$var$GHASH.prototype.ghash = function(block) {
    var i = -1;
    while(++i < block.length)this.state[i] ^= block[i];
    this._multiply();
};
$a9c2b3fc0f81c43c$var$GHASH.prototype._multiply = function() {
    var Vi = $a9c2b3fc0f81c43c$var$toArray(this.h);
    var Zi = [
        0,
        0,
        0,
        0
    ];
    var j, xi, lsbVi;
    var i = -1;
    while(++i < 128){
        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
        if (xi) {
            // Z_i+1 = Z_i ^ V_i
            Zi[0] ^= Vi[0];
            Zi[1] ^= Vi[1];
            Zi[2] ^= Vi[2];
            Zi[3] ^= Vi[3];
        }
        // Store the value of LSB(V_i)
        lsbVi = (Vi[3] & 1) !== 0;
        // V_i+1 = V_i >> 1
        for(j = 3; j > 0; j--)Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        Vi[0] = Vi[0] >>> 1;
        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
        if (lsbVi) Vi[0] = Vi[0] ^ -520093696;
    }
    this.state = $a9c2b3fc0f81c43c$var$fromArray(Zi);
};
$a9c2b3fc0f81c43c$var$GHASH.prototype.update = function(buf) {
    this.cache = $a9c2b3fc0f81c43c$require$Buffer.concat([
        this.cache,
        buf
    ]);
    var chunk;
    while(this.cache.length >= 16){
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
    }
};
$a9c2b3fc0f81c43c$var$GHASH.prototype.final = function(abl, bl) {
    if (this.cache.length) this.ghash($a9c2b3fc0f81c43c$require$Buffer.concat([
        this.cache,
        $a9c2b3fc0f81c43c$var$ZEROES
    ], 16));
    this.ghash($a9c2b3fc0f81c43c$var$fromArray([
        0,
        abl,
        0,
        bl
    ]));
    return this.state;
};
module.exports = $a9c2b3fc0f81c43c$var$GHASH;

});


parcelRequire.register("TbKPi", function(module, exports) {

var $hNdGi = parcelRequire("hNdGi");

var $iUdYW = parcelRequire("iUdYW");
var $0a5e41522981ff87$require$Buffer = $iUdYW.Buffer;

var $l6Nd0 = parcelRequire("l6Nd0");

var $4gPgC = parcelRequire("4gPgC");
function $0a5e41522981ff87$var$StreamCipher(mode, key, iv, decrypt) {
    $l6Nd0.call(this);
    this._cipher = new $hNdGi.AES(key);
    this._prev = $0a5e41522981ff87$require$Buffer.from(iv);
    this._cache = $0a5e41522981ff87$require$Buffer.allocUnsafe(0);
    this._secCache = $0a5e41522981ff87$require$Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
}
$4gPgC($0a5e41522981ff87$var$StreamCipher, $l6Nd0);
$0a5e41522981ff87$var$StreamCipher.prototype._update = function(chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt);
};
$0a5e41522981ff87$var$StreamCipher.prototype._final = function() {
    this._cipher.scrub();
};
module.exports = $0a5e41522981ff87$var$StreamCipher;

});

parcelRequire.register("60byP", function(module, exports) {

var $iUdYW = parcelRequire("iUdYW");
var $45ebb5df2fe2f913$require$Buffer = $iUdYW.Buffer;

var $lOs9b = parcelRequire("lOs9b");
/* eslint-disable camelcase */ function $45ebb5df2fe2f913$var$EVP_BytesToKey(password, salt, keyBits, ivLen) {
    if (!$45ebb5df2fe2f913$require$Buffer.isBuffer(password)) password = $45ebb5df2fe2f913$require$Buffer.from(password, "binary");
    if (salt) {
        if (!$45ebb5df2fe2f913$require$Buffer.isBuffer(salt)) salt = $45ebb5df2fe2f913$require$Buffer.from(salt, "binary");
        if (salt.length !== 8) throw new RangeError("salt should be Buffer with 8 byte length");
    }
    var keyLen = keyBits / 8;
    var key = $45ebb5df2fe2f913$require$Buffer.alloc(keyLen);
    var iv = $45ebb5df2fe2f913$require$Buffer.alloc(ivLen || 0);
    var tmp = $45ebb5df2fe2f913$require$Buffer.alloc(0);
    while(keyLen > 0 || ivLen > 0){
        var hash = new $lOs9b();
        hash.update(tmp);
        hash.update(password);
        if (salt) hash.update(salt);
        tmp = hash.digest();
        var used = 0;
        if (keyLen > 0) {
            var keyStart = key.length - keyLen;
            used = Math.min(keyLen, tmp.length);
            tmp.copy(key, keyStart, 0, used);
            keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
            var ivStart = iv.length - ivLen;
            var length = Math.min(ivLen, tmp.length - used);
            tmp.copy(iv, ivStart, used, used + length);
            ivLen -= length;
        }
    }
    tmp.fill(0);
    return {
        key: key,
        iv: iv
    };
}
module.exports = $45ebb5df2fe2f913$var$EVP_BytesToKey;

});


parcelRequire.register("ihzTQ", function(module, exports) {

$parcel$export(module.exports, "createDecipher", () => $d4f5a97848d3e33b$export$12ada9414fbc594c, (v) => $d4f5a97848d3e33b$export$12ada9414fbc594c = v);
$parcel$export(module.exports, "createDecipheriv", () => $d4f5a97848d3e33b$export$36b6d6ef312eab39, (v) => $d4f5a97848d3e33b$export$36b6d6ef312eab39 = v);
var $d4f5a97848d3e33b$export$12ada9414fbc594c;
var $d4f5a97848d3e33b$export$36b6d6ef312eab39;

var $irHON = parcelRequire("irHON");

var $iUdYW = parcelRequire("iUdYW");
var $d4f5a97848d3e33b$require$Buffer = $iUdYW.Buffer;

var $kN4pE = parcelRequire("kN4pE");

var $TbKPi = parcelRequire("TbKPi");

var $l6Nd0 = parcelRequire("l6Nd0");

var $hNdGi = parcelRequire("hNdGi");

var $60byP = parcelRequire("60byP");

var $4gPgC = parcelRequire("4gPgC");
function $d4f5a97848d3e33b$var$Decipher(mode, key, iv) {
    $l6Nd0.call(this);
    this._cache = new $d4f5a97848d3e33b$var$Splitter();
    this._last = void 0;
    this._cipher = new $hNdGi.AES(key);
    this._prev = $d4f5a97848d3e33b$require$Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
$4gPgC($d4f5a97848d3e33b$var$Decipher, $l6Nd0);
$d4f5a97848d3e33b$var$Decipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get(this._autopadding)){
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
    }
    return $d4f5a97848d3e33b$require$Buffer.concat(out);
};
$d4f5a97848d3e33b$var$Decipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) return $d4f5a97848d3e33b$var$unpad(this._mode.decrypt(this, chunk));
    else if (chunk) throw new Error("data not multiple of block length");
};
$d4f5a97848d3e33b$var$Decipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function $d4f5a97848d3e33b$var$Splitter() {
    this.cache = $d4f5a97848d3e33b$require$Buffer.allocUnsafe(0);
}
$d4f5a97848d3e33b$var$Splitter.prototype.add = function(data) {
    this.cache = $d4f5a97848d3e33b$require$Buffer.concat([
        this.cache,
        data
    ]);
};
$d4f5a97848d3e33b$var$Splitter.prototype.get = function(autoPadding) {
    var out;
    if (autoPadding) {
        if (this.cache.length > 16) {
            out = this.cache.slice(0, 16);
            this.cache = this.cache.slice(16);
            return out;
        }
    } else if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
$d4f5a97848d3e33b$var$Splitter.prototype.flush = function() {
    if (this.cache.length) return this.cache;
};
function $d4f5a97848d3e33b$var$unpad(last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) throw new Error("unable to decrypt data");
    var i = -1;
    while(++i < padded){
        if (last[i + (16 - padded)] !== padded) throw new Error("unable to decrypt data");
    }
    if (padded === 16) return;
    return last.slice(0, 16 - padded);
}
function $d4f5a97848d3e33b$var$createDecipheriv(suite, password, iv) {
    var config = $kN4pE[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    if (typeof iv === "string") iv = $d4f5a97848d3e33b$require$Buffer.from(iv);
    if (config.mode !== "GCM" && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
    if (typeof password === "string") password = $d4f5a97848d3e33b$require$Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
    if (config.type === "stream") return new $TbKPi(config.module, password, iv, true);
    else if (config.type === "auth") return new $irHON(config.module, password, iv, true);
    return new $d4f5a97848d3e33b$var$Decipher(config.module, password, iv);
}
function $d4f5a97848d3e33b$var$createDecipher(suite, password) {
    var config = $kN4pE[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    var keys = $60byP(password, false, config.key, config.iv);
    return $d4f5a97848d3e33b$var$createDecipheriv(suite, keys.key, keys.iv);
}
$d4f5a97848d3e33b$export$12ada9414fbc594c = $d4f5a97848d3e33b$var$createDecipher;
$d4f5a97848d3e33b$export$36b6d6ef312eab39 = $d4f5a97848d3e33b$var$createDecipheriv;

});


parcelRequire.register("3Uj2k", function(module, exports) {

$parcel$export(module.exports, "des-ecb", () => $2d855e4eb4e26a59$export$116f8a5cee447347, (v) => $2d855e4eb4e26a59$export$116f8a5cee447347 = v);
$parcel$export(module.exports, "des-cbc", () => $2d855e4eb4e26a59$export$7483c4066bfb7ae9, (v) => $2d855e4eb4e26a59$export$7483c4066bfb7ae9 = v);
$parcel$export(module.exports, "des", () => $2d855e4eb4e26a59$export$e7a565d2e588bb06, (v) => $2d855e4eb4e26a59$export$e7a565d2e588bb06 = v);
$parcel$export(module.exports, "des-ede3-cbc", () => $2d855e4eb4e26a59$export$aaa2f54a426f3eb8, (v) => $2d855e4eb4e26a59$export$aaa2f54a426f3eb8 = v);
$parcel$export(module.exports, "des3", () => $2d855e4eb4e26a59$export$eba20568dde4ada, (v) => $2d855e4eb4e26a59$export$eba20568dde4ada = v);
$parcel$export(module.exports, "des-ede3", () => $2d855e4eb4e26a59$export$d3b5e5996938f5ae, (v) => $2d855e4eb4e26a59$export$d3b5e5996938f5ae = v);
$parcel$export(module.exports, "des-ede-cbc", () => $2d855e4eb4e26a59$export$57c08356130bc99b, (v) => $2d855e4eb4e26a59$export$57c08356130bc99b = v);
$parcel$export(module.exports, "des-ede", () => $2d855e4eb4e26a59$export$c7169791d5c1e65d, (v) => $2d855e4eb4e26a59$export$c7169791d5c1e65d = v);
var $2d855e4eb4e26a59$export$116f8a5cee447347;
var $2d855e4eb4e26a59$export$7483c4066bfb7ae9;
var $2d855e4eb4e26a59$export$e7a565d2e588bb06;
var $2d855e4eb4e26a59$export$aaa2f54a426f3eb8;
var $2d855e4eb4e26a59$export$eba20568dde4ada;
var $2d855e4eb4e26a59$export$d3b5e5996938f5ae;
var $2d855e4eb4e26a59$export$57c08356130bc99b;
var $2d855e4eb4e26a59$export$c7169791d5c1e65d;
$2d855e4eb4e26a59$export$116f8a5cee447347 = {
    key: 8,
    iv: 0
};
$2d855e4eb4e26a59$export$7483c4066bfb7ae9 = $2d855e4eb4e26a59$export$e7a565d2e588bb06 = {
    key: 8,
    iv: 8
};
$2d855e4eb4e26a59$export$aaa2f54a426f3eb8 = $2d855e4eb4e26a59$export$eba20568dde4ada = {
    key: 24,
    iv: 8
};
$2d855e4eb4e26a59$export$d3b5e5996938f5ae = {
    key: 24,
    iv: 0
};
$2d855e4eb4e26a59$export$57c08356130bc99b = {
    key: 16,
    iv: 8
};
$2d855e4eb4e26a59$export$c7169791d5c1e65d = {
    key: 16,
    iv: 0
};

});


parcelRequire.register("4zVEV", function(module, exports) {

$parcel$export(module.exports, "DiffieHellmanGroup", () => $35572837e181333b$export$971862a2fcb1bb40, (v) => $35572837e181333b$export$971862a2fcb1bb40 = v);
$parcel$export(module.exports, "createDiffieHellmanGroup", () => $35572837e181333b$export$c6ff6a88acbeaf40, (v) => $35572837e181333b$export$c6ff6a88acbeaf40 = v);
$parcel$export(module.exports, "getDiffieHellman", () => $35572837e181333b$export$fdc27893e98845cc, (v) => $35572837e181333b$export$fdc27893e98845cc = v);
$parcel$export(module.exports, "createDiffieHellman", () => $35572837e181333b$export$6671fb9a1323bed, (v) => $35572837e181333b$export$6671fb9a1323bed = v);
$parcel$export(module.exports, "DiffieHellman", () => $35572837e181333b$export$d74daf141a551db, (v) => $35572837e181333b$export$d74daf141a551db = v);
var $35572837e181333b$export$971862a2fcb1bb40;
var $35572837e181333b$export$c6ff6a88acbeaf40;
var $35572837e181333b$export$fdc27893e98845cc;
var $35572837e181333b$export$6671fb9a1323bed;
var $35572837e181333b$export$d74daf141a551db;

var $35572837e181333b$require$Buffer = $bFvJb$buffer.Buffer;

var $aIOjU = parcelRequire("aIOjU");

var $kOLrC = parcelRequire("kOLrC");

var $iEFrk = parcelRequire("iEFrk");
function $35572837e181333b$var$getDiffieHellman(mod) {
    var prime = new $35572837e181333b$require$Buffer($kOLrC[mod].prime, "hex");
    var gen = new $35572837e181333b$require$Buffer($kOLrC[mod].gen, "hex");
    return new $iEFrk(prime, gen);
}
var $35572837e181333b$var$ENCODINGS = {
    "binary": true,
    "hex": true,
    "base64": true
};
function $35572837e181333b$var$createDiffieHellman(prime, enc, generator, genc) {
    if ($35572837e181333b$require$Buffer.isBuffer(enc) || $35572837e181333b$var$ENCODINGS[enc] === undefined) return $35572837e181333b$var$createDiffieHellman(prime, "binary", enc, generator);
    enc = enc || "binary";
    genc = genc || "binary";
    generator = generator || new $35572837e181333b$require$Buffer([
        2
    ]);
    if (!$35572837e181333b$require$Buffer.isBuffer(generator)) generator = new $35572837e181333b$require$Buffer(generator, genc);
    if (typeof prime === "number") return new $iEFrk($aIOjU(prime, generator), generator, true);
    if (!$35572837e181333b$require$Buffer.isBuffer(prime)) prime = new $35572837e181333b$require$Buffer(prime, enc);
    return new $iEFrk(prime, generator, true);
}
$35572837e181333b$export$971862a2fcb1bb40 = $35572837e181333b$export$c6ff6a88acbeaf40 = $35572837e181333b$export$fdc27893e98845cc = $35572837e181333b$var$getDiffieHellman;
$35572837e181333b$export$6671fb9a1323bed = $35572837e181333b$export$d74daf141a551db = $35572837e181333b$var$createDiffieHellman;

});
parcelRequire.register("aIOjU", function(module, exports) {

var $pV6F5 = parcelRequire("pV6F5");
module.exports = $7ce50bf83fcc348c$var$findPrime;
$7ce50bf83fcc348c$var$findPrime.simpleSieve = $7ce50bf83fcc348c$var$simpleSieve;
$7ce50bf83fcc348c$var$findPrime.fermatTest = $7ce50bf83fcc348c$var$fermatTest;

var $787ge = parcelRequire("787ge");
var $7ce50bf83fcc348c$var$TWENTYFOUR = new $787ge(24);

var $1Yv9b = parcelRequire("1Yv9b");
var $7ce50bf83fcc348c$var$millerRabin = new $1Yv9b();
var $7ce50bf83fcc348c$var$ONE = new $787ge(1);
var $7ce50bf83fcc348c$var$TWO = new $787ge(2);
var $7ce50bf83fcc348c$var$FIVE = new $787ge(5);
var $7ce50bf83fcc348c$var$SIXTEEN = new $787ge(16);
var $7ce50bf83fcc348c$var$EIGHT = new $787ge(8);
var $7ce50bf83fcc348c$var$TEN = new $787ge(10);
var $7ce50bf83fcc348c$var$THREE = new $787ge(3);
var $7ce50bf83fcc348c$var$SEVEN = new $787ge(7);
var $7ce50bf83fcc348c$var$ELEVEN = new $787ge(11);
var $7ce50bf83fcc348c$var$FOUR = new $787ge(4);
var $7ce50bf83fcc348c$var$TWELVE = new $787ge(12);
var $7ce50bf83fcc348c$var$primes = null;
function $7ce50bf83fcc348c$var$_getPrimes() {
    if ($7ce50bf83fcc348c$var$primes !== null) return $7ce50bf83fcc348c$var$primes;
    var limit = 0x100000;
    var res = [];
    res[0] = 2;
    for(var i = 1, k = 3; k < limit; k += 2){
        var sqrt = Math.ceil(Math.sqrt(k));
        for(var j = 0; j < i && res[j] <= sqrt; j++)if (k % res[j] === 0) break;
        if (i !== j && res[j] <= sqrt) continue;
        res[i++] = k;
    }
    $7ce50bf83fcc348c$var$primes = res;
    return res;
}
function $7ce50bf83fcc348c$var$simpleSieve(p) {
    var primes = $7ce50bf83fcc348c$var$_getPrimes();
    for(var i = 0; i < primes.length; i++)if (p.modn(primes[i]) === 0) {
        if (p.cmpn(primes[i]) === 0) return true;
        else return false;
    }
    return true;
}
function $7ce50bf83fcc348c$var$fermatTest(p) {
    var red = $787ge.mont(p);
    return $7ce50bf83fcc348c$var$TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}
function $7ce50bf83fcc348c$var$findPrime(bits, gen) {
    if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) return new $787ge([
            0x8c,
            0x7b
        ]);
        else return new $787ge([
            0x8c,
            0x27
        ]);
    }
    gen = new $787ge(gen);
    var num, n2;
    while(true){
        num = new $787ge($pV6F5(Math.ceil(bits / 8)));
        while(num.bitLength() > bits)num.ishrn(1);
        if (num.isEven()) num.iadd($7ce50bf83fcc348c$var$ONE);
        if (!num.testn(1)) num.iadd($7ce50bf83fcc348c$var$TWO);
        if (!gen.cmp($7ce50bf83fcc348c$var$TWO)) while(num.mod($7ce50bf83fcc348c$var$TWENTYFOUR).cmp($7ce50bf83fcc348c$var$ELEVEN))num.iadd($7ce50bf83fcc348c$var$FOUR);
        else if (!gen.cmp($7ce50bf83fcc348c$var$FIVE)) while(num.mod($7ce50bf83fcc348c$var$TEN).cmp($7ce50bf83fcc348c$var$THREE))num.iadd($7ce50bf83fcc348c$var$FOUR);
        n2 = num.shrn(1);
        if ($7ce50bf83fcc348c$var$simpleSieve(n2) && $7ce50bf83fcc348c$var$simpleSieve(num) && $7ce50bf83fcc348c$var$fermatTest(n2) && $7ce50bf83fcc348c$var$fermatTest(num) && $7ce50bf83fcc348c$var$millerRabin.test(n2) && $7ce50bf83fcc348c$var$millerRabin.test(num)) return num;
    }
}

});
parcelRequire.register("787ge", function(module, exports) {

(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = (parcelRequire("fNNvm")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("1Yv9b", function(module, exports) {

var $1qfBJ = parcelRequire("1qfBJ");

var $8BHpz = parcelRequire("8BHpz");
function $17038e36bd029c21$var$MillerRabin(rand) {
    this.rand = rand || new $8BHpz.Rand();
}
module.exports = $17038e36bd029c21$var$MillerRabin;
$17038e36bd029c21$var$MillerRabin.create = function create(rand) {
    return new $17038e36bd029c21$var$MillerRabin(rand);
};
$17038e36bd029c21$var$MillerRabin.prototype._randbelow = function _randbelow(n) {
    var len = n.bitLength();
    var min_bytes = Math.ceil(len / 8);
    // Generage random bytes until a number less than n is found.
    // This ensures that 0..n-1 have an equal probability of being selected.
    do var a = new $1qfBJ(this.rand.generate(min_bytes));
    while (a.cmp(n) >= 0);
    return a;
};
$17038e36bd029c21$var$MillerRabin.prototype._randrange = function _randrange(start, stop) {
    // Generate a random number greater than or equal to start and less than stop.
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
};
$17038e36bd029c21$var$MillerRabin.prototype.test = function test(n, k, cb) {
    var len = n.bitLength();
    var red = $1qfBJ.mont(n);
    var rone = new $1qfBJ(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    var prime = true;
    for(; k > 0; k--){
        var a = this._randrange(new $1qfBJ(2), n1);
        if (cb) cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return false;
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) return false;
    }
    return prime;
};
$17038e36bd029c21$var$MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
    var len = n.bitLength();
    var red = $1qfBJ.mont(n);
    var rone = new $1qfBJ(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    for(; k > 0; k--){
        var a = this._randrange(new $1qfBJ(2), n1);
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0) return g;
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) {
            x = x.redSqr();
            return x.fromRed().subn(1).gcd(n);
        }
    }
    return false;
};

});
parcelRequire.register("1qfBJ", function(module, exports) {

(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = (parcelRequire("fNNvm")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("8BHpz", function(module, exports) {
var $6443740fa31c23bc$var$r;
module.exports = function rand(len) {
    if (!$6443740fa31c23bc$var$r) $6443740fa31c23bc$var$r = new $6443740fa31c23bc$var$Rand(null);
    return $6443740fa31c23bc$var$r.generate(len);
};
function $6443740fa31c23bc$var$Rand(rand) {
    this.rand = rand;
}
module.exports.Rand = $6443740fa31c23bc$var$Rand;
$6443740fa31c23bc$var$Rand.prototype.generate = function generate(len) {
    return this._rand(len);
};
// Emulate crypto API using randy
$6443740fa31c23bc$var$Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes) return this.rand.getBytes(n);
    var res = new Uint8Array(n);
    for(var i = 0; i < res.length; i++)res[i] = this.rand.getByte();
    return res;
};

if (typeof self === "object") {
    if (self.crypto && self.crypto.getRandomValues) // Modern browsers
    $6443740fa31c23bc$var$Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
    };
    else if (self.msCrypto && self.msCrypto.getRandomValues) // IE
    $6443740fa31c23bc$var$Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
    };
    else if (typeof window === "object") // Old junk
    $6443740fa31c23bc$var$Rand.prototype._rand = function() {
        throw new Error("Not implemented yet");
    };
} else // Node.js or Web worker with no crypto support
try {
    var $6443740fa31c23bc$var$crypto = (parcelRequire("d2RPc"));
    if (typeof $6443740fa31c23bc$var$crypto.randomBytes !== "function") throw new Error("Not supported");
    $6443740fa31c23bc$var$Rand.prototype._rand = function _rand(n) {
        return $6443740fa31c23bc$var$crypto.randomBytes(n);
    };
} catch (e) {}

});



parcelRequire.register("kOLrC", function(module, exports) {
module.exports = JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}');

});

parcelRequire.register("iEFrk", function(module, exports) {

var $d94c1b803f8dc3b0$require$Buffer = $bFvJb$buffer.Buffer;

var $787ge = parcelRequire("787ge");

var $1Yv9b = parcelRequire("1Yv9b");
var $d94c1b803f8dc3b0$var$millerRabin = new $1Yv9b();
var $d94c1b803f8dc3b0$var$TWENTYFOUR = new $787ge(24);
var $d94c1b803f8dc3b0$var$ELEVEN = new $787ge(11);
var $d94c1b803f8dc3b0$var$TEN = new $787ge(10);
var $d94c1b803f8dc3b0$var$THREE = new $787ge(3);
var $d94c1b803f8dc3b0$var$SEVEN = new $787ge(7);

var $aIOjU = parcelRequire("aIOjU");

var $pV6F5 = parcelRequire("pV6F5");
module.exports = $d94c1b803f8dc3b0$var$DH;
function $d94c1b803f8dc3b0$var$setPublicKey(pub, enc) {
    enc = enc || "utf8";
    if (!$d94c1b803f8dc3b0$require$Buffer.isBuffer(pub)) pub = new $d94c1b803f8dc3b0$require$Buffer(pub, enc);
    this._pub = new $787ge(pub);
    return this;
}
function $d94c1b803f8dc3b0$var$setPrivateKey(priv, enc) {
    enc = enc || "utf8";
    if (!$d94c1b803f8dc3b0$require$Buffer.isBuffer(priv)) priv = new $d94c1b803f8dc3b0$require$Buffer(priv, enc);
    this._priv = new $787ge(priv);
    return this;
}
var $d94c1b803f8dc3b0$var$primeCache = {};
function $d94c1b803f8dc3b0$var$checkPrime(prime, generator) {
    var gen = generator.toString("hex");
    var hex = [
        gen,
        prime.toString(16)
    ].join("_");
    if (hex in $d94c1b803f8dc3b0$var$primeCache) return $d94c1b803f8dc3b0$var$primeCache[hex];
    var error = 0;
    if (prime.isEven() || !$aIOjU.simpleSieve || !$aIOjU.fermatTest(prime) || !$d94c1b803f8dc3b0$var$millerRabin.test(prime)) {
        //not a prime so +1
        error += 1;
        if (gen === "02" || gen === "05") // we'd be able to check the generator
        // it would fail so +8
        error += 8;
        else //we wouldn't be able to test the generator
        // so +4
        error += 4;
        $d94c1b803f8dc3b0$var$primeCache[hex] = error;
        return error;
    }
    if (!$d94c1b803f8dc3b0$var$millerRabin.test(prime.shrn(1))) //not a safe prime
    error += 2;
    var rem;
    switch(gen){
        case "02":
            if (prime.mod($d94c1b803f8dc3b0$var$TWENTYFOUR).cmp($d94c1b803f8dc3b0$var$ELEVEN)) // unsuidable generator
            error += 8;
            break;
        case "05":
            rem = prime.mod($d94c1b803f8dc3b0$var$TEN);
            if (rem.cmp($d94c1b803f8dc3b0$var$THREE) && rem.cmp($d94c1b803f8dc3b0$var$SEVEN)) // prime mod 10 needs to equal 3 or 7
            error += 8;
            break;
        default:
            error += 4;
    }
    $d94c1b803f8dc3b0$var$primeCache[hex] = error;
    return error;
}
function $d94c1b803f8dc3b0$var$DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new $787ge(prime);
    this._prime = $787ge.mont(this.__prime);
    this._primeLen = prime.length;
    this._pub = undefined;
    this._priv = undefined;
    this._primeCode = undefined;
    if (malleable) {
        this.setPublicKey = $d94c1b803f8dc3b0$var$setPublicKey;
        this.setPrivateKey = $d94c1b803f8dc3b0$var$setPrivateKey;
    } else this._primeCode = 8;
}
Object.defineProperty($d94c1b803f8dc3b0$var$DH.prototype, "verifyError", {
    enumerable: true,
    get: function() {
        if (typeof this._primeCode !== "number") this._primeCode = $d94c1b803f8dc3b0$var$checkPrime(this.__prime, this.__gen);
        return this._primeCode;
    }
});
$d94c1b803f8dc3b0$var$DH.prototype.generateKeys = function() {
    if (!this._priv) this._priv = new $787ge($pV6F5(this._primeLen));
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
};
$d94c1b803f8dc3b0$var$DH.prototype.computeSecret = function(other) {
    other = new $787ge(other);
    other = other.toRed(this._prime);
    var secret = other.redPow(this._priv).fromRed();
    var out = new $d94c1b803f8dc3b0$require$Buffer(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
        var front = new $d94c1b803f8dc3b0$require$Buffer(prime.length - out.length);
        front.fill(0);
        out = $d94c1b803f8dc3b0$require$Buffer.concat([
            front,
            out
        ]);
    }
    return out;
};
$d94c1b803f8dc3b0$var$DH.prototype.getPublicKey = function getPublicKey(enc) {
    return $d94c1b803f8dc3b0$var$formatReturnValue(this._pub, enc);
};
$d94c1b803f8dc3b0$var$DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return $d94c1b803f8dc3b0$var$formatReturnValue(this._priv, enc);
};
$d94c1b803f8dc3b0$var$DH.prototype.getPrime = function(enc) {
    return $d94c1b803f8dc3b0$var$formatReturnValue(this.__prime, enc);
};
$d94c1b803f8dc3b0$var$DH.prototype.getGenerator = function(enc) {
    return $d94c1b803f8dc3b0$var$formatReturnValue(this._gen, enc);
};
$d94c1b803f8dc3b0$var$DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || "utf8";
    if (!$d94c1b803f8dc3b0$require$Buffer.isBuffer(gen)) gen = new $d94c1b803f8dc3b0$require$Buffer(gen, enc);
    this.__gen = gen;
    this._gen = new $787ge(gen);
    return this;
};
function $d94c1b803f8dc3b0$var$formatReturnValue(bn, enc) {
    var buf = new $d94c1b803f8dc3b0$require$Buffer(bn.toArray());
    if (!enc) return buf;
    else return buf.toString(enc);
}

});


parcelRequire.register("bDxpp", function(module, exports) {

var $iUdYW = parcelRequire("iUdYW");
var $878d4083afab0b80$require$Buffer = $iUdYW.Buffer;

var $2CNNr = parcelRequire("2CNNr");

var $jicMk = parcelRequire("jicMk");

var $4gPgC = parcelRequire("4gPgC");

var $7kUYC = parcelRequire("7kUYC");

var $6agQI = parcelRequire("6agQI");

var $kK12h = parcelRequire("kK12h");
Object.keys($kK12h).forEach(function(key) {
    $kK12h[key].id = $878d4083afab0b80$require$Buffer.from($kK12h[key].id, "hex");
    $kK12h[key.toLowerCase()] = $kK12h[key];
});
function $878d4083afab0b80$var$Sign(algorithm) {
    $jicMk.Writable.call(this);
    var data = $kK12h[algorithm];
    if (!data) throw new Error("Unknown message digest");
    this._hashType = data.hash;
    this._hash = $2CNNr(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
$4gPgC($878d4083afab0b80$var$Sign, $jicMk.Writable);
$878d4083afab0b80$var$Sign.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
$878d4083afab0b80$var$Sign.prototype.update = function update(data, enc) {
    if (typeof data === "string") data = $878d4083afab0b80$require$Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
$878d4083afab0b80$var$Sign.prototype.sign = function signMethod(key, enc) {
    this.end();
    var hash = this._hash.digest();
    var sig = $7kUYC(hash, key, this._hashType, this._signType, this._tag);
    return enc ? sig.toString(enc) : sig;
};
function $878d4083afab0b80$var$Verify(algorithm) {
    $jicMk.Writable.call(this);
    var data = $kK12h[algorithm];
    if (!data) throw new Error("Unknown message digest");
    this._hash = $2CNNr(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
$4gPgC($878d4083afab0b80$var$Verify, $jicMk.Writable);
$878d4083afab0b80$var$Verify.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
$878d4083afab0b80$var$Verify.prototype.update = function update(data, enc) {
    if (typeof data === "string") data = $878d4083afab0b80$require$Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
$878d4083afab0b80$var$Verify.prototype.verify = function verifyMethod(key, sig, enc) {
    if (typeof sig === "string") sig = $878d4083afab0b80$require$Buffer.from(sig, enc);
    this.end();
    var hash = this._hash.digest();
    return $6agQI(sig, hash, key, this._signType, this._tag);
};
function $878d4083afab0b80$var$createSign(algorithm) {
    return new $878d4083afab0b80$var$Sign(algorithm);
}
function $878d4083afab0b80$var$createVerify(algorithm) {
    return new $878d4083afab0b80$var$Verify(algorithm);
}
module.exports = {
    Sign: $878d4083afab0b80$var$createSign,
    Verify: $878d4083afab0b80$var$createVerify,
    createSign: $878d4083afab0b80$var$createSign,
    createVerify: $878d4083afab0b80$var$createVerify
};

});
parcelRequire.register("7kUYC", function(module, exports) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js

var $iUdYW = parcelRequire("iUdYW");
var $5576990dd8697fa1$require$Buffer = $iUdYW.Buffer;

var $6rvaV = parcelRequire("6rvaV");

var $1w2rX = parcelRequire("1w2rX");

var $eGOZX = parcelRequire("eGOZX");
var $5576990dd8697fa1$require$EC = $eGOZX.ec;

var $03UvU = parcelRequire("03UvU");

var $4oqj4 = parcelRequire("4oqj4");

var $7FRDK = parcelRequire("7FRDK");
function $5576990dd8697fa1$var$sign(hash, key, hashType, signType, tag) {
    var priv = $4oqj4(key);
    if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== "ecdsa" && signType !== "ecdsa/rsa") throw new Error("wrong private key type");
        return $5576990dd8697fa1$var$ecSign(hash, priv);
    } else if (priv.type === "dsa") {
        if (signType !== "dsa") throw new Error("wrong private key type");
        return $5576990dd8697fa1$var$dsaSign(hash, priv, hashType);
    } else {
        if (signType !== "rsa" && signType !== "ecdsa/rsa") throw new Error("wrong private key type");
    }
    hash = $5576990dd8697fa1$require$Buffer.concat([
        tag,
        hash
    ]);
    var len = priv.modulus.byteLength();
    var pad = [
        0,
        1
    ];
    while(hash.length + pad.length + 1 < len)pad.push(0xff);
    pad.push(0x00);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    var out = $1w2rX(pad, priv);
    return out;
}
function $5576990dd8697fa1$var$ecSign(hash, priv) {
    var curveId = $7FRDK[priv.curve.join(".")];
    if (!curveId) throw new Error("unknown curve " + priv.curve.join("."));
    var curve = new $5576990dd8697fa1$require$EC(curveId);
    var key = curve.keyFromPrivate(priv.privateKey);
    var out = key.sign(hash);
    return $5576990dd8697fa1$require$Buffer.from(out.toDER());
}
function $5576990dd8697fa1$var$dsaSign(hash, priv, algo) {
    var x = priv.params.priv_key;
    var p = priv.params.p;
    var q = priv.params.q;
    var g = priv.params.g;
    var r = new $03UvU(0);
    var k;
    var H = $5576990dd8697fa1$var$bits2int(hash, q).mod(q);
    var s = false;
    var kv = $5576990dd8697fa1$var$getKey(x, q, hash, algo);
    while(s === false){
        k = $5576990dd8697fa1$var$makeKey(q, kv, algo);
        r = $5576990dd8697fa1$var$makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
        if (s.cmpn(0) === 0) {
            s = false;
            r = new $03UvU(0);
        }
    }
    return $5576990dd8697fa1$var$toDER(r, s);
}
function $5576990dd8697fa1$var$toDER(r, s) {
    r = r.toArray();
    s = s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    var total = r.length + s.length + 4;
    var res = [
        0x30,
        total,
        0x02,
        r.length
    ];
    res = res.concat(r, [
        0x02,
        s.length
    ], s);
    return $5576990dd8697fa1$require$Buffer.from(res);
}
function $5576990dd8697fa1$var$getKey(x, q, hash, algo) {
    x = $5576990dd8697fa1$require$Buffer.from(x.toArray());
    if (x.length < q.byteLength()) {
        var zeros = $5576990dd8697fa1$require$Buffer.alloc(q.byteLength() - x.length);
        x = $5576990dd8697fa1$require$Buffer.concat([
            zeros,
            x
        ]);
    }
    var hlen = hash.length;
    var hbits = $5576990dd8697fa1$var$bits2octets(hash, q);
    var v = $5576990dd8697fa1$require$Buffer.alloc(hlen);
    v.fill(1);
    var k = $5576990dd8697fa1$require$Buffer.alloc(hlen);
    k = $6rvaV(algo, k).update(v).update($5576990dd8697fa1$require$Buffer.from([
        0
    ])).update(x).update(hbits).digest();
    v = $6rvaV(algo, k).update(v).digest();
    k = $6rvaV(algo, k).update(v).update($5576990dd8697fa1$require$Buffer.from([
        1
    ])).update(x).update(hbits).digest();
    v = $6rvaV(algo, k).update(v).digest();
    return {
        k: k,
        v: v
    };
}
function $5576990dd8697fa1$var$bits2int(obits, q) {
    var bits = new $03UvU(obits);
    var shift = (obits.length << 3) - q.bitLength();
    if (shift > 0) bits.ishrn(shift);
    return bits;
}
function $5576990dd8697fa1$var$bits2octets(bits, q) {
    bits = $5576990dd8697fa1$var$bits2int(bits, q);
    bits = bits.mod(q);
    var out = $5576990dd8697fa1$require$Buffer.from(bits.toArray());
    if (out.length < q.byteLength()) {
        var zeros = $5576990dd8697fa1$require$Buffer.alloc(q.byteLength() - out.length);
        out = $5576990dd8697fa1$require$Buffer.concat([
            zeros,
            out
        ]);
    }
    return out;
}
function $5576990dd8697fa1$var$makeKey(q, kv, algo) {
    var t;
    var k;
    do {
        t = $5576990dd8697fa1$require$Buffer.alloc(0);
        while(t.length * 8 < q.bitLength()){
            kv.v = $6rvaV(algo, kv.k).update(kv.v).digest();
            t = $5576990dd8697fa1$require$Buffer.concat([
                t,
                kv.v
            ]);
        }
        k = $5576990dd8697fa1$var$bits2int(t, q);
        kv.k = $6rvaV(algo, kv.k).update(kv.v).update($5576990dd8697fa1$require$Buffer.from([
            0
        ])).digest();
        kv.v = $6rvaV(algo, kv.k).update(kv.v).digest();
    }while (k.cmp(q) !== -1);
    return k;
}
function $5576990dd8697fa1$var$makeR(g, k, p, q) {
    return g.toRed($03UvU.mont(p)).redPow(k).fromRed().mod(q);
}
module.exports = $5576990dd8697fa1$var$sign;
module.exports.getKey = $5576990dd8697fa1$var$getKey;
module.exports.makeKey = $5576990dd8697fa1$var$makeKey;

});
parcelRequire.register("1w2rX", function(module, exports) {

var $11aaae1d854403e9$require$Buffer = $bFvJb$buffer.Buffer;

var $03UvU = parcelRequire("03UvU");

var $pV6F5 = parcelRequire("pV6F5");
function $11aaae1d854403e9$var$blind(priv) {
    var r = $11aaae1d854403e9$var$getr(priv);
    var blinder = r.toRed($03UvU.mont(priv.modulus)).redPow(new $03UvU(priv.publicExponent)).fromRed();
    return {
        blinder: blinder,
        unblinder: r.invm(priv.modulus)
    };
}
function $11aaae1d854403e9$var$getr(priv) {
    var len = priv.modulus.byteLength();
    var r;
    do r = new $03UvU($pV6F5(len));
    while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2));
    return r;
}
function $11aaae1d854403e9$var$crt(msg, priv) {
    var blinds = $11aaae1d854403e9$var$blind(priv);
    var len = priv.modulus.byteLength();
    var blinded = new $03UvU(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed($03UvU.mont(priv.prime1));
    var c2 = blinded.toRed($03UvU.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p = priv.prime1;
    var q = priv.prime2;
    var m1 = c1.redPow(priv.exponent1).fromRed();
    var m2 = c2.redPow(priv.exponent2).fromRed();
    var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
    return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike($11aaae1d854403e9$require$Buffer, "be", len);
}
$11aaae1d854403e9$var$crt.getr = $11aaae1d854403e9$var$getr;
module.exports = $11aaae1d854403e9$var$crt;

});
parcelRequire.register("03UvU", function(module, exports) {

(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = (parcelRequire("fNNvm")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, "Invalid character in " + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 0xa;
            else if (c >= 17) b = c - 17 + 0xa;
            else b = c;
            assert(c >= 0 && b < mul, "Invalid character");
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") try {
        BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
    } catch (e) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 0xff;
            if (position < res.length) res[position++] = word >> 8 & 0xff;
            if (position < res.length) res[position++] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 0xff;
            if (position >= 0) res[position--] = word >> 8 & 0xff;
            if (position >= 0) res[position--] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 0x01;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});


parcelRequire.register("eGOZX", function(module, exports) {
"use strict";
var $ab1c8c27a280b834$var$elliptic = module.exports;

$ab1c8c27a280b834$var$elliptic.version = (parcelRequire("fgEXG")).version;

$ab1c8c27a280b834$var$elliptic.utils = (parcelRequire("21CGS"));

$ab1c8c27a280b834$var$elliptic.rand = (parcelRequire("8BHpz"));

$ab1c8c27a280b834$var$elliptic.curve = (parcelRequire("eS8gc"));

$ab1c8c27a280b834$var$elliptic.curves = (parcelRequire("lEx2i"));

// Protocols
$ab1c8c27a280b834$var$elliptic.ec = (parcelRequire("fSDro"));

$ab1c8c27a280b834$var$elliptic.eddsa = (parcelRequire("2ugt9"));

});
parcelRequire.register("fgEXG", function(module, exports) {
module.exports = JSON.parse('{"name":"elliptic","version":"6.5.4","description":"EC cryptography","main":"lib/elliptic.js","files":["lib"],"scripts":{"lint":"eslint lib test","lint:fix":"npm run lint -- --fix","unit":"istanbul test _mocha --reporter=spec test/index.js","test":"npm run lint && npm run unit","version":"grunt dist && git add dist/"},"repository":{"type":"git","url":"git@github.com:indutny/elliptic"},"keywords":["EC","Elliptic","curve","Cryptography"],"author":"Fedor Indutny <fedor@indutny.com>","license":"MIT","bugs":{"url":"https://github.com/indutny/elliptic/issues"},"homepage":"https://github.com/indutny/elliptic","devDependencies":{"brfs":"^2.0.2","coveralls":"^3.1.0","eslint":"^7.6.0","grunt":"^1.2.1","grunt-browserify":"^5.3.0","grunt-cli":"^1.3.2","grunt-contrib-connect":"^3.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^5.0.0","grunt-mocha-istanbul":"^5.0.2","grunt-saucelabs":"^9.0.1","istanbul":"^0.4.5","mocha":"^8.0.1"},"dependencies":{"bn.js":"^4.11.9","brorand":"^1.1.0","hash.js":"^1.0.0","hmac-drbg":"^1.0.1","inherits":"^2.0.4","minimalistic-assert":"^1.0.1","minimalistic-crypto-utils":"^1.0.1"}}');

});

parcelRequire.register("21CGS", function(module, exports) {
"use strict";
var $1799afe345ae2dc6$var$utils = module.exports;

var $k00A4 = parcelRequire("k00A4");

var $fWN7B = parcelRequire("fWN7B");

var $8vVGa = parcelRequire("8vVGa");
$1799afe345ae2dc6$var$utils.assert = $fWN7B;
$1799afe345ae2dc6$var$utils.toArray = $8vVGa.toArray;
$1799afe345ae2dc6$var$utils.zero2 = $8vVGa.zero2;
$1799afe345ae2dc6$var$utils.toHex = $8vVGa.toHex;
$1799afe345ae2dc6$var$utils.encode = $8vVGa.encode;
// Represent num in a w-NAF form
function $1799afe345ae2dc6$var$getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w + 1;
    var k = num.clone();
    for(var i = 0; i < naf.length; i++){
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
            else z = mod;
            k.isubn(z);
        } else z = 0;
        naf[i] = z;
        k.iushrn(1);
    }
    return naf;
}
$1799afe345ae2dc6$var$utils.getNAF = $1799afe345ae2dc6$var$getNAF;
// Represent k1, k2 in a Joint Sparse Form
function $1799afe345ae2dc6$var$getJSF(k1, k2) {
    var jsf = [
        [],
        []
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
        // First phase
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) u1 = 0;
        else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
            else u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) u2 = 0;
        else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
            else u2 = m24;
        }
        jsf[1].push(u2);
        // Second phase
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
    }
    return jsf;
}
$1799afe345ae2dc6$var$utils.getJSF = $1799afe345ae2dc6$var$getJSF;
function $1799afe345ae2dc6$var$cachedProperty(obj, name, computer) {
    var key = "_" + name;
    obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
}
$1799afe345ae2dc6$var$utils.cachedProperty = $1799afe345ae2dc6$var$cachedProperty;
function $1799afe345ae2dc6$var$parseBytes(bytes) {
    return typeof bytes === "string" ? $1799afe345ae2dc6$var$utils.toArray(bytes, "hex") : bytes;
}
$1799afe345ae2dc6$var$utils.parseBytes = $1799afe345ae2dc6$var$parseBytes;
function $1799afe345ae2dc6$var$intFromLE(bytes) {
    return new $k00A4(bytes, "hex", "le");
}
$1799afe345ae2dc6$var$utils.intFromLE = $1799afe345ae2dc6$var$intFromLE;

});
parcelRequire.register("k00A4", function(module, exports) {

(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = (parcelRequire("fNNvm")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("8vVGa", function(module, exports) {
"use strict";
var $632df5d6e3bccac2$var$utils = module.exports;
function $632df5d6e3bccac2$var$toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg !== "string") {
        for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
        return res;
    }
    if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0) msg = "0" + msg;
        for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else for(var i = 0; i < msg.length; i++){
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);
        else res.push(lo);
    }
    return res;
}
$632df5d6e3bccac2$var$utils.toArray = $632df5d6e3bccac2$var$toArray;
function $632df5d6e3bccac2$var$zero2(word) {
    if (word.length === 1) return "0" + word;
    else return word;
}
$632df5d6e3bccac2$var$utils.zero2 = $632df5d6e3bccac2$var$zero2;
function $632df5d6e3bccac2$var$toHex(msg) {
    var res = "";
    for(var i = 0; i < msg.length; i++)res += $632df5d6e3bccac2$var$zero2(msg[i].toString(16));
    return res;
}
$632df5d6e3bccac2$var$utils.toHex = $632df5d6e3bccac2$var$toHex;
$632df5d6e3bccac2$var$utils.encode = function encode(arr, enc) {
    if (enc === "hex") return $632df5d6e3bccac2$var$toHex(arr);
    else return arr;
};

});


parcelRequire.register("eS8gc", function(module, exports) {
"use strict";
var $ad3c842474d71be3$var$curve = module.exports;

$ad3c842474d71be3$var$curve.base = (parcelRequire("AT1tH"));

$ad3c842474d71be3$var$curve.short = (parcelRequire("4eAPT"));

$ad3c842474d71be3$var$curve.mont = (parcelRequire("4alcc"));

$ad3c842474d71be3$var$curve.edwards = (parcelRequire("jhk4i"));

});
parcelRequire.register("AT1tH", function(module, exports) {
"use strict";

var $k00A4 = parcelRequire("k00A4");

var $21CGS = parcelRequire("21CGS");
var $06ee0b4c175c6f31$var$getNAF = $21CGS.getNAF;
var $06ee0b4c175c6f31$var$getJSF = $21CGS.getJSF;
var $06ee0b4c175c6f31$var$assert = $21CGS.assert;
function $06ee0b4c175c6f31$var$BaseCurve(type, conf) {
    this.type = type;
    this.p = new $k00A4(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? $k00A4.red(conf.prime) : $k00A4.mont(this.p);
    // Useful for many curves
    this.zero = new $k00A4(0).toRed(this.red);
    this.one = new $k00A4(1).toRed(this.red);
    this.two = new $k00A4(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new $k00A4(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
module.exports = $06ee0b4c175c6f31$var$BaseCurve;
$06ee0b4c175c6f31$var$BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
};
$06ee0b4c175c6f31$var$BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
};
$06ee0b4c175c6f31$var$BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    $06ee0b4c175c6f31$var$assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = $06ee0b4c175c6f31$var$getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for(j = 0; j < naf.length; j += doubles.step){
        nafW = 0;
        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for(var i = I; i > 0; i--){
        for(j = 0; j < repr.length; j++){
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
$06ee0b4c175c6f31$var$BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = $06ee0b4c175c6f31$var$getNAF(k, w, this._bitLength);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for(var i = naf.length - 1; i >= 0; i--){
        // Count zeroes
        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        $06ee0b4c175c6f31$var$assert(z !== 0);
        if (p.type === "affine") {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else // J +- J
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
        else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
    return p.type === "affine" ? acc.toP() : acc;
};
$06ee0b4c175c6f31$var$BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for(i = 0; i < len; i++){
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for(i = len - 1; i >= 1; i -= 2){
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = $06ee0b4c175c6f31$var$getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = $06ee0b4c175c6f31$var$getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            /* 1 */ null,
            /* 3 */ null,
            /* 5 */ points[b]
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            /* -1 -1 */ -1,
            /* -1 0 */ -5,
            /* -1 1 */ -7,
            /* 0 -1 */ 0,
            /* 0 0 */ 7,
            /* 0 1 */ 5,
            /* 1 -1 */ 1,
            /* 1 0 */ 3
        ];
        var jsf = $06ee0b4c175c6f31$var$getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for(j = 0; j < max; j++){
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for(i = max; i >= 0; i--){
        var k = 0;
        while(i >= 0){
            var zero = true;
            for(j = 0; j < len; j++){
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for(j = 0; j < len; j++){
            var z = tmp[j];
            p;
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][z - 1 >> 1];
            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === "affine") acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    // Zeroify references
    for(i = 0; i < len; i++)wnd[i] = null;
    if (jacobianResult) return acc;
    else return acc.toP();
};
function $06ee0b4c175c6f31$var$BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
$06ee0b4c175c6f31$var$BaseCurve.BasePoint = $06ee0b4c175c6f31$var$BasePoint;
$06ee0b4c175c6f31$var$BasePoint.prototype.eq = function eq() {
    throw new Error("Not implemented");
};
$06ee0b4c175c6f31$var$BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
};
$06ee0b4c175c6f31$var$BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = $21CGS.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06) $06ee0b4c175c6f31$var$assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07) $06ee0b4c175c6f31$var$assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    throw new Error("Unknown point format");
};
$06ee0b4c175c6f31$var$BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
$06ee0b4c175c6f31$var$BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray("be", len);
    if (compact) return [
        this.getY().isEven() ? 0x02 : 0x03
    ].concat(x);
    return [
        0x04
    ].concat(x, this.getY().toArray("be", len));
};
$06ee0b4c175c6f31$var$BasePoint.prototype.encode = function encode(enc, compact) {
    return $21CGS.encode(this._encode(compact), enc);
};
$06ee0b4c175c6f31$var$BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
$06ee0b4c175c6f31$var$BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
$06ee0b4c175c6f31$var$BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [
        this
    ];
    var acc = this;
    for(var i = 0; i < power; i += step){
        for(var j = 0; j < step; j++)acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
$06ee0b4c175c6f31$var$BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [
        this
    ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
$06ee0b4c175c6f31$var$BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
$06ee0b4c175c6f31$var$BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for(var i = 0; i < k; i++)r = r.dbl();
    return r;
};

});

parcelRequire.register("4eAPT", function(module, exports) {
"use strict";

var $21CGS = parcelRequire("21CGS");

var $k00A4 = parcelRequire("k00A4");

var $4gPgC = parcelRequire("4gPgC");

var $AT1tH = parcelRequire("AT1tH");
var $31550b10e5c54dc2$var$assert = $21CGS.assert;
function $31550b10e5c54dc2$var$ShortCurve(conf) {
    $AT1tH.call(this, "short", conf);
    this.a = new $k00A4(conf.a, 16).toRed(this.red);
    this.b = new $k00A4(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
$4gPgC($31550b10e5c54dc2$var$ShortCurve, $AT1tH);
module.exports = $31550b10e5c54dc2$var$ShortCurve;
$31550b10e5c54dc2$var$ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) beta = new $k00A4(conf.beta, 16).toRed(this.red);
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) lambda = new $k00A4(conf.lambda, 16);
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
        else {
            lambda = lambdas[1];
            $31550b10e5c54dc2$var$assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) basis = conf.basis.map(function(vec) {
        return {
            a: new $k00A4(vec.a, 16),
            b: new $k00A4(vec.b, 16)
        };
    });
    else basis = this._getEndoBasis(lambda);
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
$31550b10e5c54dc2$var$ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : $k00A4.mont(num);
    var tinv = new $k00A4(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new $k00A4(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [
        l1,
        l2
    ];
};
$31550b10e5c54dc2$var$ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new $k00A4(1);
    var y1 = new $k00A4(0);
    var x2 = new $k00A4(0);
    var y2 = new $k00A4(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while(u.cmpn(0) !== 0){
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && ++i === 2) break;
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        {
            a: a1,
            b: b1
        },
        {
            a: a2,
            b: b2
        }
    ];
};
$31550b10e5c54dc2$var$ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
        k1: k1,
        k2: k2
    };
};
$31550b10e5c54dc2$var$ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new $k00A4(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
$31550b10e5c54dc2$var$ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
$31550b10e5c54dc2$var$ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for(var i = 0; i < points.length; i++){
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    // Clean-up references to points and coefficients
    for(var j = 0; j < i * 2; j++){
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};
function $31550b10e5c54dc2$var$Point(curve, x, y, isRed) {
    $AT1tH.BasePoint.call(this, curve, "affine");
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new $k00A4(x, 16);
        this.y = new $k00A4(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
$4gPgC($31550b10e5c54dc2$var$Point, $AT1tH.BasePoint);
$31550b10e5c54dc2$var$ShortCurve.prototype.point = function point(x, y, isRed) {
    return new $31550b10e5c54dc2$var$Point(this, x, y, isRed);
};
$31550b10e5c54dc2$var$ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return $31550b10e5c54dc2$var$Point.fromJSON(this, obj, red);
};
$31550b10e5c54dc2$var$Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
$31550b10e5c54dc2$var$Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [
        this.x,
        this.y
    ];
    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }
    ];
};
$31550b10e5c54dc2$var$Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === "string") obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2]) return res;
    function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [
                res
            ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [
                res
            ].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
$31550b10e5c54dc2$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
};
$31550b10e5c54dc2$var$Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
$31550b10e5c54dc2$var$Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf) return p;
    // P + O = P
    if (p.inf) return this;
    // P + P = 2P
    if (this.eq(p)) return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p)) return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
$31550b10e5c54dc2$var$Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
$31550b10e5c54dc2$var$Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
$31550b10e5c54dc2$var$Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
$31550b10e5c54dc2$var$Point.prototype.mul = function mul(k) {
    k = new $k00A4(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
    ], [
        k
    ]);
    else return this.curve._wnafMul(this, k);
};
$31550b10e5c54dc2$var$Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
$31550b10e5c54dc2$var$Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
$31550b10e5c54dc2$var$Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
$31550b10e5c54dc2$var$Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
$31550b10e5c54dc2$var$Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function $31550b10e5c54dc2$var$JPoint(curve, x, y, z) {
    $AT1tH.BasePoint.call(this, curve, "jacobian");
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new $k00A4(0);
    } else {
        this.x = new $k00A4(x, 16);
        this.y = new $k00A4(y, 16);
        this.z = new $k00A4(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
$4gPgC($31550b10e5c54dc2$var$JPoint, $AT1tH.BasePoint);
$31550b10e5c54dc2$var$ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new $31550b10e5c54dc2$var$JPoint(this, x, y, z);
};
$31550b10e5c54dc2$var$JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
$31550b10e5c54dc2$var$JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
$31550b10e5c54dc2$var$JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity()) return p;
    // P + O = P
    if (p.isInfinity()) return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
$31550b10e5c54dc2$var$JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity()) return p.toJ();
    // P + O = P
    if (p.isInfinity()) return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
$31550b10e5c54dc2$var$JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for(i = 0; i < pow; i++)r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for(i = 0; i < pow; i++){
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
$31550b10e5c54dc2$var$JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};
$31550b10e5c54dc2$var$JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
$31550b10e5c54dc2$var$JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
$31550b10e5c54dc2$var$JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
$31550b10e5c54dc2$var$JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
$31550b10e5c54dc2$var$JPoint.prototype.mul = function mul(k, kbase) {
    k = new $k00A4(k, kbase);
    return this.curve._wnafMul(this, k);
};
$31550b10e5c54dc2$var$JPoint.prototype.eq = function eq(p) {
    if (p.type === "affine") return this.eq(p.toJ());
    if (this === p) return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
$31550b10e5c54dc2$var$JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
$31550b10e5c54dc2$var$JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
};
$31550b10e5c54dc2$var$JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

});

parcelRequire.register("4alcc", function(module, exports) {
"use strict";

var $k00A4 = parcelRequire("k00A4");

var $4gPgC = parcelRequire("4gPgC");

var $AT1tH = parcelRequire("AT1tH");

var $21CGS = parcelRequire("21CGS");
function $308889a111687b84$var$MontCurve(conf) {
    $AT1tH.call(this, "mont", conf);
    this.a = new $k00A4(conf.a, 16).toRed(this.red);
    this.b = new $k00A4(conf.b, 16).toRed(this.red);
    this.i4 = new $k00A4(4).toRed(this.red).redInvm();
    this.two = new $k00A4(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
$4gPgC($308889a111687b84$var$MontCurve, $AT1tH);
module.exports = $308889a111687b84$var$MontCurve;
$308889a111687b84$var$MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
};
function $308889a111687b84$var$Point(curve, x, z) {
    $AT1tH.BasePoint.call(this, curve, "projective");
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    } else {
        this.x = new $k00A4(x, 16);
        this.z = new $k00A4(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    }
}
$4gPgC($308889a111687b84$var$Point, $AT1tH.BasePoint);
$308889a111687b84$var$MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point($21CGS.toArray(bytes, enc), 1);
};
$308889a111687b84$var$MontCurve.prototype.point = function point(x, z) {
    return new $308889a111687b84$var$Point(this, x, z);
};
$308889a111687b84$var$MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return $308889a111687b84$var$Point.fromJSON(this, obj);
};
$308889a111687b84$var$Point.prototype.precompute = function precompute() {
// No-op
};
$308889a111687b84$var$Point.prototype._encode = function _encode() {
    return this.getX().toArray("be", this.curve.p.byteLength());
};
$308889a111687b84$var$Point.fromJSON = function fromJSON(curve, obj) {
    return new $308889a111687b84$var$Point(curve, obj[0], obj[1] || curve.one);
};
$308889a111687b84$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
};
$308889a111687b84$var$Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
$308889a111687b84$var$Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};
$308889a111687b84$var$Point.prototype.add = function add() {
    throw new Error("Not supported on Montgomery curve");
};
$308889a111687b84$var$Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};
$308889a111687b84$var$Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));
    for(var i = bits.length - 1; i >= 0; i--)if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
    } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
    }
    return b;
};
$308889a111687b84$var$Point.prototype.mulAdd = function mulAdd() {
    throw new Error("Not supported on Montgomery curve");
};
$308889a111687b84$var$Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error("Not supported on Montgomery curve");
};
$308889a111687b84$var$Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};
$308889a111687b84$var$Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};
$308889a111687b84$var$Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
    return this.x.fromRed();
};

});

parcelRequire.register("jhk4i", function(module, exports) {
"use strict";

var $21CGS = parcelRequire("21CGS");

var $k00A4 = parcelRequire("k00A4");

var $4gPgC = parcelRequire("4gPgC");

var $AT1tH = parcelRequire("AT1tH");
var $e08f2c01058650df$var$assert = $21CGS.assert;
function $e08f2c01058650df$var$EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    $AT1tH.call(this, "edwards", conf);
    this.a = new $k00A4(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new $k00A4(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new $k00A4(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    $e08f2c01058650df$var$assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
$4gPgC($e08f2c01058650df$var$EdwardsCurve, $AT1tH);
module.exports = $e08f2c01058650df$var$EdwardsCurve;
$e08f2c01058650df$var$EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA) return num.redNeg();
    else return this.a.redMul(num);
};
$e08f2c01058650df$var$EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC) return num;
    else return this.c.redMul(num);
};
// Just for compatibility with Short curve
$e08f2c01058650df$var$EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};
$e08f2c01058650df$var$EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new $k00A4(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
$e08f2c01058650df$var$EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new $k00A4(y, 16);
    if (!y.red) y = y.toRed(this.red);
    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error("invalid point");
        else return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error("invalid point");
    if (x.fromRed().isOdd() !== odd) x = x.redNeg();
    return this.point(x, y);
};
$e08f2c01058650df$var$EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity()) return true;
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
};
function $e08f2c01058650df$var$Point(curve, x, y, z, t) {
    $AT1tH.BasePoint.call(this, curve, "projective");
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    } else {
        this.x = new $k00A4(x, 16);
        this.y = new $k00A4(y, 16);
        this.z = z ? new $k00A4(z, 16) : this.curve.one;
        this.t = t && new $k00A4(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
$4gPgC($e08f2c01058650df$var$Point, $AT1tH.BasePoint);
$e08f2c01058650df$var$EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return $e08f2c01058650df$var$Point.fromJSON(this, obj);
};
$e08f2c01058650df$var$EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new $e08f2c01058650df$var$Point(this, x, y, z, t);
};
$e08f2c01058650df$var$Point.fromJSON = function fromJSON(curve, obj) {
    return new $e08f2c01058650df$var$Point(curve, obj[0], obj[1], obj[2]);
};
$e08f2c01058650df$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
};
$e08f2c01058650df$var$Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};
$e08f2c01058650df$var$Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
$e08f2c01058650df$var$Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        } else {
            // H = Z1^2
            h = this.z.redSqr();
            // J = F - 2 * H
            j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};
$e08f2c01058650df$var$Point.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    // Double in extended coordinates
    if (this.curve.extended) return this._extDbl();
    else return this._projDbl();
};
$e08f2c01058650df$var$Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
$e08f2c01058650df$var$Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};
$e08f2c01058650df$var$Point.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    if (this.curve.extended) return this._extAdd(p);
    else return this._projAdd(p);
};
$e08f2c01058650df$var$Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else return this.curve._wnafMul(this, k);
};
$e08f2c01058650df$var$Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, false);
};
$e08f2c01058650df$var$Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, true);
};
$e08f2c01058650df$var$Point.prototype.normalize = function normalize() {
    if (this.zOne) return this;
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};
$e08f2c01058650df$var$Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};
$e08f2c01058650df$var$Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};
$e08f2c01058650df$var$Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};
$e08f2c01058650df$var$Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};
$e08f2c01058650df$var$Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
// Compatibility with BaseCurve
$e08f2c01058650df$var$Point.prototype.toP = $e08f2c01058650df$var$Point.prototype.normalize;
$e08f2c01058650df$var$Point.prototype.mixedAdd = $e08f2c01058650df$var$Point.prototype.add;

});


parcelRequire.register("lEx2i", function(module, exports) {
"use strict";
var $fc36f5afadca7c4d$var$curves = module.exports;

var $dz7xi = parcelRequire("dz7xi");

var $eS8gc = parcelRequire("eS8gc");

var $21CGS = parcelRequire("21CGS");
var $fc36f5afadca7c4d$var$assert = $21CGS.assert;
function $fc36f5afadca7c4d$var$PresetCurve(options) {
    if (options.type === "short") this.curve = new $eS8gc.short(options);
    else if (options.type === "edwards") this.curve = new $eS8gc.edwards(options);
    else this.curve = new $eS8gc.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    $fc36f5afadca7c4d$var$assert(this.g.validate(), "Invalid curve");
    $fc36f5afadca7c4d$var$assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
}
$fc36f5afadca7c4d$var$curves.PresetCurve = $fc36f5afadca7c4d$var$PresetCurve;
function $fc36f5afadca7c4d$var$defineCurve(name, options) {
    Object.defineProperty($fc36f5afadca7c4d$var$curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
            var curve = new $fc36f5afadca7c4d$var$PresetCurve(options);
            Object.defineProperty($fc36f5afadca7c4d$var$curves, name, {
                configurable: true,
                enumerable: true,
                value: curve
            });
            return curve;
        }
    });
}
$fc36f5afadca7c4d$var$defineCurve("p192", {
    type: "short",
    prime: "p192",
    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
    hash: $dz7xi.sha256,
    gRed: false,
    g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
    ]
});
$fc36f5afadca7c4d$var$defineCurve("p224", {
    type: "short",
    prime: "p224",
    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
    hash: $dz7xi.sha256,
    gRed: false,
    g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
    ]
});
$fc36f5afadca7c4d$var$defineCurve("p256", {
    type: "short",
    prime: null,
    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
    hash: $dz7xi.sha256,
    gRed: false,
    g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
    ]
});
$fc36f5afadca7c4d$var$defineCurve("p384", {
    type: "short",
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: $dz7xi.sha384,
    gRed: false,
    g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
    ]
});
$fc36f5afadca7c4d$var$defineCurve("p521", {
    type: "short",
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: $dz7xi.sha512,
    gRed: false,
    g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
    ]
});
$fc36f5afadca7c4d$var$defineCurve("curve25519", {
    type: "mont",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "76d06",
    b: "1",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: $dz7xi.sha256,
    gRed: false,
    g: [
        "9"
    ]
});
$fc36f5afadca7c4d$var$defineCurve("ed25519", {
    type: "edwards",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "-1",
    c: "1",
    // -121665 * (121666^(-1)) (mod P)
    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: $dz7xi.sha256,
    gRed: false,
    g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
    ]
});
var $fc36f5afadca7c4d$var$pre;

try {
    $fc36f5afadca7c4d$var$pre = (parcelRequire("5zC2Q"));
} catch (e) {
    $fc36f5afadca7c4d$var$pre = undefined;
}
$fc36f5afadca7c4d$var$defineCurve("secp256k1", {
    type: "short",
    prime: "k256",
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
    a: "0",
    b: "7",
    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
    h: "1",
    hash: $dz7xi.sha256,
    // Precomputed endomorphism
    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
    basis: [
        {
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15"
        }
    ],
    gRed: false,
    g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        $fc36f5afadca7c4d$var$pre
    ]
});

});
parcelRequire.register("dz7xi", function(module, exports) {
var $9e0463bc69e991bc$var$hash = module.exports;

$9e0463bc69e991bc$var$hash.utils = (parcelRequire("jeqqE"));

$9e0463bc69e991bc$var$hash.common = (parcelRequire("6NOEI"));

$9e0463bc69e991bc$var$hash.sha = (parcelRequire("cSRFB"));

$9e0463bc69e991bc$var$hash.ripemd = (parcelRequire("kHB09"));

$9e0463bc69e991bc$var$hash.hmac = (parcelRequire("j848g"));
// Proxy hash functions to the main object
$9e0463bc69e991bc$var$hash.sha1 = $9e0463bc69e991bc$var$hash.sha.sha1;
$9e0463bc69e991bc$var$hash.sha256 = $9e0463bc69e991bc$var$hash.sha.sha256;
$9e0463bc69e991bc$var$hash.sha224 = $9e0463bc69e991bc$var$hash.sha.sha224;
$9e0463bc69e991bc$var$hash.sha384 = $9e0463bc69e991bc$var$hash.sha.sha384;
$9e0463bc69e991bc$var$hash.sha512 = $9e0463bc69e991bc$var$hash.sha.sha512;
$9e0463bc69e991bc$var$hash.ripemd160 = $9e0463bc69e991bc$var$hash.ripemd.ripemd160;

});
parcelRequire.register("jeqqE", function(module, exports) {

$parcel$export(module.exports, "inherits", () => $e003d3529a9d7884$export$69f1b2dcda23c5f8, (v) => $e003d3529a9d7884$export$69f1b2dcda23c5f8 = v);
$parcel$export(module.exports, "toArray", () => $e003d3529a9d7884$export$45b10814cc054894, (v) => $e003d3529a9d7884$export$45b10814cc054894 = v);
$parcel$export(module.exports, "toHex", () => $e003d3529a9d7884$export$7ea66e3774a60b67, (v) => $e003d3529a9d7884$export$7ea66e3774a60b67 = v);
$parcel$export(module.exports, "htonl", () => $e003d3529a9d7884$export$34a52f00f601f6f1, (v) => $e003d3529a9d7884$export$34a52f00f601f6f1 = v);
$parcel$export(module.exports, "toHex32", () => $e003d3529a9d7884$export$812b0cbd5e8a72ab, (v) => $e003d3529a9d7884$export$812b0cbd5e8a72ab = v);
$parcel$export(module.exports, "zero2", () => $e003d3529a9d7884$export$f24f9e11d63bb314, (v) => $e003d3529a9d7884$export$f24f9e11d63bb314 = v);
$parcel$export(module.exports, "zero8", () => $e003d3529a9d7884$export$b71357c7e07ca1f1, (v) => $e003d3529a9d7884$export$b71357c7e07ca1f1 = v);
$parcel$export(module.exports, "join32", () => $e003d3529a9d7884$export$2e58a4b541fdcbe8, (v) => $e003d3529a9d7884$export$2e58a4b541fdcbe8 = v);
$parcel$export(module.exports, "split32", () => $e003d3529a9d7884$export$183b950bde9faab8, (v) => $e003d3529a9d7884$export$183b950bde9faab8 = v);
$parcel$export(module.exports, "rotr32", () => $e003d3529a9d7884$export$4785c77169fea59e, (v) => $e003d3529a9d7884$export$4785c77169fea59e = v);
$parcel$export(module.exports, "rotl32", () => $e003d3529a9d7884$export$242a185dfcffac5b, (v) => $e003d3529a9d7884$export$242a185dfcffac5b = v);
$parcel$export(module.exports, "sum32", () => $e003d3529a9d7884$export$58c04ae0ae31877d, (v) => $e003d3529a9d7884$export$58c04ae0ae31877d = v);
$parcel$export(module.exports, "sum32_3", () => $e003d3529a9d7884$export$d058ca695f8c6f11, (v) => $e003d3529a9d7884$export$d058ca695f8c6f11 = v);
$parcel$export(module.exports, "sum32_4", () => $e003d3529a9d7884$export$a1efd7fc3e986367, (v) => $e003d3529a9d7884$export$a1efd7fc3e986367 = v);
$parcel$export(module.exports, "sum32_5", () => $e003d3529a9d7884$export$bbfea4a2b5abaab4, (v) => $e003d3529a9d7884$export$bbfea4a2b5abaab4 = v);
$parcel$export(module.exports, "sum64", () => $e003d3529a9d7884$export$97ad4afc7de86152, (v) => $e003d3529a9d7884$export$97ad4afc7de86152 = v);
$parcel$export(module.exports, "sum64_hi", () => $e003d3529a9d7884$export$ce4673d9a79f6a4b, (v) => $e003d3529a9d7884$export$ce4673d9a79f6a4b = v);
$parcel$export(module.exports, "sum64_lo", () => $e003d3529a9d7884$export$786cc99fc6eedc0b, (v) => $e003d3529a9d7884$export$786cc99fc6eedc0b = v);
$parcel$export(module.exports, "sum64_4_hi", () => $e003d3529a9d7884$export$45c59b9a1848dd0, (v) => $e003d3529a9d7884$export$45c59b9a1848dd0 = v);
$parcel$export(module.exports, "sum64_4_lo", () => $e003d3529a9d7884$export$50d8f613e76d3034, (v) => $e003d3529a9d7884$export$50d8f613e76d3034 = v);
$parcel$export(module.exports, "sum64_5_hi", () => $e003d3529a9d7884$export$b8e83683c60ee162, (v) => $e003d3529a9d7884$export$b8e83683c60ee162 = v);
$parcel$export(module.exports, "sum64_5_lo", () => $e003d3529a9d7884$export$aeeb51790d1bcc4a, (v) => $e003d3529a9d7884$export$aeeb51790d1bcc4a = v);
$parcel$export(module.exports, "rotr64_hi", () => $e003d3529a9d7884$export$bb7c616f719ad9c, (v) => $e003d3529a9d7884$export$bb7c616f719ad9c = v);
$parcel$export(module.exports, "rotr64_lo", () => $e003d3529a9d7884$export$4d63290824f9d7df, (v) => $e003d3529a9d7884$export$4d63290824f9d7df = v);
$parcel$export(module.exports, "shr64_hi", () => $e003d3529a9d7884$export$2f64ceb90ef28ea1, (v) => $e003d3529a9d7884$export$2f64ceb90ef28ea1 = v);
$parcel$export(module.exports, "shr64_lo", () => $e003d3529a9d7884$export$8d2089d465f6d10d, (v) => $e003d3529a9d7884$export$8d2089d465f6d10d = v);
var $e003d3529a9d7884$export$69f1b2dcda23c5f8;
var $e003d3529a9d7884$export$45b10814cc054894;
var $e003d3529a9d7884$export$7ea66e3774a60b67;
var $e003d3529a9d7884$export$34a52f00f601f6f1;
var $e003d3529a9d7884$export$812b0cbd5e8a72ab;
var $e003d3529a9d7884$export$f24f9e11d63bb314;
var $e003d3529a9d7884$export$b71357c7e07ca1f1;
var $e003d3529a9d7884$export$2e58a4b541fdcbe8;
var $e003d3529a9d7884$export$183b950bde9faab8;
var $e003d3529a9d7884$export$4785c77169fea59e;
var $e003d3529a9d7884$export$242a185dfcffac5b;
var $e003d3529a9d7884$export$58c04ae0ae31877d;
var $e003d3529a9d7884$export$d058ca695f8c6f11;
var $e003d3529a9d7884$export$a1efd7fc3e986367;
var $e003d3529a9d7884$export$bbfea4a2b5abaab4;
var $e003d3529a9d7884$export$97ad4afc7de86152;
var $e003d3529a9d7884$export$ce4673d9a79f6a4b;
var $e003d3529a9d7884$export$786cc99fc6eedc0b;
var $e003d3529a9d7884$export$45c59b9a1848dd0;
var $e003d3529a9d7884$export$50d8f613e76d3034;
var $e003d3529a9d7884$export$b8e83683c60ee162;
var $e003d3529a9d7884$export$aeeb51790d1bcc4a;
var $e003d3529a9d7884$export$bb7c616f719ad9c;
var $e003d3529a9d7884$export$4d63290824f9d7df;
var $e003d3529a9d7884$export$2f64ceb90ef28ea1;
var $e003d3529a9d7884$export$8d2089d465f6d10d;
"use strict";

var $fWN7B = parcelRequire("fWN7B");

var $4gPgC = parcelRequire("4gPgC");
$e003d3529a9d7884$export$69f1b2dcda23c5f8 = $4gPgC;
function $e003d3529a9d7884$var$isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) return false;
    if (i < 0 || i + 1 >= msg.length) return false;
    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}
function $e003d3529a9d7884$var$toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === "string") {
        if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                if (c < 128) res[p++] = c;
                else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                } else if ($e003d3529a9d7884$var$isSurrogatePair(msg, i)) {
                    c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                }
            }
        } else if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/ig, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
    return res;
}
$e003d3529a9d7884$export$45b10814cc054894 = $e003d3529a9d7884$var$toArray;
function $e003d3529a9d7884$var$toHex(msg) {
    var res = "";
    for(var i = 0; i < msg.length; i++)res += $e003d3529a9d7884$var$zero2(msg[i].toString(16));
    return res;
}
$e003d3529a9d7884$export$7ea66e3774a60b67 = $e003d3529a9d7884$var$toHex;
function $e003d3529a9d7884$var$htonl(w) {
    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
    return res >>> 0;
}
$e003d3529a9d7884$export$34a52f00f601f6f1 = $e003d3529a9d7884$var$htonl;
function $e003d3529a9d7884$var$toHex32(msg, endian) {
    var res = "";
    for(var i = 0; i < msg.length; i++){
        var w = msg[i];
        if (endian === "little") w = $e003d3529a9d7884$var$htonl(w);
        res += $e003d3529a9d7884$var$zero8(w.toString(16));
    }
    return res;
}
$e003d3529a9d7884$export$812b0cbd5e8a72ab = $e003d3529a9d7884$var$toHex32;
function $e003d3529a9d7884$var$zero2(word) {
    if (word.length === 1) return "0" + word;
    else return word;
}
$e003d3529a9d7884$export$f24f9e11d63bb314 = $e003d3529a9d7884$var$zero2;
function $e003d3529a9d7884$var$zero8(word) {
    if (word.length === 7) return "0" + word;
    else if (word.length === 6) return "00" + word;
    else if (word.length === 5) return "000" + word;
    else if (word.length === 4) return "0000" + word;
    else if (word.length === 3) return "00000" + word;
    else if (word.length === 2) return "000000" + word;
    else if (word.length === 1) return "0000000" + word;
    else return word;
}
$e003d3529a9d7884$export$b71357c7e07ca1f1 = $e003d3529a9d7884$var$zero8;
function $e003d3529a9d7884$var$join32(msg, start, end, endian) {
    var len = end - start;
    $fWN7B(len % 4 === 0);
    var res = new Array(len / 4);
    for(var i = 0, k = start; i < res.length; i++, k += 4){
        var w;
        if (endian === "big") w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
$e003d3529a9d7884$export$2e58a4b541fdcbe8 = $e003d3529a9d7884$var$join32;
function $e003d3529a9d7884$var$split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
        var m = msg[i];
        if (endian === "big") {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 0xff;
            res[k + 2] = m >>> 8 & 0xff;
            res[k + 3] = m & 0xff;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 0xff;
            res[k + 1] = m >>> 8 & 0xff;
            res[k] = m & 0xff;
        }
    }
    return res;
}
$e003d3529a9d7884$export$183b950bde9faab8 = $e003d3529a9d7884$var$split32;
function $e003d3529a9d7884$var$rotr32(w, b) {
    return w >>> b | w << 32 - b;
}
$e003d3529a9d7884$export$4785c77169fea59e = $e003d3529a9d7884$var$rotr32;
function $e003d3529a9d7884$var$rotl32(w, b) {
    return w << b | w >>> 32 - b;
}
$e003d3529a9d7884$export$242a185dfcffac5b = $e003d3529a9d7884$var$rotl32;
function $e003d3529a9d7884$var$sum32(a, b) {
    return a + b >>> 0;
}
$e003d3529a9d7884$export$58c04ae0ae31877d = $e003d3529a9d7884$var$sum32;
function $e003d3529a9d7884$var$sum32_3(a, b, c) {
    return a + b + c >>> 0;
}
$e003d3529a9d7884$export$d058ca695f8c6f11 = $e003d3529a9d7884$var$sum32_3;
function $e003d3529a9d7884$var$sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
}
$e003d3529a9d7884$export$a1efd7fc3e986367 = $e003d3529a9d7884$var$sum32_4;
function $e003d3529a9d7884$var$sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
}
$e003d3529a9d7884$export$bbfea4a2b5abaab4 = $e003d3529a9d7884$var$sum32_5;
function $e003d3529a9d7884$var$sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
$e003d3529a9d7884$export$97ad4afc7de86152 = $e003d3529a9d7884$var$sum64;
function $e003d3529a9d7884$var$sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
$e003d3529a9d7884$export$ce4673d9a79f6a4b = $e003d3529a9d7884$var$sum64_hi;
function $e003d3529a9d7884$var$sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
$e003d3529a9d7884$export$786cc99fc6eedc0b = $e003d3529a9d7884$var$sum64_lo;
function $e003d3529a9d7884$var$sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
$e003d3529a9d7884$export$45c59b9a1848dd0 = $e003d3529a9d7884$var$sum64_4_hi;
function $e003d3529a9d7884$var$sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
$e003d3529a9d7884$export$50d8f613e76d3034 = $e003d3529a9d7884$var$sum64_4_lo;
function $e003d3529a9d7884$var$sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
$e003d3529a9d7884$export$b8e83683c60ee162 = $e003d3529a9d7884$var$sum64_5_hi;
function $e003d3529a9d7884$var$sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
}
$e003d3529a9d7884$export$aeeb51790d1bcc4a = $e003d3529a9d7884$var$sum64_5_lo;
function $e003d3529a9d7884$var$rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
}
$e003d3529a9d7884$export$bb7c616f719ad9c = $e003d3529a9d7884$var$rotr64_hi;
function $e003d3529a9d7884$var$rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
$e003d3529a9d7884$export$4d63290824f9d7df = $e003d3529a9d7884$var$rotr64_lo;
function $e003d3529a9d7884$var$shr64_hi(ah, al, num) {
    return ah >>> num;
}
$e003d3529a9d7884$export$2f64ceb90ef28ea1 = $e003d3529a9d7884$var$shr64_hi;
function $e003d3529a9d7884$var$shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
$e003d3529a9d7884$export$8d2089d465f6d10d = $e003d3529a9d7884$var$shr64_lo;

});

parcelRequire.register("6NOEI", function(module, exports) {

$parcel$export(module.exports, "BlockHash", () => $4f3e9cdaaedd5245$export$8687658379b577e6, (v) => $4f3e9cdaaedd5245$export$8687658379b577e6 = v);
var $4f3e9cdaaedd5245$export$8687658379b577e6;
"use strict";

var $jeqqE = parcelRequire("jeqqE");

var $fWN7B = parcelRequire("fWN7B");
function $4f3e9cdaaedd5245$var$BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
$4f3e9cdaaedd5245$export$8687658379b577e6 = $4f3e9cdaaedd5245$var$BlockHash;
$4f3e9cdaaedd5245$var$BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = $jeqqE.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
        msg = this.pending;
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = $jeqqE.join32(msg, 0, msg.length - r, this.endian);
        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
    }
    return this;
};
$4f3e9cdaaedd5245$var$BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    $fWN7B(this.pending === null);
    return this._digest(enc);
};
$4f3e9cdaaedd5245$var$BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for(var i = 1; i < k; i++)res[i] = 0;
    // Append length
    len <<= 3;
    if (this.endian === "big") {
        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len & 0xff;
    } else {
        res[i++] = len & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for(t = 8; t < this.padLength; t++)res[i++] = 0;
    }
    return res;
};

});

parcelRequire.register("cSRFB", function(module, exports) {

$parcel$export(module.exports, "sha1", () => $961428f3d4866950$export$5091bdda49ba90f5, (v) => $961428f3d4866950$export$5091bdda49ba90f5 = v);
$parcel$export(module.exports, "sha224", () => $961428f3d4866950$export$97b70509d4e397ea, (v) => $961428f3d4866950$export$97b70509d4e397ea = v);
$parcel$export(module.exports, "sha256", () => $961428f3d4866950$export$bced8d2aada2d1c9, (v) => $961428f3d4866950$export$bced8d2aada2d1c9 = v);
$parcel$export(module.exports, "sha384", () => $961428f3d4866950$export$612d47d55dedde45, (v) => $961428f3d4866950$export$612d47d55dedde45 = v);
$parcel$export(module.exports, "sha512", () => $961428f3d4866950$export$a888d2532e6dc7bb, (v) => $961428f3d4866950$export$a888d2532e6dc7bb = v);
var $961428f3d4866950$export$5091bdda49ba90f5;
var $961428f3d4866950$export$97b70509d4e397ea;
var $961428f3d4866950$export$bced8d2aada2d1c9;
var $961428f3d4866950$export$612d47d55dedde45;
var $961428f3d4866950$export$a888d2532e6dc7bb;
"use strict";

$961428f3d4866950$export$5091bdda49ba90f5 = (parcelRequire("k3C7P"));

$961428f3d4866950$export$97b70509d4e397ea = (parcelRequire("e4XbL"));

$961428f3d4866950$export$bced8d2aada2d1c9 = (parcelRequire("bZdST"));

$961428f3d4866950$export$612d47d55dedde45 = (parcelRequire("eraEe"));

$961428f3d4866950$export$a888d2532e6dc7bb = (parcelRequire("3splv"));

});
parcelRequire.register("k3C7P", function(module, exports) {
"use strict";

var $jeqqE = parcelRequire("jeqqE");

var $6NOEI = parcelRequire("6NOEI");

var $kRuLJ = parcelRequire("kRuLJ");
var $e9a1a956ccc1a013$var$rotl32 = $jeqqE.rotl32;
var $e9a1a956ccc1a013$var$sum32 = $jeqqE.sum32;
var $e9a1a956ccc1a013$var$sum32_5 = $jeqqE.sum32_5;
var $e9a1a956ccc1a013$var$ft_1 = $kRuLJ.ft_1;
var $e9a1a956ccc1a013$var$BlockHash = $6NOEI.BlockHash;
var $e9a1a956ccc1a013$var$sha1_K = [
    0x5A827999,
    0x6ED9EBA1,
    0x8F1BBCDC,
    0xCA62C1D6
];
function $e9a1a956ccc1a013$var$SHA1() {
    if (!(this instanceof $e9a1a956ccc1a013$var$SHA1)) return new $e9a1a956ccc1a013$var$SHA1();
    $e9a1a956ccc1a013$var$BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.W = new Array(80);
}
$jeqqE.inherits($e9a1a956ccc1a013$var$SHA1, $e9a1a956ccc1a013$var$BlockHash);
module.exports = $e9a1a956ccc1a013$var$SHA1;
$e9a1a956ccc1a013$var$SHA1.blockSize = 512;
$e9a1a956ccc1a013$var$SHA1.outSize = 160;
$e9a1a956ccc1a013$var$SHA1.hmacStrength = 80;
$e9a1a956ccc1a013$var$SHA1.padLength = 64;
$e9a1a956ccc1a013$var$SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = $e9a1a956ccc1a013$var$rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for(i = 0; i < W.length; i++){
        var s = ~~(i / 20);
        var t = $e9a1a956ccc1a013$var$sum32_5($e9a1a956ccc1a013$var$rotl32(a, 5), $e9a1a956ccc1a013$var$ft_1(s, b, c, d), e, W[i], $e9a1a956ccc1a013$var$sha1_K[s]);
        e = d;
        d = c;
        c = $e9a1a956ccc1a013$var$rotl32(b, 30);
        b = a;
        a = t;
    }
    this.h[0] = $e9a1a956ccc1a013$var$sum32(this.h[0], a);
    this.h[1] = $e9a1a956ccc1a013$var$sum32(this.h[1], b);
    this.h[2] = $e9a1a956ccc1a013$var$sum32(this.h[2], c);
    this.h[3] = $e9a1a956ccc1a013$var$sum32(this.h[3], d);
    this.h[4] = $e9a1a956ccc1a013$var$sum32(this.h[4], e);
};
$e9a1a956ccc1a013$var$SHA1.prototype._digest = function digest(enc) {
    if (enc === "hex") return $jeqqE.toHex32(this.h, "big");
    else return $jeqqE.split32(this.h, "big");
};

});
parcelRequire.register("kRuLJ", function(module, exports) {

$parcel$export(module.exports, "ft_1", () => $f3009fea336e22cb$export$5a92649d7ddb9f63, (v) => $f3009fea336e22cb$export$5a92649d7ddb9f63 = v);
$parcel$export(module.exports, "ch32", () => $f3009fea336e22cb$export$c6d0d020c3a6269, (v) => $f3009fea336e22cb$export$c6d0d020c3a6269 = v);
$parcel$export(module.exports, "maj32", () => $f3009fea336e22cb$export$eb90c27fca05f956, (v) => $f3009fea336e22cb$export$eb90c27fca05f956 = v);
$parcel$export(module.exports, "s0_256", () => $f3009fea336e22cb$export$14a4a98e063b1999, (v) => $f3009fea336e22cb$export$14a4a98e063b1999 = v);
$parcel$export(module.exports, "s1_256", () => $f3009fea336e22cb$export$d20cecfa1564c686, (v) => $f3009fea336e22cb$export$d20cecfa1564c686 = v);
$parcel$export(module.exports, "g0_256", () => $f3009fea336e22cb$export$44fd472a12fc6db, (v) => $f3009fea336e22cb$export$44fd472a12fc6db = v);
$parcel$export(module.exports, "g1_256", () => $f3009fea336e22cb$export$1ed238bb6ea1dd47, (v) => $f3009fea336e22cb$export$1ed238bb6ea1dd47 = v);
var $f3009fea336e22cb$export$5a92649d7ddb9f63;
var $f3009fea336e22cb$export$c6d0d020c3a6269;
var $f3009fea336e22cb$export$eb90c27fca05f956;
var $f3009fea336e22cb$export$cc992891a14496a1;
var $f3009fea336e22cb$export$14a4a98e063b1999;
var $f3009fea336e22cb$export$d20cecfa1564c686;
var $f3009fea336e22cb$export$44fd472a12fc6db;
var $f3009fea336e22cb$export$1ed238bb6ea1dd47;
"use strict";

var $jeqqE = parcelRequire("jeqqE");
var $f3009fea336e22cb$var$rotr32 = $jeqqE.rotr32;
function $f3009fea336e22cb$var$ft_1(s, x, y, z) {
    if (s === 0) return $f3009fea336e22cb$var$ch32(x, y, z);
    if (s === 1 || s === 3) return $f3009fea336e22cb$var$p32(x, y, z);
    if (s === 2) return $f3009fea336e22cb$var$maj32(x, y, z);
}
$f3009fea336e22cb$export$5a92649d7ddb9f63 = $f3009fea336e22cb$var$ft_1;
function $f3009fea336e22cb$var$ch32(x, y, z) {
    return x & y ^ ~x & z;
}
$f3009fea336e22cb$export$c6d0d020c3a6269 = $f3009fea336e22cb$var$ch32;
function $f3009fea336e22cb$var$maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
}
$f3009fea336e22cb$export$eb90c27fca05f956 = $f3009fea336e22cb$var$maj32;
function $f3009fea336e22cb$var$p32(x, y, z) {
    return x ^ y ^ z;
}
$f3009fea336e22cb$export$cc992891a14496a1 = $f3009fea336e22cb$var$p32;
function $f3009fea336e22cb$var$s0_256(x) {
    return $f3009fea336e22cb$var$rotr32(x, 2) ^ $f3009fea336e22cb$var$rotr32(x, 13) ^ $f3009fea336e22cb$var$rotr32(x, 22);
}
$f3009fea336e22cb$export$14a4a98e063b1999 = $f3009fea336e22cb$var$s0_256;
function $f3009fea336e22cb$var$s1_256(x) {
    return $f3009fea336e22cb$var$rotr32(x, 6) ^ $f3009fea336e22cb$var$rotr32(x, 11) ^ $f3009fea336e22cb$var$rotr32(x, 25);
}
$f3009fea336e22cb$export$d20cecfa1564c686 = $f3009fea336e22cb$var$s1_256;
function $f3009fea336e22cb$var$g0_256(x) {
    return $f3009fea336e22cb$var$rotr32(x, 7) ^ $f3009fea336e22cb$var$rotr32(x, 18) ^ x >>> 3;
}
$f3009fea336e22cb$export$44fd472a12fc6db = $f3009fea336e22cb$var$g0_256;
function $f3009fea336e22cb$var$g1_256(x) {
    return $f3009fea336e22cb$var$rotr32(x, 17) ^ $f3009fea336e22cb$var$rotr32(x, 19) ^ x >>> 10;
}
$f3009fea336e22cb$export$1ed238bb6ea1dd47 = $f3009fea336e22cb$var$g1_256;

});


parcelRequire.register("e4XbL", function(module, exports) {
"use strict";

var $jeqqE = parcelRequire("jeqqE");

var $bZdST = parcelRequire("bZdST");
function $a3ff5a0cab5e5d3d$var$SHA224() {
    if (!(this instanceof $a3ff5a0cab5e5d3d$var$SHA224)) return new $a3ff5a0cab5e5d3d$var$SHA224();
    $bZdST.call(this);
    this.h = [
        0xc1059ed8,
        0x367cd507,
        0x3070dd17,
        0xf70e5939,
        0xffc00b31,
        0x68581511,
        0x64f98fa7,
        0xbefa4fa4
    ];
}
$jeqqE.inherits($a3ff5a0cab5e5d3d$var$SHA224, $bZdST);
module.exports = $a3ff5a0cab5e5d3d$var$SHA224;
$a3ff5a0cab5e5d3d$var$SHA224.blockSize = 512;
$a3ff5a0cab5e5d3d$var$SHA224.outSize = 224;
$a3ff5a0cab5e5d3d$var$SHA224.hmacStrength = 192;
$a3ff5a0cab5e5d3d$var$SHA224.padLength = 64;
$a3ff5a0cab5e5d3d$var$SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === "hex") return $jeqqE.toHex32(this.h.slice(0, 7), "big");
    else return $jeqqE.split32(this.h.slice(0, 7), "big");
};

});
parcelRequire.register("bZdST", function(module, exports) {
"use strict";

var $jeqqE = parcelRequire("jeqqE");

var $6NOEI = parcelRequire("6NOEI");

var $kRuLJ = parcelRequire("kRuLJ");

var $fWN7B = parcelRequire("fWN7B");
var $8ba0295af5a8ea94$var$sum32 = $jeqqE.sum32;
var $8ba0295af5a8ea94$var$sum32_4 = $jeqqE.sum32_4;
var $8ba0295af5a8ea94$var$sum32_5 = $jeqqE.sum32_5;
var $8ba0295af5a8ea94$var$ch32 = $kRuLJ.ch32;
var $8ba0295af5a8ea94$var$maj32 = $kRuLJ.maj32;
var $8ba0295af5a8ea94$var$s0_256 = $kRuLJ.s0_256;
var $8ba0295af5a8ea94$var$s1_256 = $kRuLJ.s1_256;
var $8ba0295af5a8ea94$var$g0_256 = $kRuLJ.g0_256;
var $8ba0295af5a8ea94$var$g1_256 = $kRuLJ.g1_256;
var $8ba0295af5a8ea94$var$BlockHash = $6NOEI.BlockHash;
var $8ba0295af5a8ea94$var$sha256_K = [
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
];
function $8ba0295af5a8ea94$var$SHA256() {
    if (!(this instanceof $8ba0295af5a8ea94$var$SHA256)) return new $8ba0295af5a8ea94$var$SHA256();
    $8ba0295af5a8ea94$var$BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xbb67ae85,
        0x3c6ef372,
        0xa54ff53a,
        0x510e527f,
        0x9b05688c,
        0x1f83d9ab,
        0x5be0cd19
    ];
    this.k = $8ba0295af5a8ea94$var$sha256_K;
    this.W = new Array(64);
}
$jeqqE.inherits($8ba0295af5a8ea94$var$SHA256, $8ba0295af5a8ea94$var$BlockHash);
module.exports = $8ba0295af5a8ea94$var$SHA256;
$8ba0295af5a8ea94$var$SHA256.blockSize = 512;
$8ba0295af5a8ea94$var$SHA256.outSize = 256;
$8ba0295af5a8ea94$var$SHA256.hmacStrength = 192;
$8ba0295af5a8ea94$var$SHA256.padLength = 64;
$8ba0295af5a8ea94$var$SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = $8ba0295af5a8ea94$var$sum32_4($8ba0295af5a8ea94$var$g1_256(W[i - 2]), W[i - 7], $8ba0295af5a8ea94$var$g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    $fWN7B(this.k.length === W.length);
    for(i = 0; i < W.length; i++){
        var T1 = $8ba0295af5a8ea94$var$sum32_5(h, $8ba0295af5a8ea94$var$s1_256(e), $8ba0295af5a8ea94$var$ch32(e, f, g), this.k[i], W[i]);
        var T2 = $8ba0295af5a8ea94$var$sum32($8ba0295af5a8ea94$var$s0_256(a), $8ba0295af5a8ea94$var$maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = $8ba0295af5a8ea94$var$sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = $8ba0295af5a8ea94$var$sum32(T1, T2);
    }
    this.h[0] = $8ba0295af5a8ea94$var$sum32(this.h[0], a);
    this.h[1] = $8ba0295af5a8ea94$var$sum32(this.h[1], b);
    this.h[2] = $8ba0295af5a8ea94$var$sum32(this.h[2], c);
    this.h[3] = $8ba0295af5a8ea94$var$sum32(this.h[3], d);
    this.h[4] = $8ba0295af5a8ea94$var$sum32(this.h[4], e);
    this.h[5] = $8ba0295af5a8ea94$var$sum32(this.h[5], f);
    this.h[6] = $8ba0295af5a8ea94$var$sum32(this.h[6], g);
    this.h[7] = $8ba0295af5a8ea94$var$sum32(this.h[7], h);
};
$8ba0295af5a8ea94$var$SHA256.prototype._digest = function digest(enc) {
    if (enc === "hex") return $jeqqE.toHex32(this.h, "big");
    else return $jeqqE.split32(this.h, "big");
};

});


parcelRequire.register("eraEe", function(module, exports) {
"use strict";

var $jeqqE = parcelRequire("jeqqE");

var $3splv = parcelRequire("3splv");
function $a82bd8bb93e21f14$var$SHA384() {
    if (!(this instanceof $a82bd8bb93e21f14$var$SHA384)) return new $a82bd8bb93e21f14$var$SHA384();
    $3splv.call(this);
    this.h = [
        0xcbbb9d5d,
        0xc1059ed8,
        0x629a292a,
        0x367cd507,
        0x9159015a,
        0x3070dd17,
        0x152fecd8,
        0xf70e5939,
        0x67332667,
        0xffc00b31,
        0x8eb44a87,
        0x68581511,
        0xdb0c2e0d,
        0x64f98fa7,
        0x47b5481d,
        0xbefa4fa4
    ];
}
$jeqqE.inherits($a82bd8bb93e21f14$var$SHA384, $3splv);
module.exports = $a82bd8bb93e21f14$var$SHA384;
$a82bd8bb93e21f14$var$SHA384.blockSize = 1024;
$a82bd8bb93e21f14$var$SHA384.outSize = 384;
$a82bd8bb93e21f14$var$SHA384.hmacStrength = 192;
$a82bd8bb93e21f14$var$SHA384.padLength = 128;
$a82bd8bb93e21f14$var$SHA384.prototype._digest = function digest(enc) {
    if (enc === "hex") return $jeqqE.toHex32(this.h.slice(0, 12), "big");
    else return $jeqqE.split32(this.h.slice(0, 12), "big");
};

});
parcelRequire.register("3splv", function(module, exports) {
"use strict";

var $jeqqE = parcelRequire("jeqqE");

var $6NOEI = parcelRequire("6NOEI");

var $fWN7B = parcelRequire("fWN7B");
var $2847a5c4bde1c6bd$var$rotr64_hi = $jeqqE.rotr64_hi;
var $2847a5c4bde1c6bd$var$rotr64_lo = $jeqqE.rotr64_lo;
var $2847a5c4bde1c6bd$var$shr64_hi = $jeqqE.shr64_hi;
var $2847a5c4bde1c6bd$var$shr64_lo = $jeqqE.shr64_lo;
var $2847a5c4bde1c6bd$var$sum64 = $jeqqE.sum64;
var $2847a5c4bde1c6bd$var$sum64_hi = $jeqqE.sum64_hi;
var $2847a5c4bde1c6bd$var$sum64_lo = $jeqqE.sum64_lo;
var $2847a5c4bde1c6bd$var$sum64_4_hi = $jeqqE.sum64_4_hi;
var $2847a5c4bde1c6bd$var$sum64_4_lo = $jeqqE.sum64_4_lo;
var $2847a5c4bde1c6bd$var$sum64_5_hi = $jeqqE.sum64_5_hi;
var $2847a5c4bde1c6bd$var$sum64_5_lo = $jeqqE.sum64_5_lo;
var $2847a5c4bde1c6bd$var$BlockHash = $6NOEI.BlockHash;
var $2847a5c4bde1c6bd$var$sha512_K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
function $2847a5c4bde1c6bd$var$SHA512() {
    if (!(this instanceof $2847a5c4bde1c6bd$var$SHA512)) return new $2847a5c4bde1c6bd$var$SHA512();
    $2847a5c4bde1c6bd$var$BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xf3bcc908,
        0xbb67ae85,
        0x84caa73b,
        0x3c6ef372,
        0xfe94f82b,
        0xa54ff53a,
        0x5f1d36f1,
        0x510e527f,
        0xade682d1,
        0x9b05688c,
        0x2b3e6c1f,
        0x1f83d9ab,
        0xfb41bd6b,
        0x5be0cd19,
        0x137e2179
    ];
    this.k = $2847a5c4bde1c6bd$var$sha512_K;
    this.W = new Array(160);
}
$jeqqE.inherits($2847a5c4bde1c6bd$var$SHA512, $2847a5c4bde1c6bd$var$BlockHash);
module.exports = $2847a5c4bde1c6bd$var$SHA512;
$2847a5c4bde1c6bd$var$SHA512.blockSize = 1024;
$2847a5c4bde1c6bd$var$SHA512.outSize = 512;
$2847a5c4bde1c6bd$var$SHA512.hmacStrength = 192;
$2847a5c4bde1c6bd$var$SHA512.padLength = 128;
$2847a5c4bde1c6bd$var$SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    // 32 x 32bit words
    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
    for(; i < W.length; i += 2){
        var c0_hi = $2847a5c4bde1c6bd$var$g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = $2847a5c4bde1c6bd$var$g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = $2847a5c4bde1c6bd$var$g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = $2847a5c4bde1c6bd$var$g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];
        W[i] = $2847a5c4bde1c6bd$var$sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = $2847a5c4bde1c6bd$var$sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};
$2847a5c4bde1c6bd$var$SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    $fWN7B(this.k.length === W.length);
    for(var i = 0; i < W.length; i += 2){
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = $2847a5c4bde1c6bd$var$s1_512_hi(eh, el);
        var c1_lo = $2847a5c4bde1c6bd$var$s1_512_lo(eh, el);
        var c2_hi = $2847a5c4bde1c6bd$var$ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = $2847a5c4bde1c6bd$var$ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = $2847a5c4bde1c6bd$var$sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = $2847a5c4bde1c6bd$var$sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = $2847a5c4bde1c6bd$var$s0_512_hi(ah, al);
        c0_lo = $2847a5c4bde1c6bd$var$s0_512_lo(ah, al);
        c1_hi = $2847a5c4bde1c6bd$var$maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = $2847a5c4bde1c6bd$var$maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = $2847a5c4bde1c6bd$var$sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = $2847a5c4bde1c6bd$var$sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = $2847a5c4bde1c6bd$var$sum64_hi(dh, dl, T1_hi, T1_lo);
        el = $2847a5c4bde1c6bd$var$sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = $2847a5c4bde1c6bd$var$sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = $2847a5c4bde1c6bd$var$sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    $2847a5c4bde1c6bd$var$sum64(this.h, 0, ah, al);
    $2847a5c4bde1c6bd$var$sum64(this.h, 2, bh, bl);
    $2847a5c4bde1c6bd$var$sum64(this.h, 4, ch, cl);
    $2847a5c4bde1c6bd$var$sum64(this.h, 6, dh, dl);
    $2847a5c4bde1c6bd$var$sum64(this.h, 8, eh, el);
    $2847a5c4bde1c6bd$var$sum64(this.h, 10, fh, fl);
    $2847a5c4bde1c6bd$var$sum64(this.h, 12, gh, gl);
    $2847a5c4bde1c6bd$var$sum64(this.h, 14, hh, hl);
};
$2847a5c4bde1c6bd$var$SHA512.prototype._digest = function digest(enc) {
    if (enc === "hex") return $jeqqE.toHex32(this.h, "big");
    else return $jeqqE.split32(this.h, "big");
};
function $2847a5c4bde1c6bd$var$ch64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ ~xh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function $2847a5c4bde1c6bd$var$ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function $2847a5c4bde1c6bd$var$maj64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ xh & zh ^ yh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function $2847a5c4bde1c6bd$var$maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function $2847a5c4bde1c6bd$var$s0_512_hi(xh, xl) {
    var c0_hi = $2847a5c4bde1c6bd$var$rotr64_hi(xh, xl, 28);
    var c1_hi = $2847a5c4bde1c6bd$var$rotr64_hi(xl, xh, 2); // 34
    var c2_hi = $2847a5c4bde1c6bd$var$rotr64_hi(xl, xh, 7); // 39
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function $2847a5c4bde1c6bd$var$s0_512_lo(xh, xl) {
    var c0_lo = $2847a5c4bde1c6bd$var$rotr64_lo(xh, xl, 28);
    var c1_lo = $2847a5c4bde1c6bd$var$rotr64_lo(xl, xh, 2); // 34
    var c2_lo = $2847a5c4bde1c6bd$var$rotr64_lo(xl, xh, 7); // 39
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function $2847a5c4bde1c6bd$var$s1_512_hi(xh, xl) {
    var c0_hi = $2847a5c4bde1c6bd$var$rotr64_hi(xh, xl, 14);
    var c1_hi = $2847a5c4bde1c6bd$var$rotr64_hi(xh, xl, 18);
    var c2_hi = $2847a5c4bde1c6bd$var$rotr64_hi(xl, xh, 9); // 41
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function $2847a5c4bde1c6bd$var$s1_512_lo(xh, xl) {
    var c0_lo = $2847a5c4bde1c6bd$var$rotr64_lo(xh, xl, 14);
    var c1_lo = $2847a5c4bde1c6bd$var$rotr64_lo(xh, xl, 18);
    var c2_lo = $2847a5c4bde1c6bd$var$rotr64_lo(xl, xh, 9); // 41
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function $2847a5c4bde1c6bd$var$g0_512_hi(xh, xl) {
    var c0_hi = $2847a5c4bde1c6bd$var$rotr64_hi(xh, xl, 1);
    var c1_hi = $2847a5c4bde1c6bd$var$rotr64_hi(xh, xl, 8);
    var c2_hi = $2847a5c4bde1c6bd$var$shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function $2847a5c4bde1c6bd$var$g0_512_lo(xh, xl) {
    var c0_lo = $2847a5c4bde1c6bd$var$rotr64_lo(xh, xl, 1);
    var c1_lo = $2847a5c4bde1c6bd$var$rotr64_lo(xh, xl, 8);
    var c2_lo = $2847a5c4bde1c6bd$var$shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function $2847a5c4bde1c6bd$var$g1_512_hi(xh, xl) {
    var c0_hi = $2847a5c4bde1c6bd$var$rotr64_hi(xh, xl, 19);
    var c1_hi = $2847a5c4bde1c6bd$var$rotr64_hi(xl, xh, 29); // 61
    var c2_hi = $2847a5c4bde1c6bd$var$shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function $2847a5c4bde1c6bd$var$g1_512_lo(xh, xl) {
    var c0_lo = $2847a5c4bde1c6bd$var$rotr64_lo(xh, xl, 19);
    var c1_lo = $2847a5c4bde1c6bd$var$rotr64_lo(xl, xh, 29); // 61
    var c2_lo = $2847a5c4bde1c6bd$var$shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}

});



parcelRequire.register("kHB09", function(module, exports) {

$parcel$export(module.exports, "ripemd160", () => $f124867f7bd3ddcd$export$d1cea0ee4e3f0d3e, (v) => $f124867f7bd3ddcd$export$d1cea0ee4e3f0d3e = v);
var $f124867f7bd3ddcd$export$d1cea0ee4e3f0d3e;
"use strict";

var $jeqqE = parcelRequire("jeqqE");

var $6NOEI = parcelRequire("6NOEI");
var $f124867f7bd3ddcd$var$rotl32 = $jeqqE.rotl32;
var $f124867f7bd3ddcd$var$sum32 = $jeqqE.sum32;
var $f124867f7bd3ddcd$var$sum32_3 = $jeqqE.sum32_3;
var $f124867f7bd3ddcd$var$sum32_4 = $jeqqE.sum32_4;
var $f124867f7bd3ddcd$var$BlockHash = $6NOEI.BlockHash;
function $f124867f7bd3ddcd$var$RIPEMD160() {
    if (!(this instanceof $f124867f7bd3ddcd$var$RIPEMD160)) return new $f124867f7bd3ddcd$var$RIPEMD160();
    $f124867f7bd3ddcd$var$BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.endian = "little";
}
$jeqqE.inherits($f124867f7bd3ddcd$var$RIPEMD160, $f124867f7bd3ddcd$var$BlockHash);
$f124867f7bd3ddcd$export$d1cea0ee4e3f0d3e = $f124867f7bd3ddcd$var$RIPEMD160;
$f124867f7bd3ddcd$var$RIPEMD160.blockSize = 512;
$f124867f7bd3ddcd$var$RIPEMD160.outSize = 160;
$f124867f7bd3ddcd$var$RIPEMD160.hmacStrength = 192;
$f124867f7bd3ddcd$var$RIPEMD160.padLength = 64;
$f124867f7bd3ddcd$var$RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for(var j = 0; j < 80; j++){
        var T = $f124867f7bd3ddcd$var$sum32($f124867f7bd3ddcd$var$rotl32($f124867f7bd3ddcd$var$sum32_4(A, $f124867f7bd3ddcd$var$f(j, B, C, D), msg[$f124867f7bd3ddcd$var$r[j] + start], $f124867f7bd3ddcd$var$K(j)), $f124867f7bd3ddcd$var$s[j]), E);
        A = E;
        E = D;
        D = $f124867f7bd3ddcd$var$rotl32(C, 10);
        C = B;
        B = T;
        T = $f124867f7bd3ddcd$var$sum32($f124867f7bd3ddcd$var$rotl32($f124867f7bd3ddcd$var$sum32_4(Ah, $f124867f7bd3ddcd$var$f(79 - j, Bh, Ch, Dh), msg[$f124867f7bd3ddcd$var$rh[j] + start], $f124867f7bd3ddcd$var$Kh(j)), $f124867f7bd3ddcd$var$sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = $f124867f7bd3ddcd$var$rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = $f124867f7bd3ddcd$var$sum32_3(this.h[1], C, Dh);
    this.h[1] = $f124867f7bd3ddcd$var$sum32_3(this.h[2], D, Eh);
    this.h[2] = $f124867f7bd3ddcd$var$sum32_3(this.h[3], E, Ah);
    this.h[3] = $f124867f7bd3ddcd$var$sum32_3(this.h[4], A, Bh);
    this.h[4] = $f124867f7bd3ddcd$var$sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
};
$f124867f7bd3ddcd$var$RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === "hex") return $jeqqE.toHex32(this.h, "little");
    else return $jeqqE.split32(this.h, "little");
};
function $f124867f7bd3ddcd$var$f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return x & y | ~x & z;
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
function $f124867f7bd3ddcd$var$K(j) {
    if (j <= 15) return 0x00000000;
    else if (j <= 31) return 0x5a827999;
    else if (j <= 47) return 0x6ed9eba1;
    else if (j <= 63) return 0x8f1bbcdc;
    else return 0xa953fd4e;
}
function $f124867f7bd3ddcd$var$Kh(j) {
    if (j <= 15) return 0x50a28be6;
    else if (j <= 31) return 0x5c4dd124;
    else if (j <= 47) return 0x6d703ef3;
    else if (j <= 63) return 0x7a6d76e9;
    else return 0x00000000;
}
var $f124867f7bd3ddcd$var$r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var $f124867f7bd3ddcd$var$rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var $f124867f7bd3ddcd$var$s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var $f124867f7bd3ddcd$var$sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];

});

parcelRequire.register("j848g", function(module, exports) {
"use strict";

var $jeqqE = parcelRequire("jeqqE");

var $fWN7B = parcelRequire("fWN7B");
function $ded1f844529cb41f$var$Hmac(hash, key, enc) {
    if (!(this instanceof $ded1f844529cb41f$var$Hmac)) return new $ded1f844529cb41f$var$Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init($jeqqE.toArray(key, enc));
}
module.exports = $ded1f844529cb41f$var$Hmac;
$ded1f844529cb41f$var$Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    $fWN7B(key.length <= this.blockSize);
    // Add padding to key
    for(var i = key.length; i < this.blockSize; i++)key.push(0);
    for(i = 0; i < key.length; i++)key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);
    // 0x36 ^ 0x5c = 0x6a
    for(i = 0; i < key.length; i++)key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
};
$ded1f844529cb41f$var$Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};
$ded1f844529cb41f$var$Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};

});


parcelRequire.register("5zC2Q", function(module, exports) {
module.exports = {
    doubles: {
        step: 4,
        points: [
            [
                "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
                "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
            ],
            [
                "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
                "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
            ],
            [
                "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
                "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
            ],
            [
                "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
                "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
            ],
            [
                "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
                "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
            ],
            [
                "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
                "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
            ],
            [
                "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
                "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
            ],
            [
                "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
                "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
            ],
            [
                "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
                "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
            ],
            [
                "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
                "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
            ],
            [
                "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
                "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
            ],
            [
                "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
                "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
            ],
            [
                "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
                "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
            ],
            [
                "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
                "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
            ],
            [
                "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
                "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
            ],
            [
                "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
                "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
            ],
            [
                "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
                "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
            ],
            [
                "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
                "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
            ],
            [
                "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
                "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
            ],
            [
                "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
                "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
            ],
            [
                "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
                "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
            ],
            [
                "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
                "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
            ],
            [
                "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
                "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
            ],
            [
                "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
                "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
            ],
            [
                "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
                "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
            ],
            [
                "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
                "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
            ],
            [
                "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
                "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
            ],
            [
                "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
                "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
            ],
            [
                "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
                "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
            ],
            [
                "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
                "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
            ],
            [
                "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
                "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
            ],
            [
                "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
                "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
            ],
            [
                "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
                "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
            ],
            [
                "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
                "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
            ],
            [
                "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
                "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
            ],
            [
                "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
                "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
            ],
            [
                "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
                "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
            ],
            [
                "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
                "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
            ],
            [
                "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
                "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
            ],
            [
                "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
                "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
            ],
            [
                "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
                "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
            ],
            [
                "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
                "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
            ],
            [
                "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
                "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
            ],
            [
                "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
                "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
            ],
            [
                "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
                "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
            ],
            [
                "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
                "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
            ],
            [
                "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
                "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
            ],
            [
                "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
                "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
            ],
            [
                "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
                "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
            ],
            [
                "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
                "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
            ],
            [
                "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
                "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
            ],
            [
                "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
                "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
            ],
            [
                "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
                "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
            ],
            [
                "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
                "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
            ],
            [
                "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
                "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
            ],
            [
                "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
                "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
            ],
            [
                "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
                "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
            ],
            [
                "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
                "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
            ],
            [
                "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
                "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
            ],
            [
                "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
                "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
            ],
            [
                "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
                "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
            ],
            [
                "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
                "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
            ],
            [
                "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
                "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
            ],
            [
                "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
                "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
            ],
            [
                "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
                "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
            ]
        ]
    },
    naf: {
        wnd: 7,
        points: [
            [
                "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
                "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
            ],
            [
                "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
                "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
            ],
            [
                "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
                "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
            ],
            [
                "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
                "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
            ],
            [
                "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
                "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
            ],
            [
                "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
                "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
            ],
            [
                "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
                "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
            ],
            [
                "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
                "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
            ],
            [
                "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
                "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
            ],
            [
                "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
                "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
            ],
            [
                "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
                "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
            ],
            [
                "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
                "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
            ],
            [
                "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
                "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
            ],
            [
                "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
                "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
            ],
            [
                "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
                "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
            ],
            [
                "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
                "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
            ],
            [
                "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
                "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
            ],
            [
                "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
                "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
            ],
            [
                "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
                "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
            ],
            [
                "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
                "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
            ],
            [
                "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
                "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
            ],
            [
                "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
                "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
            ],
            [
                "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
                "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
            ],
            [
                "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
                "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
            ],
            [
                "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
                "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
            ],
            [
                "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
                "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
            ],
            [
                "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
                "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
            ],
            [
                "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
                "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
            ],
            [
                "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
                "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
            ],
            [
                "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
                "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
            ],
            [
                "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
                "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
            ],
            [
                "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
                "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
            ],
            [
                "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
                "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
            ],
            [
                "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
                "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
            ],
            [
                "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
                "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
            ],
            [
                "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
                "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
            ],
            [
                "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
                "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
            ],
            [
                "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
                "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
            ],
            [
                "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
                "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
            ],
            [
                "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
                "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
            ],
            [
                "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
                "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
            ],
            [
                "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
                "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
            ],
            [
                "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
                "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
            ],
            [
                "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
                "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
            ],
            [
                "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
                "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
            ],
            [
                "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
                "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
            ],
            [
                "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
                "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
            ],
            [
                "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
                "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
            ],
            [
                "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
                "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
            ],
            [
                "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
                "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
            ],
            [
                "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
                "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
            ],
            [
                "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
                "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
            ],
            [
                "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
                "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
            ],
            [
                "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
                "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
            ],
            [
                "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
                "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
            ],
            [
                "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
                "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
            ],
            [
                "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
                "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
            ],
            [
                "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
                "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
            ],
            [
                "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
                "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
            ],
            [
                "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
                "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
            ],
            [
                "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
                "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
            ],
            [
                "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
                "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
            ],
            [
                "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
                "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
            ],
            [
                "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
                "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
            ],
            [
                "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
                "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
            ],
            [
                "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
                "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
            ],
            [
                "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
                "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
            ],
            [
                "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
                "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
            ],
            [
                "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
                "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
            ],
            [
                "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
                "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
            ],
            [
                "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
                "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
            ],
            [
                "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
                "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
            ],
            [
                "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
                "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
            ],
            [
                "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
                "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
            ],
            [
                "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
                "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
            ],
            [
                "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
                "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
            ],
            [
                "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
                "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
            ],
            [
                "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
                "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
            ],
            [
                "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
                "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
            ],
            [
                "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
                "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
            ],
            [
                "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
                "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
            ],
            [
                "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
                "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
            ],
            [
                "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
                "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
            ],
            [
                "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
                "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
            ],
            [
                "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
                "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
            ],
            [
                "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
                "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
            ],
            [
                "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
                "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
            ],
            [
                "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
                "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
            ],
            [
                "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
                "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
            ],
            [
                "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
                "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
            ],
            [
                "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
                "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
            ],
            [
                "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
                "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
            ],
            [
                "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
                "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
            ],
            [
                "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
                "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
            ],
            [
                "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
                "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
            ],
            [
                "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
                "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
            ],
            [
                "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
                "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
            ],
            [
                "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
                "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
            ],
            [
                "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
                "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
            ],
            [
                "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
                "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
            ],
            [
                "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
                "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
            ],
            [
                "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
                "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
            ],
            [
                "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
                "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
            ],
            [
                "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
                "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
            ],
            [
                "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
                "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
            ],
            [
                "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
                "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
            ],
            [
                "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
                "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
            ],
            [
                "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
                "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
            ],
            [
                "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
                "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
            ],
            [
                "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
                "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
            ],
            [
                "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
                "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
            ],
            [
                "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
                "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
            ],
            [
                "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
                "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
            ],
            [
                "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
                "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
            ],
            [
                "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
                "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
            ],
            [
                "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
                "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
            ],
            [
                "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
                "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
            ],
            [
                "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
                "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
            ],
            [
                "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
                "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
            ],
            [
                "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
                "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
            ],
            [
                "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
                "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
            ],
            [
                "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
                "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
            ],
            [
                "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
                "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
            ],
            [
                "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
                "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
            ],
            [
                "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
                "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
            ],
            [
                "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
                "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
            ],
            [
                "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
                "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
            ]
        ]
    }
};

});


parcelRequire.register("fSDro", function(module, exports) {
"use strict";

var $k00A4 = parcelRequire("k00A4");

var $5VfEE = parcelRequire("5VfEE");

var $21CGS = parcelRequire("21CGS");

var $lEx2i = parcelRequire("lEx2i");

var $8BHpz = parcelRequire("8BHpz");
var $b8fa7e4503c57898$var$assert = $21CGS.assert;

var $3L8Zo = parcelRequire("3L8Zo");

var $ickA0 = parcelRequire("ickA0");
function $b8fa7e4503c57898$var$EC(options) {
    if (!(this instanceof $b8fa7e4503c57898$var$EC)) return new $b8fa7e4503c57898$var$EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === "string") {
        $b8fa7e4503c57898$var$assert(Object.prototype.hasOwnProperty.call($lEx2i, options), "Unknown curve " + options);
        options = $lEx2i[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof $lEx2i.PresetCurve) options = {
        curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
module.exports = $b8fa7e4503c57898$var$EC;
$b8fa7e4503c57898$var$EC.prototype.keyPair = function keyPair(options) {
    return new $3L8Zo(this, options);
};
$b8fa7e4503c57898$var$EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return $3L8Zo.fromPrivate(this, priv, enc);
};
$b8fa7e4503c57898$var$EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return $3L8Zo.fromPublic(this, pub, enc);
};
$b8fa7e4503c57898$var$EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {};
    // Instantiate Hmac_DRBG
    var drbg = new $5VfEE({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || $8BHpz(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new $k00A4(2));
    for(;;){
        var priv = new $k00A4(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};
$b8fa7e4503c57898$var$EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};
$b8fa7e4503c57898$var$EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === "object") {
        options = enc;
        enc = null;
    }
    if (!options) options = {};
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new $k00A4(msg, 16));
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray("be", bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray("be", bytes);
    // Instantiate Hmac_DRBG
    var drbg = new $5VfEE({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new $k00A4(1));
    for(var iter = 0;; iter++){
        var k = options.k ? options.k(iter) : new $k00A4(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new $ickA0({
            r: r,
            s: s,
            recoveryParam: recoveryParam
        });
    }
};
$b8fa7e4503c57898$var$EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new $k00A4(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new $ickA0(signature, "hex");
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
$b8fa7e4503c57898$var$EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    $b8fa7e4503c57898$var$assert((3 & j) === j, "The recovery param is more than two bits");
    signature = new $ickA0(signature, enc);
    var n = this.n;
    var e = new $k00A4(msg);
    var r = signature.r;
    var s = signature.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error("Unable to find sencond key candinate");
    // 1.1. Let x = r + jn.
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
$b8fa7e4503c57898$var$EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new $ickA0(signature, enc);
    if (signature.recoveryParam !== null) return signature.recoveryParam;
    for(var i = 0; i < 4; i++){
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
            continue;
        }
        if (Qprime.eq(Q)) return i;
    }
    throw new Error("Unable to find valid recovery factor");
};

});
parcelRequire.register("5VfEE", function(module, exports) {
"use strict";

var $dz7xi = parcelRequire("dz7xi");

var $8vVGa = parcelRequire("8vVGa");

var $fWN7B = parcelRequire("fWN7B");
function $44fe6b4bdffa63dd$var$HmacDRBG(options) {
    if (!(this instanceof $44fe6b4bdffa63dd$var$HmacDRBG)) return new $44fe6b4bdffa63dd$var$HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = $8vVGa.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = $8vVGa.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = $8vVGa.toArray(options.pers, options.persEnc || "hex");
    $fWN7B(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._init(entropy, nonce, pers);
}
module.exports = $44fe6b4bdffa63dd$var$HmacDRBG;
$44fe6b4bdffa63dd$var$HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for(var i = 0; i < this.V.length; i++){
        this.K[i] = 0x00;
        this.V[i] = 0x01;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000; // 2^48
};
$44fe6b4bdffa63dd$var$HmacDRBG.prototype._hmac = function hmac() {
    return new $dz7xi.hmac(this.hash, this.K);
};
$44fe6b4bdffa63dd$var$HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([
        0x00
    ]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([
        0x01
    ]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};
$44fe6b4bdffa63dd$var$HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== "string") {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }
    entropy = $8vVGa.toArray(entropy, entropyEnc);
    add = $8vVGa.toArray(add, addEnc);
    $fWN7B(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
$44fe6b4bdffa63dd$var$HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
    // Optional encoding
    if (typeof enc !== "string") {
        addEnc = add;
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = $8vVGa.toArray(add, addEnc || "hex");
        this._update(add);
    }
    var temp = [];
    while(temp.length < len){
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return $8vVGa.encode(res, enc);
};

});

parcelRequire.register("3L8Zo", function(module, exports) {
"use strict";

var $k00A4 = parcelRequire("k00A4");

var $21CGS = parcelRequire("21CGS");
var $2bccbbf542890ef1$var$assert = $21CGS.assert;
function $2bccbbf542890ef1$var$KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = $2bccbbf542890ef1$var$KeyPair;
$2bccbbf542890ef1$var$KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof $2bccbbf542890ef1$var$KeyPair) return pub;
    return new $2bccbbf542890ef1$var$KeyPair(ec, {
        pub: pub,
        pubEnc: enc
    });
};
$2bccbbf542890ef1$var$KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof $2bccbbf542890ef1$var$KeyPair) return priv;
    return new $2bccbbf542890ef1$var$KeyPair(ec, {
        priv: priv,
        privEnc: enc
    });
};
$2bccbbf542890ef1$var$KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
        result: false,
        reason: "Invalid public key"
    };
    if (!pub.validate()) return {
        result: false,
        reason: "Public key is not a point"
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: "Public key * N != O"
    };
    return {
        result: true,
        reason: null
    };
};
$2bccbbf542890ef1$var$KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === "string") {
        enc = compact;
        compact = null;
    }
    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
};
$2bccbbf542890ef1$var$KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex") return this.priv.toString(16, 2);
    else return this.priv;
};
$2bccbbf542890ef1$var$KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new $k00A4(key, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
$2bccbbf542890ef1$var$KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === "mont") $2bccbbf542890ef1$var$assert(key.x, "Need x coordinate");
        else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") $2bccbbf542890ef1$var$assert(key.x && key.y, "Need both x and y coordinate");
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};
// ECDH
$2bccbbf542890ef1$var$KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) $2bccbbf542890ef1$var$assert(pub.validate(), "public point not validated");
    return pub.mul(this.priv).getX();
};
// ECDSA
$2bccbbf542890ef1$var$KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
$2bccbbf542890ef1$var$KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
};
$2bccbbf542890ef1$var$KeyPair.prototype.inspect = function inspect() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
};

});

parcelRequire.register("ickA0", function(module, exports) {
"use strict";

var $k00A4 = parcelRequire("k00A4");

var $21CGS = parcelRequire("21CGS");
var $d3f94faed8ff8f90$var$assert = $21CGS.assert;
function $d3f94faed8ff8f90$var$Signature(options, enc) {
    if (options instanceof $d3f94faed8ff8f90$var$Signature) return options;
    if (this._importDER(options, enc)) return;
    $d3f94faed8ff8f90$var$assert(options.r && options.s, "Signature without r or s");
    this.r = new $k00A4(options.r, 16);
    this.s = new $k00A4(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
module.exports = $d3f94faed8ff8f90$var$Signature;
function $d3f94faed8ff8f90$var$Position() {
    this.place = 0;
}
function $d3f94faed8ff8f90$var$getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) return initial;
    var octetLen = initial & 0xf;
    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) return false;
    var val = 0;
    for(var i = 0, off = p.place; i < octetLen; i++, off++){
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }
    // Leading zeroes
    if (val <= 0x7f) return false;
    p.place = off;
    return val;
}
function $d3f94faed8ff8f90$var$rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len)i++;
    if (i === 0) return buf;
    return buf.slice(i);
}
$d3f94faed8ff8f90$var$Signature.prototype._importDER = function _importDER(data, enc) {
    data = $21CGS.toArray(data, enc);
    var p = new $d3f94faed8ff8f90$var$Position();
    if (data[p.place++] !== 0x30) return false;
    var len = $d3f94faed8ff8f90$var$getLength(data, p);
    if (len === false) return false;
    if (len + p.place !== data.length) return false;
    if (data[p.place++] !== 0x02) return false;
    var rlen = $d3f94faed8ff8f90$var$getLength(data, p);
    if (rlen === false) return false;
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) return false;
    var slen = $d3f94faed8ff8f90$var$getLength(data, p);
    if (slen === false) return false;
    if (data.length !== slen + p.place) return false;
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 0x80) r = r.slice(1);
        else // Leading zeroes
        return false;
    }
    if (s[0] === 0) {
        if (s[1] & 0x80) s = s.slice(1);
        else // Leading zeroes
        return false;
    }
    this.r = new $k00A4(r);
    this.s = new $k00A4(s);
    this.recoveryParam = null;
    return true;
};
function $d3f94faed8ff8f90$var$constructLength(arr, len) {
    if (len < 0x80) {
        arr.push(len);
        return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while(--octets)arr.push(len >>> (octets << 3) & 0xff);
    arr.push(len);
}
$d3f94faed8ff8f90$var$Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    // Pad values
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    r = $d3f94faed8ff8f90$var$rmPadding(r);
    s = $d3f94faed8ff8f90$var$rmPadding(s);
    while(!s[0] && !(s[1] & 0x80))s = s.slice(1);
    var arr = [
        0x02
    ];
    $d3f94faed8ff8f90$var$constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    $d3f94faed8ff8f90$var$constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [
        0x30
    ];
    $d3f94faed8ff8f90$var$constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return $21CGS.encode(res, enc);
};

});


parcelRequire.register("2ugt9", function(module, exports) {
"use strict";

var $dz7xi = parcelRequire("dz7xi");

var $lEx2i = parcelRequire("lEx2i");

var $21CGS = parcelRequire("21CGS");
var $1cfb289260be5ba4$var$assert = $21CGS.assert;
var $1cfb289260be5ba4$var$parseBytes = $21CGS.parseBytes;

var $3VFUA = parcelRequire("3VFUA");

var $kME1b = parcelRequire("kME1b");
function $1cfb289260be5ba4$var$EDDSA(curve) {
    $1cfb289260be5ba4$var$assert(curve === "ed25519", "only tested with ed25519 so far");
    if (!(this instanceof $1cfb289260be5ba4$var$EDDSA)) return new $1cfb289260be5ba4$var$EDDSA(curve);
    curve = $lEx2i[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = $dz7xi.sha512;
}
module.exports = $1cfb289260be5ba4$var$EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/ $1cfb289260be5ba4$var$EDDSA.prototype.sign = function sign(message, secret) {
    message = $1cfb289260be5ba4$var$parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
    });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/ $1cfb289260be5ba4$var$EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = $1cfb289260be5ba4$var$parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};
$1cfb289260be5ba4$var$EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for(var i = 0; i < arguments.length; i++)hash.update(arguments[i]);
    return $21CGS.intFromLE(hash.digest()).umod(this.curve.n);
};
$1cfb289260be5ba4$var$EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return $3VFUA.fromPublic(this, pub);
};
$1cfb289260be5ba4$var$EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return $3VFUA.fromSecret(this, secret);
};
$1cfb289260be5ba4$var$EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof $kME1b) return sig;
    return new $kME1b(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/ $1cfb289260be5ba4$var$EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray("le", this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
};
$1cfb289260be5ba4$var$EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = $21CGS.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
    var y = $21CGS.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};
$1cfb289260be5ba4$var$EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray("le", this.encodingLength);
};
$1cfb289260be5ba4$var$EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return $21CGS.intFromLE(bytes);
};
$1cfb289260be5ba4$var$EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

});
parcelRequire.register("3VFUA", function(module, exports) {
"use strict";

var $21CGS = parcelRequire("21CGS");
var $2dc734c41662d445$var$assert = $21CGS.assert;
var $2dc734c41662d445$var$parseBytes = $21CGS.parseBytes;
var $2dc734c41662d445$var$cachedProperty = $21CGS.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/ function $2dc734c41662d445$var$KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = $2dc734c41662d445$var$parseBytes(params.secret);
    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
    else this._pubBytes = $2dc734c41662d445$var$parseBytes(params.pub);
}
$2dc734c41662d445$var$KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof $2dc734c41662d445$var$KeyPair) return pub;
    return new $2dc734c41662d445$var$KeyPair(eddsa, {
        pub: pub
    });
};
$2dc734c41662d445$var$KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof $2dc734c41662d445$var$KeyPair) return secret;
    return new $2dc734c41662d445$var$KeyPair(eddsa, {
        secret: secret
    });
};
$2dc734c41662d445$var$KeyPair.prototype.secret = function secret() {
    return this._secret;
};
$2dc734c41662d445$var$cachedProperty($2dc734c41662d445$var$KeyPair, "pubBytes", function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});
$2dc734c41662d445$var$cachedProperty($2dc734c41662d445$var$KeyPair, "pub", function pub() {
    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});
$2dc734c41662d445$var$cachedProperty($2dc734c41662d445$var$KeyPair, "privBytes", function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
});
$2dc734c41662d445$var$cachedProperty($2dc734c41662d445$var$KeyPair, "priv", function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});
$2dc734c41662d445$var$cachedProperty($2dc734c41662d445$var$KeyPair, "hash", function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});
$2dc734c41662d445$var$cachedProperty($2dc734c41662d445$var$KeyPair, "messagePrefix", function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});
$2dc734c41662d445$var$KeyPair.prototype.sign = function sign(message) {
    $2dc734c41662d445$var$assert(this._secret, "KeyPair can only verify");
    return this.eddsa.sign(message, this);
};
$2dc734c41662d445$var$KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};
$2dc734c41662d445$var$KeyPair.prototype.getSecret = function getSecret(enc) {
    $2dc734c41662d445$var$assert(this._secret, "KeyPair is public only");
    return $21CGS.encode(this.secret(), enc);
};
$2dc734c41662d445$var$KeyPair.prototype.getPublic = function getPublic(enc) {
    return $21CGS.encode(this.pubBytes(), enc);
};
module.exports = $2dc734c41662d445$var$KeyPair;

});

parcelRequire.register("kME1b", function(module, exports) {
"use strict";

var $k00A4 = parcelRequire("k00A4");

var $21CGS = parcelRequire("21CGS");
var $f21755166ef2c7ad$var$assert = $21CGS.assert;
var $f21755166ef2c7ad$var$cachedProperty = $21CGS.cachedProperty;
var $f21755166ef2c7ad$var$parseBytes = $21CGS.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/ function $f21755166ef2c7ad$var$Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== "object") sig = $f21755166ef2c7ad$var$parseBytes(sig);
    if (Array.isArray(sig)) sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
    };
    $f21755166ef2c7ad$var$assert(sig.R && sig.S, "Signature without R or S");
    if (eddsa.isPoint(sig.R)) this._R = sig.R;
    if (sig.S instanceof $k00A4) this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}
$f21755166ef2c7ad$var$cachedProperty($f21755166ef2c7ad$var$Signature, "S", function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});
$f21755166ef2c7ad$var$cachedProperty($f21755166ef2c7ad$var$Signature, "R", function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});
$f21755166ef2c7ad$var$cachedProperty($f21755166ef2c7ad$var$Signature, "Rencoded", function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});
$f21755166ef2c7ad$var$cachedProperty($f21755166ef2c7ad$var$Signature, "Sencoded", function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});
$f21755166ef2c7ad$var$Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};
$f21755166ef2c7ad$var$Signature.prototype.toHex = function toHex() {
    return $21CGS.encode(this.toBytes(), "hex").toUpperCase();
};
module.exports = $f21755166ef2c7ad$var$Signature;

});



parcelRequire.register("4oqj4", function(module, exports) {

var $dPmQG = parcelRequire("dPmQG");

var $kNNl1 = parcelRequire("kNNl1");

var $jfQPs = parcelRequire("jfQPs");

var $3xfw9 = parcelRequire("3xfw9");

var $3oAAz = parcelRequire("3oAAz");

var $iUdYW = parcelRequire("iUdYW");
var $332dcf434df8fe86$require$Buffer = $iUdYW.Buffer;
module.exports = $332dcf434df8fe86$var$parseKeys;
function $332dcf434df8fe86$var$parseKeys(buffer) {
    var password;
    if (typeof buffer === "object" && !$332dcf434df8fe86$require$Buffer.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
    }
    if (typeof buffer === "string") buffer = $332dcf434df8fe86$require$Buffer.from(buffer);
    var stripped = $jfQPs(buffer, password);
    var type = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch(type){
        case "CERTIFICATE":
            ndata = $dPmQG.certificate.decode(data, "der").tbsCertificate.subjectPublicKeyInfo;
        // falls through
        case "PUBLIC KEY":
            if (!ndata) ndata = $dPmQG.PublicKey.decode(data, "der");
            subtype = ndata.algorithm.algorithm.join(".");
            switch(subtype){
                case "1.2.840.113549.1.1.1":
                    return $dPmQG.RSAPublicKey.decode(ndata.subjectPublicKey.data, "der");
                case "1.2.840.10045.2.1":
                    ndata.subjectPrivateKey = ndata.subjectPublicKey;
                    return {
                        type: "ec",
                        data: ndata
                    };
                case "1.2.840.10040.4.1":
                    ndata.algorithm.params.pub_key = $dPmQG.DSAparam.decode(ndata.subjectPublicKey.data, "der");
                    return {
                        type: "dsa",
                        data: ndata.algorithm.params
                    };
                default:
                    throw new Error("unknown key id " + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case "ENCRYPTED PRIVATE KEY":
            data = $dPmQG.EncryptedPrivateKey.decode(data, "der");
            data = $332dcf434df8fe86$var$decrypt(data, password);
        // falls through
        case "PRIVATE KEY":
            ndata = $dPmQG.PrivateKey.decode(data, "der");
            subtype = ndata.algorithm.algorithm.join(".");
            switch(subtype){
                case "1.2.840.113549.1.1.1":
                    return $dPmQG.RSAPrivateKey.decode(ndata.subjectPrivateKey, "der");
                case "1.2.840.10045.2.1":
                    return {
                        curve: ndata.algorithm.curve,
                        privateKey: $dPmQG.ECPrivateKey.decode(ndata.subjectPrivateKey, "der").privateKey
                    };
                case "1.2.840.10040.4.1":
                    ndata.algorithm.params.priv_key = $dPmQG.DSAparam.decode(ndata.subjectPrivateKey, "der");
                    return {
                        type: "dsa",
                        params: ndata.algorithm.params
                    };
                default:
                    throw new Error("unknown key id " + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case "RSA PUBLIC KEY":
            return $dPmQG.RSAPublicKey.decode(data, "der");
        case "RSA PRIVATE KEY":
            return $dPmQG.RSAPrivateKey.decode(data, "der");
        case "DSA PRIVATE KEY":
            return {
                type: "dsa",
                params: $dPmQG.DSAPrivateKey.decode(data, "der")
            };
        case "EC PRIVATE KEY":
            data = $dPmQG.ECPrivateKey.decode(data, "der");
            return {
                curve: data.parameters.value,
                privateKey: data.privateKey
            };
        default:
            throw new Error("unknown key type " + type);
    }
}
$332dcf434df8fe86$var$parseKeys.signature = $dPmQG.signature;
function $332dcf434df8fe86$var$decrypt(data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = $kNNl1[data.algorithm.decrypt.cipher.algo.join(".")];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split("-")[1], 10) / 8;
    var key = $3oAAz.pbkdf2Sync(password, salt, iters, keylen, "sha1");
    var cipher = $3xfw9.createDecipheriv(algo, key, iv);
    var out = [];
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    return $332dcf434df8fe86$require$Buffer.concat(out);
}

});
parcelRequire.register("dPmQG", function(module, exports) {

$parcel$export(module.exports, "certificate", () => $a111c30df794ee70$export$c98397a6eb8d0678, (v) => $a111c30df794ee70$export$c98397a6eb8d0678 = v);
$parcel$export(module.exports, "RSAPrivateKey", () => $a111c30df794ee70$export$f4aab6816f64fa6b, (v) => $a111c30df794ee70$export$f4aab6816f64fa6b = v);
$parcel$export(module.exports, "RSAPublicKey", () => $a111c30df794ee70$export$4471f5c65d097c11, (v) => $a111c30df794ee70$export$4471f5c65d097c11 = v);
$parcel$export(module.exports, "PublicKey", () => $a111c30df794ee70$export$ca8b6604d6ce14de, (v) => $a111c30df794ee70$export$ca8b6604d6ce14de = v);
$parcel$export(module.exports, "PrivateKey", () => $a111c30df794ee70$export$8f54525b330fd87b, (v) => $a111c30df794ee70$export$8f54525b330fd87b = v);
$parcel$export(module.exports, "EncryptedPrivateKey", () => $a111c30df794ee70$export$23cd2842b44ca3e7, (v) => $a111c30df794ee70$export$23cd2842b44ca3e7 = v);
$parcel$export(module.exports, "DSAPrivateKey", () => $a111c30df794ee70$export$245c9aaa9f5ce4ce, (v) => $a111c30df794ee70$export$245c9aaa9f5ce4ce = v);
$parcel$export(module.exports, "DSAparam", () => $a111c30df794ee70$export$8ad762e3e6399afe, (v) => $a111c30df794ee70$export$8ad762e3e6399afe = v);
$parcel$export(module.exports, "ECPrivateKey", () => $a111c30df794ee70$export$32ef6f92e22c6ab0, (v) => $a111c30df794ee70$export$32ef6f92e22c6ab0 = v);
$parcel$export(module.exports, "signature", () => $a111c30df794ee70$export$c9cd164b539ebb63, (v) => $a111c30df794ee70$export$c9cd164b539ebb63 = v);
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
var $a111c30df794ee70$export$c98397a6eb8d0678;
var $a111c30df794ee70$export$f4aab6816f64fa6b;
var $a111c30df794ee70$export$4471f5c65d097c11;
var $a111c30df794ee70$export$ca8b6604d6ce14de;
var $a111c30df794ee70$export$8f54525b330fd87b;
var $a111c30df794ee70$export$23cd2842b44ca3e7;
var $a111c30df794ee70$export$245c9aaa9f5ce4ce;
var $a111c30df794ee70$export$8ad762e3e6399afe;
var $a111c30df794ee70$export$32ef6f92e22c6ab0;
var $a111c30df794ee70$export$c9cd164b539ebb63;
"use strict";

var $cvVCJ = parcelRequire("cvVCJ");

$a111c30df794ee70$export$c98397a6eb8d0678 = (parcelRequire("ifj66"));
var $a111c30df794ee70$var$RSAPrivateKey = $cvVCJ.define("RSAPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
});
$a111c30df794ee70$export$f4aab6816f64fa6b = $a111c30df794ee70$var$RSAPrivateKey;
var $a111c30df794ee70$var$RSAPublicKey = $cvVCJ.define("RSAPublicKey", function() {
    this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
});
$a111c30df794ee70$export$4471f5c65d097c11 = $a111c30df794ee70$var$RSAPublicKey;
var $a111c30df794ee70$var$PublicKey = $cvVCJ.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(this.key("algorithm").use($a111c30df794ee70$var$AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
});
$a111c30df794ee70$export$ca8b6604d6ce14de = $a111c30df794ee70$var$PublicKey;
var $a111c30df794ee70$var$AlgorithmIdentifier = $cvVCJ.define("AlgorithmIdentifier", function() {
    this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
});
var $a111c30df794ee70$var$PrivateKeyInfo = $cvVCJ.define("PrivateKeyInfo", function() {
    this.seq().obj(this.key("version").int(), this.key("algorithm").use($a111c30df794ee70$var$AlgorithmIdentifier), this.key("subjectPrivateKey").octstr());
});
$a111c30df794ee70$export$8f54525b330fd87b = $a111c30df794ee70$var$PrivateKeyInfo;
var $a111c30df794ee70$var$EncryptedPrivateKeyInfo = $cvVCJ.define("EncryptedPrivateKeyInfo", function() {
    this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
});
$a111c30df794ee70$export$23cd2842b44ca3e7 = $a111c30df794ee70$var$EncryptedPrivateKeyInfo;
var $a111c30df794ee70$var$DSAPrivateKey = $cvVCJ.define("DSAPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
});
$a111c30df794ee70$export$245c9aaa9f5ce4ce = $a111c30df794ee70$var$DSAPrivateKey;
$a111c30df794ee70$export$8ad762e3e6399afe = $cvVCJ.define("DSAparam", function() {
    this.int();
});
var $a111c30df794ee70$var$ECPrivateKey = $cvVCJ.define("ECPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use($a111c30df794ee70$var$ECParameters), this.key("publicKey").optional().explicit(1).bitstr());
});
$a111c30df794ee70$export$32ef6f92e22c6ab0 = $a111c30df794ee70$var$ECPrivateKey;
var $a111c30df794ee70$var$ECParameters = $cvVCJ.define("ECParameters", function() {
    this.choice({
        namedCurve: this.objid()
    });
});
$a111c30df794ee70$export$c9cd164b539ebb63 = $cvVCJ.define("signature", function() {
    this.seq().obj(this.key("r").int(), this.key("s").int());
});

});
parcelRequire.register("cvVCJ", function(module, exports) {
"use strict";
const $91c51422adb58488$var$asn1 = module.exports;

$91c51422adb58488$var$asn1.bignum = (parcelRequire("70OLo"));

$91c51422adb58488$var$asn1.define = (parcelRequire("bh8JX")).define;

$91c51422adb58488$var$asn1.base = (parcelRequire("bkl54"));

$91c51422adb58488$var$asn1.constants = (parcelRequire("eLaky"));

$91c51422adb58488$var$asn1.decoders = (parcelRequire("9ndxO"));

$91c51422adb58488$var$asn1.encoders = (parcelRequire("NijbD"));

});
parcelRequire.register("70OLo", function(module, exports) {

(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = (parcelRequire("fNNvm")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("bh8JX", function(module, exports) {
"use strict";

var $NijbD = parcelRequire("NijbD");

var $9ndxO = parcelRequire("9ndxO");

var $4gPgC = parcelRequire("4gPgC");
const $83580fdf8162be79$var$api = module.exports;
$83580fdf8162be79$var$api.define = function define(name, body) {
    return new $83580fdf8162be79$var$Entity(name, body);
};
function $83580fdf8162be79$var$Entity(name, body) {
    this.name = name;
    this.body = body;
    this.decoders = {};
    this.encoders = {};
}
$83580fdf8162be79$var$Entity.prototype._createNamed = function createNamed(Base) {
    const name = this.name;
    function Generated(entity) {
        this._initNamed(entity, name);
    }
    $4gPgC(Generated, Base);
    Generated.prototype._initNamed = function _initNamed(entity, name) {
        Base.call(this, entity, name);
    };
    return new Generated(this);
};
$83580fdf8162be79$var$Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || "der";
    // Lazily create decoder
    if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed($9ndxO[enc]);
    return this.decoders[enc];
};
$83580fdf8162be79$var$Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
};
$83580fdf8162be79$var$Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || "der";
    // Lazily create encoder
    if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed($NijbD[enc]);
    return this.encoders[enc];
};
$83580fdf8162be79$var$Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
    return this._getEncoder(enc).encode(data, reporter);
};

});
parcelRequire.register("NijbD", function(module, exports) {
"use strict";
const $0942c76594949f52$var$encoders = module.exports;

$0942c76594949f52$var$encoders.der = (parcelRequire("10FkS"));

$0942c76594949f52$var$encoders.pem = (parcelRequire("7X1pA"));

});
parcelRequire.register("10FkS", function(module, exports) {
"use strict";

var $4gPgC = parcelRequire("4gPgC");

var $7sMJm = parcelRequire("7sMJm");
var $0bc5daf1bcc84c42$require$Buffer = $7sMJm.Buffer;

var $5eqeq = parcelRequire("5eqeq");

var $8pIYT = parcelRequire("8pIYT");
function $0bc5daf1bcc84c42$var$DEREncoder(entity) {
    this.enc = "der";
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new $0bc5daf1bcc84c42$var$DERNode();
    this.tree._init(entity.body);
}
module.exports = $0bc5daf1bcc84c42$var$DEREncoder;
$0bc5daf1bcc84c42$var$DEREncoder.prototype.encode = function encode(data, reporter) {
    return this.tree._encode(data, reporter).join();
};
// Tree methods
function $0bc5daf1bcc84c42$var$DERNode(parent) {
    $5eqeq.call(this, "der", parent);
}
$4gPgC($0bc5daf1bcc84c42$var$DERNode, $5eqeq);
$0bc5daf1bcc84c42$var$DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
    const encodedTag = $0bc5daf1bcc84c42$var$encodeTag(tag, primitive, cls, this.reporter);
    // Short form
    if (content.length < 0x80) {
        const header = $0bc5daf1bcc84c42$require$Buffer.alloc(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([
            header,
            content
        ]);
    }
    // Long form
    // Count octets required to store length
    let lenOctets = 1;
    for(let i = content.length; i >= 0x100; i >>= 8)lenOctets++;
    const header = $0bc5daf1bcc84c42$require$Buffer.alloc(2 + lenOctets);
    header[0] = encodedTag;
    header[1] = 0x80 | lenOctets;
    for(let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)header[i] = j & 0xff;
    return this._createEncoderBuffer([
        header,
        content
    ]);
};
$0bc5daf1bcc84c42$var$DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === "bitstr") return this._createEncoderBuffer([
        str.unused | 0,
        str.data
    ]);
    else if (tag === "bmpstr") {
        const buf = $0bc5daf1bcc84c42$require$Buffer.alloc(str.length * 2);
        for(let i = 0; i < str.length; i++)buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        return this._createEncoderBuffer(buf);
    } else if (tag === "numstr") {
        if (!this._isNumstr(str)) return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        return this._createEncoderBuffer(str);
    } else if (tag === "printstr") {
        if (!this._isPrintstr(str)) return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) return this._createEncoderBuffer(str);
    else if (tag === "objDesc") return this._createEncoderBuffer(str);
    else return this.reporter.error("Encoding of string type: " + tag + " unsupported");
};
$0bc5daf1bcc84c42$var$DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === "string") {
        if (!values) return this.reporter.error("string objid given, but no values map found");
        if (!values.hasOwnProperty(id)) return this.reporter.error("objid not found in values map");
        id = values[id].split(/[\s.]+/g);
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    } else if (Array.isArray(id)) {
        id = id.slice();
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    }
    if (!Array.isArray(id)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
    if (!relative) {
        if (id[1] >= 40) return this.reporter.error("Second objid identifier OOB");
        id.splice(0, 2, id[0] * 40 + id[1]);
    }
    // Count number of octets
    let size = 0;
    for(let i = 0; i < id.length; i++){
        let ident = id[i];
        for(size++; ident >= 0x80; ident >>= 7)size++;
    }
    const objid = $0bc5daf1bcc84c42$require$Buffer.alloc(size);
    let offset = objid.length - 1;
    for(let i = id.length - 1; i >= 0; i--){
        let ident = id[i];
        objid[offset--] = ident & 0x7f;
        while((ident >>= 7) > 0)objid[offset--] = 0x80 | ident & 0x7f;
    }
    return this._createEncoderBuffer(objid);
};
function $0bc5daf1bcc84c42$var$two(num) {
    if (num < 10) return "0" + num;
    else return num;
}
$0bc5daf1bcc84c42$var$DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    let str;
    const date = new Date(time);
    if (tag === "gentime") str = [
        $0bc5daf1bcc84c42$var$two(date.getUTCFullYear()),
        $0bc5daf1bcc84c42$var$two(date.getUTCMonth() + 1),
        $0bc5daf1bcc84c42$var$two(date.getUTCDate()),
        $0bc5daf1bcc84c42$var$two(date.getUTCHours()),
        $0bc5daf1bcc84c42$var$two(date.getUTCMinutes()),
        $0bc5daf1bcc84c42$var$two(date.getUTCSeconds()),
        "Z"
    ].join("");
    else if (tag === "utctime") str = [
        $0bc5daf1bcc84c42$var$two(date.getUTCFullYear() % 100),
        $0bc5daf1bcc84c42$var$two(date.getUTCMonth() + 1),
        $0bc5daf1bcc84c42$var$two(date.getUTCDate()),
        $0bc5daf1bcc84c42$var$two(date.getUTCHours()),
        $0bc5daf1bcc84c42$var$two(date.getUTCMinutes()),
        $0bc5daf1bcc84c42$var$two(date.getUTCSeconds()),
        "Z"
    ].join("");
    else this.reporter.error("Encoding " + tag + " time is not supported yet");
    return this._encodeStr(str, "octstr");
};
$0bc5daf1bcc84c42$var$DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer("");
};
$0bc5daf1bcc84c42$var$DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === "string") {
        if (!values) return this.reporter.error("String int or enum given, but no values map");
        if (!values.hasOwnProperty(num)) return this.reporter.error("Values map doesn't contain: " + JSON.stringify(num));
        num = values[num];
    }
    // Bignum, assume big endian
    if (typeof num !== "number" && !$0bc5daf1bcc84c42$require$Buffer.isBuffer(num)) {
        const numArray = num.toArray();
        if (!num.sign && numArray[0] & 0x80) numArray.unshift(0);
        num = $0bc5daf1bcc84c42$require$Buffer.from(numArray);
    }
    if ($0bc5daf1bcc84c42$require$Buffer.isBuffer(num)) {
        let size = num.length;
        if (num.length === 0) size++;
        const out = $0bc5daf1bcc84c42$require$Buffer.alloc(size);
        num.copy(out);
        if (num.length === 0) out[0] = 0;
        return this._createEncoderBuffer(out);
    }
    if (num < 0x80) return this._createEncoderBuffer(num);
    if (num < 0x100) return this._createEncoderBuffer([
        0,
        num
    ]);
    let size = 1;
    for(let i = num; i >= 0x100; i >>= 8)size++;
    const out = new Array(size);
    for(let i = out.length - 1; i >= 0; i--){
        out[i] = num & 0xff;
        num >>= 8;
    }
    if (out[0] & 0x80) out.unshift(0);
    return this._createEncoderBuffer($0bc5daf1bcc84c42$require$Buffer.from(out));
};
$0bc5daf1bcc84c42$var$DERNode.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 0xff : 0);
};
$0bc5daf1bcc84c42$var$DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === "function") entity = entity(obj);
    return entity._getEncoder("der").tree;
};
$0bc5daf1bcc84c42$var$DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    const state = this._baseState;
    let i;
    if (state["default"] === null) return false;
    const data = dataBuffer.join();
    if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state["default"], reporter, parent).join();
    if (data.length !== state.defaultBuffer.length) return false;
    for(i = 0; i < data.length; i++)if (data[i] !== state.defaultBuffer[i]) return false;
    return true;
};
// Utility methods
function $0bc5daf1bcc84c42$var$encodeTag(tag, primitive, cls, reporter) {
    let res;
    if (tag === "seqof") tag = "seq";
    else if (tag === "setof") tag = "set";
    if ($8pIYT.tagByName.hasOwnProperty(tag)) res = $8pIYT.tagByName[tag];
    else if (typeof tag === "number" && (tag | 0) === tag) res = tag;
    else return reporter.error("Unknown tag: " + tag);
    if (res >= 0x1f) return reporter.error("Multi-octet tag encoding unsupported");
    if (!primitive) res |= 0x20;
    res |= $8pIYT.tagClassByName[cls || "universal"] << 6;
    return res;
}

});
parcelRequire.register("7sMJm", function(module, exports) {
/* eslint-disable node/no-deprecated-api */ 
"use strict";

var $56f0f2cc421ae8da$var$Buffer = $bFvJb$buffer.Buffer;
var $56f0f2cc421ae8da$var$safer = {};
var $56f0f2cc421ae8da$var$key;
for($56f0f2cc421ae8da$var$key in $bFvJb$buffer){
    if (!$bFvJb$buffer.hasOwnProperty($56f0f2cc421ae8da$var$key)) continue;
    if ($56f0f2cc421ae8da$var$key === "SlowBuffer" || $56f0f2cc421ae8da$var$key === "Buffer") continue;
    $56f0f2cc421ae8da$var$safer[$56f0f2cc421ae8da$var$key] = $bFvJb$buffer[$56f0f2cc421ae8da$var$key];
}
var $56f0f2cc421ae8da$var$Safer = $56f0f2cc421ae8da$var$safer.Buffer = {};
for($56f0f2cc421ae8da$var$key in $56f0f2cc421ae8da$var$Buffer){
    if (!$56f0f2cc421ae8da$var$Buffer.hasOwnProperty($56f0f2cc421ae8da$var$key)) continue;
    if ($56f0f2cc421ae8da$var$key === "allocUnsafe" || $56f0f2cc421ae8da$var$key === "allocUnsafeSlow") continue;
    $56f0f2cc421ae8da$var$Safer[$56f0f2cc421ae8da$var$key] = $56f0f2cc421ae8da$var$Buffer[$56f0f2cc421ae8da$var$key];
}
$56f0f2cc421ae8da$var$safer.Buffer.prototype = $56f0f2cc421ae8da$var$Buffer.prototype;
if (!$56f0f2cc421ae8da$var$Safer.from || $56f0f2cc421ae8da$var$Safer.from === Uint8Array.from) $56f0f2cc421ae8da$var$Safer.from = function(value, encodingOrOffset, length) {
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
    if (value && typeof value.length === "undefined") throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    return $56f0f2cc421ae8da$var$Buffer(value, encodingOrOffset, length);
};
if (!$56f0f2cc421ae8da$var$Safer.alloc) $56f0f2cc421ae8da$var$Safer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
    if (size < 0 || size >= 2 * 1073741824) throw new RangeError('The value "' + size + '" is invalid for option "size"');
    var buf = $56f0f2cc421ae8da$var$Buffer(size);
    if (!fill || fill.length === 0) buf.fill(0);
    else if (typeof encoding === "string") buf.fill(fill, encoding);
    else buf.fill(fill);
    return buf;
};
if (!$56f0f2cc421ae8da$var$safer.kStringMaxLength) try {
    $56f0f2cc421ae8da$var$safer.kStringMaxLength = $bFvJb$process.binding("buffer").kStringMaxLength;
} catch (e) {
// we can't determine kStringMaxLength in environments where process.binding
// is unsupported, so let's not set it
}
if (!$56f0f2cc421ae8da$var$safer.constants) {
    $56f0f2cc421ae8da$var$safer.constants = {
        MAX_LENGTH: $56f0f2cc421ae8da$var$safer.kMaxLength
    };
    if ($56f0f2cc421ae8da$var$safer.kStringMaxLength) $56f0f2cc421ae8da$var$safer.constants.MAX_STRING_LENGTH = $56f0f2cc421ae8da$var$safer.kStringMaxLength;
}
module.exports = $56f0f2cc421ae8da$var$safer;

});

parcelRequire.register("5eqeq", function(module, exports) {
"use strict";

var $a2ijA = parcelRequire("a2ijA");
var $3cf29b98541d8114$require$Reporter = $a2ijA.Reporter;

var $45VZO = parcelRequire("45VZO");
var $3cf29b98541d8114$require$EncoderBuffer = $45VZO.EncoderBuffer;

var $45VZO = parcelRequire("45VZO");
var $3cf29b98541d8114$require$DecoderBuffer = $45VZO.DecoderBuffer;

var $fWN7B = parcelRequire("fWN7B");
// Supported tags
const $3cf29b98541d8114$var$tags = [
    "seq",
    "seqof",
    "set",
    "setof",
    "objid",
    "bool",
    "gentime",
    "utctime",
    "null_",
    "enum",
    "int",
    "objDesc",
    "bitstr",
    "bmpstr",
    "charstr",
    "genstr",
    "graphstr",
    "ia5str",
    "iso646str",
    "numstr",
    "octstr",
    "printstr",
    "t61str",
    "unistr",
    "utf8str",
    "videostr"
];
// Public methods list
const $3cf29b98541d8114$var$methods = [
    "key",
    "obj",
    "use",
    "optional",
    "explicit",
    "implicit",
    "def",
    "choice",
    "any",
    "contains"
].concat($3cf29b98541d8114$var$tags);
// Overrided methods list
const $3cf29b98541d8114$var$overrided = [
    "_peekTag",
    "_decodeTag",
    "_use",
    "_decodeStr",
    "_decodeObjid",
    "_decodeTime",
    "_decodeNull",
    "_decodeInt",
    "_decodeBool",
    "_decodeList",
    "_encodeComposite",
    "_encodeStr",
    "_encodeObjid",
    "_encodeTime",
    "_encodeNull",
    "_encodeInt",
    "_encodeBool"
];
function $3cf29b98541d8114$var$Node(enc, parent, name) {
    const state = {};
    this._baseState = state;
    state.name = name;
    state.enc = enc;
    state.parent = parent || null;
    state.children = null;
    // State
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state["default"] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;
    // Should create new instance on each method
    if (!state.parent) {
        state.children = [];
        this._wrap();
    }
}
module.exports = $3cf29b98541d8114$var$Node;
const $3cf29b98541d8114$var$stateProps = [
    "enc",
    "parent",
    "children",
    "tag",
    "args",
    "reverseArgs",
    "choice",
    "optional",
    "any",
    "obj",
    "use",
    "alteredUse",
    "key",
    "default",
    "explicit",
    "implicit",
    "contains"
];
$3cf29b98541d8114$var$Node.prototype.clone = function clone() {
    const state = this._baseState;
    const cstate = {};
    $3cf29b98541d8114$var$stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
    });
    const res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
};
$3cf29b98541d8114$var$Node.prototype._wrap = function wrap() {
    const state = this._baseState;
    $3cf29b98541d8114$var$methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
            const clone = new this.constructor(this);
            state.children.push(clone);
            return clone[method].apply(clone, arguments);
        };
    }, this);
};
$3cf29b98541d8114$var$Node.prototype._init = function init(body) {
    const state = this._baseState;
    $fWN7B(state.parent === null);
    body.call(this);
    // Filter children
    state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
    }, this);
    $fWN7B.equal(state.children.length, 1, "Root node can have only one child");
};
$3cf29b98541d8114$var$Node.prototype._useArgs = function useArgs(args) {
    const state = this._baseState;
    // Filter children and args
    const children = args.filter(function(arg) {
        return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
    }, this);
    if (children.length !== 0) {
        $fWN7B(state.children === null);
        state.children = children;
        // Replace parent to maintain backward link
        children.forEach(function(child) {
            child._baseState.parent = this;
        }, this);
    }
    if (args.length !== 0) {
        $fWN7B(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
            if (typeof arg !== "object" || arg.constructor !== Object) return arg;
            const res = {};
            Object.keys(arg).forEach(function(key) {
                if (key == (key | 0)) key |= 0;
                const value = arg[key];
                res[value] = key;
            });
            return res;
        });
    }
};
//
// Overrided methods
//
$3cf29b98541d8114$var$overrided.forEach(function(method) {
    $3cf29b98541d8114$var$Node.prototype[method] = function _overrided() {
        const state = this._baseState;
        throw new Error(method + " not implemented for encoding: " + state.enc);
    };
});
//
// Public methods
//
$3cf29b98541d8114$var$tags.forEach(function(tag) {
    $3cf29b98541d8114$var$Node.prototype[tag] = function _tagMethod() {
        const state = this._baseState;
        const args = Array.prototype.slice.call(arguments);
        $fWN7B(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
    };
});
$3cf29b98541d8114$var$Node.prototype.use = function use(item) {
    $fWN7B(item);
    const state = this._baseState;
    $fWN7B(state.use === null);
    state.use = item;
    return this;
};
$3cf29b98541d8114$var$Node.prototype.optional = function optional() {
    const state = this._baseState;
    state.optional = true;
    return this;
};
$3cf29b98541d8114$var$Node.prototype.def = function def(val) {
    const state = this._baseState;
    $fWN7B(state["default"] === null);
    state["default"] = val;
    state.optional = true;
    return this;
};
$3cf29b98541d8114$var$Node.prototype.explicit = function explicit(num) {
    const state = this._baseState;
    $fWN7B(state.explicit === null && state.implicit === null);
    state.explicit = num;
    return this;
};
$3cf29b98541d8114$var$Node.prototype.implicit = function implicit(num) {
    const state = this._baseState;
    $fWN7B(state.explicit === null && state.implicit === null);
    state.implicit = num;
    return this;
};
$3cf29b98541d8114$var$Node.prototype.obj = function obj() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);
    state.obj = true;
    if (args.length !== 0) this._useArgs(args);
    return this;
};
$3cf29b98541d8114$var$Node.prototype.key = function key(newKey) {
    const state = this._baseState;
    $fWN7B(state.key === null);
    state.key = newKey;
    return this;
};
$3cf29b98541d8114$var$Node.prototype.any = function any() {
    const state = this._baseState;
    state.any = true;
    return this;
};
$3cf29b98541d8114$var$Node.prototype.choice = function choice(obj) {
    const state = this._baseState;
    $fWN7B(state.choice === null);
    state.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
    }));
    return this;
};
$3cf29b98541d8114$var$Node.prototype.contains = function contains(item) {
    const state = this._baseState;
    $fWN7B(state.use === null);
    state.contains = item;
    return this;
};
//
// Decoding
//
$3cf29b98541d8114$var$Node.prototype._decode = function decode(input, options) {
    const state = this._baseState;
    // Decode root node
    if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
    let result = state["default"];
    let present = true;
    let prevKey = null;
    if (state.key !== null) prevKey = input.enterKey(state.key);
    // Check if tag is there
    if (state.optional) {
        let tag = null;
        if (state.explicit !== null) tag = state.explicit;
        else if (state.implicit !== null) tag = state.implicit;
        else if (state.tag !== null) tag = state.tag;
        if (tag === null && !state.any) {
            // Trial and Error
            const save = input.save();
            try {
                if (state.choice === null) this._decodeGeneric(state.tag, input, options);
                else this._decodeChoice(input, options);
                present = true;
            } catch (e) {
                present = false;
            }
            input.restore(save);
        } else {
            present = this._peekTag(input, tag, state.any);
            if (input.isError(present)) return present;
        }
    }
    // Push object on stack
    let prevObj;
    if (state.obj && present) prevObj = input.enterObject();
    if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
            const explicit = this._decodeTag(input, state.explicit);
            if (input.isError(explicit)) return explicit;
            input = explicit;
        }
        const start = input.offset;
        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
            let save;
            if (state.any) save = input.save();
            const body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
            if (input.isError(body)) return body;
            if (state.any) result = input.raw(save);
            else input = body;
        }
        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, "tagged");
        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, "content");
        // Select proper method for tag
        if (state.any) ;
        else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);
        else result = this._decodeChoice(input, options);
        if (input.isError(result)) return result;
        // Decode children
        if (!state.any && state.choice === null && state.children !== null) state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
        });
        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === "octstr" || state.tag === "bitstr")) {
            const data = new $3cf29b98541d8114$require$DecoderBuffer(result);
            result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
    }
    // Pop object
    if (state.obj && present) result = input.leaveObject(prevObj);
    // Set key
    if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null) input.exitKey(prevKey);
    return result;
};
$3cf29b98541d8114$var$Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    const state = this._baseState;
    if (tag === "seq" || tag === "set") return null;
    if (tag === "seqof" || tag === "setof") return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);
    else if (tag === "objid" && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === "objid") return this._decodeObjid(input, null, null, options);
    else if (tag === "gentime" || tag === "utctime") return this._decodeTime(input, tag, options);
    else if (tag === "null_") return this._decodeNull(input, options);
    else if (tag === "bool") return this._decodeBool(input, options);
    else if (tag === "objDesc") return this._decodeStr(input, tag, options);
    else if (tag === "int" || tag === "enum") return this._decodeInt(input, state.args && state.args[0], options);
    if (state.use !== null) return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
    else return input.error("unknown tag: " + tag);
};
$3cf29b98541d8114$var$Node.prototype._getUse = function _getUse(entity, obj) {
    const state = this._baseState;
    // Create altered use decoder if implicit is set
    state.useDecoder = this._use(entity, obj);
    $fWN7B(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
};
$3cf29b98541d8114$var$Node.prototype._decodeChoice = function decodeChoice(input, options) {
    const state = this._baseState;
    let result = null;
    let match = false;
    Object.keys(state.choice).some(function(key) {
        const save = input.save();
        const node = state.choice[key];
        try {
            const value = node._decode(input, options);
            if (input.isError(value)) return false;
            result = {
                type: key,
                value: value
            };
            match = true;
        } catch (e) {
            input.restore(save);
            return false;
        }
        return true;
    }, this);
    if (!match) return input.error("Choice not matched");
    return result;
};
//
// Encoding
//
$3cf29b98541d8114$var$Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new $3cf29b98541d8114$require$EncoderBuffer(data, this.reporter);
};
$3cf29b98541d8114$var$Node.prototype._encode = function encode(data, reporter, parent) {
    const state = this._baseState;
    if (state["default"] !== null && state["default"] === data) return;
    const result = this._encodeValue(data, reporter, parent);
    if (result === undefined) return;
    if (this._skipDefault(result, reporter, parent)) return;
    return result;
};
$3cf29b98541d8114$var$Node.prototype._encodeValue = function encode(data, reporter, parent) {
    const state = this._baseState;
    // Decode root node
    if (state.parent === null) return state.children[0]._encode(data, reporter || new $3cf29b98541d8114$require$Reporter());
    let result = null;
    // Set reporter to share it with a child class
    this.reporter = reporter;
    // Check if data is there
    if (state.optional && data === undefined) {
        if (state["default"] !== null) data = state["default"];
        else return;
    }
    // Encode children first
    let content = null;
    let primitive = false;
    if (state.any) // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
    else if (state.choice) result = this._encodeChoice(data, reporter);
    else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
    } else if (state.children) {
        content = state.children.map(function(child) {
            if (child._baseState.tag === "null_") return child._encode(null, reporter, data);
            if (child._baseState.key === null) return reporter.error("Child should have a key");
            const prevKey = reporter.enterKey(child._baseState.key);
            if (typeof data !== "object") return reporter.error("Child expected, but input is not object");
            const res = child._encode(data[child._baseState.key], reporter, data);
            reporter.leaveKey(prevKey);
            return res;
        }, this).filter(function(child) {
            return child;
        });
        content = this._createEncoderBuffer(content);
    } else {
        if (state.tag === "seqof" || state.tag === "setof") {
            // TODO(indutny): this should be thrown on DSL level
            if (!(state.args && state.args.length === 1)) return reporter.error("Too many args for : " + state.tag);
            if (!Array.isArray(data)) return reporter.error("seqof/setof, but data is not Array");
            const child = this.clone();
            child._baseState.implicit = null;
            content = this._createEncoderBuffer(data.map(function(item) {
                const state = this._baseState;
                return this._getUse(state.args[0], data)._encode(item, reporter);
            }, child));
        } else if (state.use !== null) result = this._getUse(state.use, parent)._encode(data, reporter);
        else {
            content = this._encodePrimitive(state.tag, data);
            primitive = true;
        }
    }
    // Encode data itself
    if (!state.any && state.choice === null) {
        const tag = state.implicit !== null ? state.implicit : state.tag;
        const cls = state.implicit === null ? "universal" : "context";
        if (tag === null) {
            if (state.use === null) reporter.error("Tag could be omitted only for .use()");
        } else if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
    // Wrap in explicit
    if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, "context", result);
    return result;
};
$3cf29b98541d8114$var$Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
    const state = this._baseState;
    const node = state.choice[data.type];
    if (!node) $fWN7B(false, data.type + " not found in " + JSON.stringify(Object.keys(state.choice)));
    return node._encode(data.value, reporter);
};
$3cf29b98541d8114$var$Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    const state = this._baseState;
    if (/str$/.test(tag)) return this._encodeStr(data, tag);
    else if (tag === "objid" && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === "objid") return this._encodeObjid(data, null, null);
    else if (tag === "gentime" || tag === "utctime") return this._encodeTime(data, tag);
    else if (tag === "null_") return this._encodeNull();
    else if (tag === "int" || tag === "enum") return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === "bool") return this._encodeBool(data);
    else if (tag === "objDesc") return this._encodeStr(data, tag);
    else throw new Error("Unsupported tag: " + tag);
};
$3cf29b98541d8114$var$Node.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
};
$3cf29b98541d8114$var$Node.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

});
parcelRequire.register("a2ijA", function(module, exports) {

$parcel$export(module.exports, "Reporter", () => $74e84c4360bc25db$export$957313a2f485e5ed, (v) => $74e84c4360bc25db$export$957313a2f485e5ed = v);
var $74e84c4360bc25db$export$957313a2f485e5ed;
"use strict";

var $4gPgC = parcelRequire("4gPgC");
function $74e84c4360bc25db$var$Reporter(options) {
    this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
    };
}
$74e84c4360bc25db$export$957313a2f485e5ed = $74e84c4360bc25db$var$Reporter;
$74e84c4360bc25db$var$Reporter.prototype.isError = function isError(obj) {
    return obj instanceof $74e84c4360bc25db$var$ReporterError;
};
$74e84c4360bc25db$var$Reporter.prototype.save = function save() {
    const state = this._reporterState;
    return {
        obj: state.obj,
        pathLen: state.path.length
    };
};
$74e84c4360bc25db$var$Reporter.prototype.restore = function restore(data) {
    const state = this._reporterState;
    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
};
$74e84c4360bc25db$var$Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
};
$74e84c4360bc25db$var$Reporter.prototype.exitKey = function exitKey(index) {
    const state = this._reporterState;
    state.path = state.path.slice(0, index - 1);
};
$74e84c4360bc25db$var$Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    const state = this._reporterState;
    this.exitKey(index);
    if (state.obj !== null) state.obj[key] = value;
};
$74e84c4360bc25db$var$Reporter.prototype.path = function path() {
    return this._reporterState.path.join("/");
};
$74e84c4360bc25db$var$Reporter.prototype.enterObject = function enterObject() {
    const state = this._reporterState;
    const prev = state.obj;
    state.obj = {};
    return prev;
};
$74e84c4360bc25db$var$Reporter.prototype.leaveObject = function leaveObject(prev) {
    const state = this._reporterState;
    const now = state.obj;
    state.obj = prev;
    return now;
};
$74e84c4360bc25db$var$Reporter.prototype.error = function error(msg) {
    let err;
    const state = this._reporterState;
    const inherited = msg instanceof $74e84c4360bc25db$var$ReporterError;
    if (inherited) err = msg;
    else err = new $74e84c4360bc25db$var$ReporterError(state.path.map(function(elem) {
        return "[" + JSON.stringify(elem) + "]";
    }).join(""), msg.message || msg, msg.stack);
    if (!state.options.partial) throw err;
    if (!inherited) state.errors.push(err);
    return err;
};
$74e84c4360bc25db$var$Reporter.prototype.wrapResult = function wrapResult(result) {
    const state = this._reporterState;
    if (!state.options.partial) return result;
    return {
        result: this.isError(result) ? null : result,
        errors: state.errors
    };
};
function $74e84c4360bc25db$var$ReporterError(path, msg) {
    this.path = path;
    this.rethrow(msg);
}
$4gPgC($74e84c4360bc25db$var$ReporterError, Error);
$74e84c4360bc25db$var$ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + " at: " + (this.path || "(shallow)");
    if (Error.captureStackTrace) Error.captureStackTrace(this, $74e84c4360bc25db$var$ReporterError);
    if (!this.stack) try {
        // IE only adds stack when thrown
        throw new Error(this.message);
    } catch (e) {
        this.stack = e.stack;
    }
    return this;
};

});

parcelRequire.register("45VZO", function(module, exports) {

$parcel$export(module.exports, "DecoderBuffer", () => $2fb49dd9fe9bed90$export$bf9f79cdc4a49163, (v) => $2fb49dd9fe9bed90$export$bf9f79cdc4a49163 = v);
$parcel$export(module.exports, "EncoderBuffer", () => $2fb49dd9fe9bed90$export$8ff24f7760c7a78e, (v) => $2fb49dd9fe9bed90$export$8ff24f7760c7a78e = v);
var $2fb49dd9fe9bed90$export$bf9f79cdc4a49163;
var $2fb49dd9fe9bed90$export$8ff24f7760c7a78e;
"use strict";

var $4gPgC = parcelRequire("4gPgC");

var $a2ijA = parcelRequire("a2ijA");
var $2fb49dd9fe9bed90$require$Reporter = $a2ijA.Reporter;

var $7sMJm = parcelRequire("7sMJm");
var $2fb49dd9fe9bed90$require$Buffer = $7sMJm.Buffer;
function $2fb49dd9fe9bed90$var$DecoderBuffer(base, options) {
    $2fb49dd9fe9bed90$require$Reporter.call(this, options);
    if (!$2fb49dd9fe9bed90$require$Buffer.isBuffer(base)) {
        this.error("Input not Buffer");
        return;
    }
    this.base = base;
    this.offset = 0;
    this.length = base.length;
}
$4gPgC($2fb49dd9fe9bed90$var$DecoderBuffer, $2fb49dd9fe9bed90$require$Reporter);
$2fb49dd9fe9bed90$export$bf9f79cdc4a49163 = $2fb49dd9fe9bed90$var$DecoderBuffer;
$2fb49dd9fe9bed90$var$DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
    if (data instanceof $2fb49dd9fe9bed90$var$DecoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === "object" && $2fb49dd9fe9bed90$require$Buffer.isBuffer(data.base) && data.constructor.name === "DecoderBuffer" && typeof data.offset === "number" && typeof data.length === "number" && typeof data.save === "function" && typeof data.restore === "function" && typeof data.isEmpty === "function" && typeof data.readUInt8 === "function" && typeof data.skip === "function" && typeof data.raw === "function";
    return isCompatible;
};
$2fb49dd9fe9bed90$var$DecoderBuffer.prototype.save = function save() {
    return {
        offset: this.offset,
        reporter: $2fb49dd9fe9bed90$require$Reporter.prototype.save.call(this)
    };
};
$2fb49dd9fe9bed90$var$DecoderBuffer.prototype.restore = function restore(save) {
    // Return skipped data
    const res = new $2fb49dd9fe9bed90$var$DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;
    this.offset = save.offset;
    $2fb49dd9fe9bed90$require$Reporter.prototype.restore.call(this, save.reporter);
    return res;
};
$2fb49dd9fe9bed90$var$DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
};
$2fb49dd9fe9bed90$var$DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);
    else return this.error(fail || "DecoderBuffer overrun");
};
$2fb49dd9fe9bed90$var$DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length)) return this.error(fail || "DecoderBuffer overrun");
    const res = new $2fb49dd9fe9bed90$var$DecoderBuffer(this.base);
    // Share reporter state
    res._reporterState = this._reporterState;
    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
};
$2fb49dd9fe9bed90$var$DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
};
function $2fb49dd9fe9bed90$var$EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
            if (!$2fb49dd9fe9bed90$var$EncoderBuffer.isEncoderBuffer(item)) item = new $2fb49dd9fe9bed90$var$EncoderBuffer(item, reporter);
            this.length += item.length;
            return item;
        }, this);
    } else if (typeof value === "number") {
        if (!(0 <= value && value <= 0xff)) return reporter.error("non-byte EncoderBuffer value");
        this.value = value;
        this.length = 1;
    } else if (typeof value === "string") {
        this.value = value;
        this.length = $2fb49dd9fe9bed90$require$Buffer.byteLength(value);
    } else if ($2fb49dd9fe9bed90$require$Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
    } else return reporter.error("Unsupported type: " + typeof value);
}
$2fb49dd9fe9bed90$export$8ff24f7760c7a78e = $2fb49dd9fe9bed90$var$EncoderBuffer;
$2fb49dd9fe9bed90$var$EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
    if (data instanceof $2fb49dd9fe9bed90$var$EncoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === "object" && data.constructor.name === "EncoderBuffer" && typeof data.length === "number" && typeof data.join === "function";
    return isCompatible;
};
$2fb49dd9fe9bed90$var$EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out) out = $2fb49dd9fe9bed90$require$Buffer.alloc(this.length);
    if (!offset) offset = 0;
    if (this.length === 0) return out;
    if (Array.isArray(this.value)) this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
    });
    else {
        if (typeof this.value === "number") out[offset] = this.value;
        else if (typeof this.value === "string") out.write(this.value, offset);
        else if ($2fb49dd9fe9bed90$require$Buffer.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
    }
    return out;
};

});


parcelRequire.register("8pIYT", function(module, exports) {

$parcel$export(module.exports, "tagClass", () => $62038cdeb9017d26$export$3584c46ed60baee8, (v) => $62038cdeb9017d26$export$3584c46ed60baee8 = v);
$parcel$export(module.exports, "tagClassByName", () => $62038cdeb9017d26$export$f18596ef8d632e49, (v) => $62038cdeb9017d26$export$f18596ef8d632e49 = v);
$parcel$export(module.exports, "tag", () => $62038cdeb9017d26$export$2b067c6666111485, (v) => $62038cdeb9017d26$export$2b067c6666111485 = v);
$parcel$export(module.exports, "tagByName", () => $62038cdeb9017d26$export$f17df38a421ab9e3, (v) => $62038cdeb9017d26$export$f17df38a421ab9e3 = v);
var $62038cdeb9017d26$export$3584c46ed60baee8;
var $62038cdeb9017d26$export$f18596ef8d632e49;
var $62038cdeb9017d26$export$2b067c6666111485;
var $62038cdeb9017d26$export$f17df38a421ab9e3;
"use strict";
// Helper
function $62038cdeb9017d26$var$reverse(map) {
    const res = {};
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
}
$62038cdeb9017d26$export$3584c46ed60baee8 = {
    0: "universal",
    1: "application",
    2: "context",
    3: "private"
};
$62038cdeb9017d26$export$f18596ef8d632e49 = $62038cdeb9017d26$var$reverse($62038cdeb9017d26$export$3584c46ed60baee8);
$62038cdeb9017d26$export$2b067c6666111485 = {
    0x00: "end",
    0x01: "bool",
    0x02: "int",
    0x03: "bitstr",
    0x04: "octstr",
    0x05: "null_",
    0x06: "objid",
    0x07: "objDesc",
    0x08: "external",
    0x09: "real",
    0x0a: "enum",
    0x0b: "embed",
    0x0c: "utf8str",
    0x0d: "relativeOid",
    0x10: "seq",
    0x11: "set",
    0x12: "numstr",
    0x13: "printstr",
    0x14: "t61str",
    0x15: "videostr",
    0x16: "ia5str",
    0x17: "utctime",
    0x18: "gentime",
    0x19: "graphstr",
    0x1a: "iso646str",
    0x1b: "genstr",
    0x1c: "unistr",
    0x1d: "charstr",
    0x1e: "bmpstr"
};
$62038cdeb9017d26$export$f17df38a421ab9e3 = $62038cdeb9017d26$var$reverse($62038cdeb9017d26$export$2b067c6666111485);

});


parcelRequire.register("7X1pA", function(module, exports) {
"use strict";

var $4gPgC = parcelRequire("4gPgC");

var $10FkS = parcelRequire("10FkS");
function $5c9f2372c145bfeb$var$PEMEncoder(entity) {
    $10FkS.call(this, entity);
    this.enc = "pem";
}
$4gPgC($5c9f2372c145bfeb$var$PEMEncoder, $10FkS);
module.exports = $5c9f2372c145bfeb$var$PEMEncoder;
$5c9f2372c145bfeb$var$PEMEncoder.prototype.encode = function encode(data, options) {
    const buf = $10FkS.prototype.encode.call(this, data);
    const p = buf.toString("base64");
    const out = [
        "-----BEGIN " + options.label + "-----"
    ];
    for(let i = 0; i < p.length; i += 64)out.push(p.slice(i, i + 64));
    out.push("-----END " + options.label + "-----");
    return out.join("\n");
};

});


parcelRequire.register("9ndxO", function(module, exports) {
"use strict";
const $6d30c4a734c0f9d7$var$decoders = module.exports;

$6d30c4a734c0f9d7$var$decoders.der = (parcelRequire("2EDO4"));

$6d30c4a734c0f9d7$var$decoders.pem = (parcelRequire("ikQO2"));

});
parcelRequire.register("2EDO4", function(module, exports) {
"use strict";

var $4gPgC = parcelRequire("4gPgC");

var $70OLo = parcelRequire("70OLo");

var $45VZO = parcelRequire("45VZO");
var $1eee31f9d54b38f4$require$DecoderBuffer = $45VZO.DecoderBuffer;

var $5eqeq = parcelRequire("5eqeq");

var $8pIYT = parcelRequire("8pIYT");
function $1eee31f9d54b38f4$var$DERDecoder(entity) {
    this.enc = "der";
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new $1eee31f9d54b38f4$var$DERNode();
    this.tree._init(entity.body);
}
module.exports = $1eee31f9d54b38f4$var$DERDecoder;
$1eee31f9d54b38f4$var$DERDecoder.prototype.decode = function decode(data, options) {
    if (!$1eee31f9d54b38f4$require$DecoderBuffer.isDecoderBuffer(data)) data = new $1eee31f9d54b38f4$require$DecoderBuffer(data, options);
    return this.tree._decode(data, options);
};
// Tree methods
function $1eee31f9d54b38f4$var$DERNode(parent) {
    $5eqeq.call(this, "der", parent);
}
$4gPgC($1eee31f9d54b38f4$var$DERNode, $5eqeq);
$1eee31f9d54b38f4$var$DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
    if (buffer.isEmpty()) return false;
    const state = buffer.save();
    const decodedTag = $1eee31f9d54b38f4$var$derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    buffer.restore(state);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + "of" === tag || any;
};
$1eee31f9d54b38f4$var$DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
    const decodedTag = $1eee31f9d54b38f4$var$derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    let len = $1eee31f9d54b38f4$var$derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
    // Failure
    if (buffer.isError(len)) return len;
    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + "of" !== tag) return buffer.error('Failed to match tag: "' + tag + '"');
    if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    // Indefinite length... find END tag
    const state = buffer.save();
    const res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer.isError(res)) return res;
    len = buffer.offset - state.offset;
    buffer.restore(state);
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};
$1eee31f9d54b38f4$var$DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
    for(;;){
        const tag = $1eee31f9d54b38f4$var$derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) return tag;
        const len = $1eee31f9d54b38f4$var$derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) return len;
        let res;
        if (tag.primitive || len !== null) res = buffer.skip(len);
        else res = this._skipUntilEnd(buffer, fail);
        // Failure
        if (buffer.isError(res)) return res;
        if (tag.tagStr === "end") break;
    }
};
$1eee31f9d54b38f4$var$DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
    const result = [];
    while(!buffer.isEmpty()){
        const possibleEnd = this._peekTag(buffer, "end");
        if (buffer.isError(possibleEnd)) return possibleEnd;
        const res = decoder.decode(buffer, "der", options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
    }
    return result;
};
$1eee31f9d54b38f4$var$DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
    if (tag === "bitstr") {
        const unused = buffer.readUInt8();
        if (buffer.isError(unused)) return unused;
        return {
            unused: unused,
            data: buffer.raw()
        };
    } else if (tag === "bmpstr") {
        const raw = buffer.raw();
        if (raw.length % 2 === 1) return buffer.error("Decoding of string type: bmpstr length mismatch");
        let str = "";
        for(let i = 0; i < raw.length / 2; i++)str += String.fromCharCode(raw.readUInt16BE(i * 2));
        return str;
    } else if (tag === "numstr") {
        const numstr = buffer.raw().toString("ascii");
        if (!this._isNumstr(numstr)) return buffer.error("Decoding of string type: numstr unsupported characters");
        return numstr;
    } else if (tag === "octstr") return buffer.raw();
    else if (tag === "objDesc") return buffer.raw();
    else if (tag === "printstr") {
        const printstr = buffer.raw().toString("ascii");
        if (!this._isPrintstr(printstr)) return buffer.error("Decoding of string type: printstr unsupported characters");
        return printstr;
    } else if (/str$/.test(tag)) return buffer.raw().toString();
    else return buffer.error("Decoding of string type: " + tag + " unsupported");
};
$1eee31f9d54b38f4$var$DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
    let result;
    const identifiers = [];
    let ident = 0;
    let subident = 0;
    while(!buffer.isEmpty()){
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 0x7f;
        if ((subident & 0x80) === 0) {
            identifiers.push(ident);
            ident = 0;
        }
    }
    if (subident & 0x80) identifiers.push(ident);
    const first = identifiers[0] / 40 | 0;
    const second = identifiers[0] % 40;
    if (relative) result = identifiers;
    else result = [
        first,
        second
    ].concat(identifiers.slice(1));
    if (values) {
        let tmp = values[result.join(" ")];
        if (tmp === undefined) tmp = values[result.join(".")];
        if (tmp !== undefined) result = tmp;
    }
    return result;
};
$1eee31f9d54b38f4$var$DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
    const str = buffer.raw().toString();
    let year;
    let mon;
    let day;
    let hour;
    let min;
    let sec;
    if (tag === "gentime") {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
    } else if (tag === "utctime") {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2000 + year;
        else year = 1900 + year;
    } else return buffer.error("Decoding " + tag + " time is not supported yet");
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};
$1eee31f9d54b38f4$var$DERNode.prototype._decodeNull = function decodeNull() {
    return null;
};
$1eee31f9d54b38f4$var$DERNode.prototype._decodeBool = function decodeBool(buffer) {
    const res = buffer.readUInt8();
    if (buffer.isError(res)) return res;
    else return res !== 0;
};
$1eee31f9d54b38f4$var$DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
    // Bigint, return as it is (assume big endian)
    const raw = buffer.raw();
    let res = new $70OLo(raw);
    if (values) res = values[res.toString(10)] || res;
    return res;
};
$1eee31f9d54b38f4$var$DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === "function") entity = entity(obj);
    return entity._getDecoder("der").tree;
};
// Utility methods
function $1eee31f9d54b38f4$var$derDecodeTag(buf, fail) {
    let tag = buf.readUInt8(fail);
    if (buf.isError(tag)) return tag;
    const cls = $8pIYT.tagClass[tag >> 6];
    const primitive = (tag & 0x20) === 0;
    // Multi-octet tag - load
    if ((tag & 0x1f) === 0x1f) {
        let oct = tag;
        tag = 0;
        while((oct & 0x80) === 0x80){
            oct = buf.readUInt8(fail);
            if (buf.isError(oct)) return oct;
            tag <<= 7;
            tag |= oct & 0x7f;
        }
    } else tag &= 0x1f;
    const tagStr = $8pIYT.tag[tag];
    return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
    };
}
function $1eee31f9d54b38f4$var$derDecodeLen(buf, primitive, fail) {
    let len = buf.readUInt8(fail);
    if (buf.isError(len)) return len;
    // Indefinite form
    if (!primitive && len === 0x80) return null;
    // Definite form
    if ((len & 0x80) === 0) // Short form
    return len;
    // Long form
    const num = len & 0x7f;
    if (num > 4) return buf.error("length octect is too long");
    len = 0;
    for(let i = 0; i < num; i++){
        len <<= 8;
        const j = buf.readUInt8(fail);
        if (buf.isError(j)) return j;
        len |= j;
    }
    return len;
}

});

parcelRequire.register("ikQO2", function(module, exports) {
"use strict";

var $4gPgC = parcelRequire("4gPgC");

var $7sMJm = parcelRequire("7sMJm");
var $d5930e6c4942789b$require$Buffer = $7sMJm.Buffer;

var $2EDO4 = parcelRequire("2EDO4");
function $d5930e6c4942789b$var$PEMDecoder(entity) {
    $2EDO4.call(this, entity);
    this.enc = "pem";
}
$4gPgC($d5930e6c4942789b$var$PEMDecoder, $2EDO4);
module.exports = $d5930e6c4942789b$var$PEMDecoder;
$d5930e6c4942789b$var$PEMDecoder.prototype.decode = function decode(data, options) {
    const lines = data.toString().split(/[\r\n]+/g);
    const label = options.label.toUpperCase();
    const re = /^-----(BEGIN|END) ([^-]+)-----$/;
    let start = -1;
    let end = -1;
    for(let i = 0; i < lines.length; i++){
        const match = lines[i].match(re);
        if (match === null) continue;
        if (match[2] !== label) continue;
        if (start === -1) {
            if (match[1] !== "BEGIN") break;
            start = i;
        } else {
            if (match[1] !== "END") break;
            end = i;
            break;
        }
    }
    if (start === -1 || end === -1) throw new Error("PEM section not found for: " + label);
    const base64 = lines.slice(start + 1, end).join("");
    // Remove excessive symbols
    base64.replace(/[^a-z0-9+/=]+/gi, "");
    const input = $d5930e6c4942789b$require$Buffer.from(base64, "base64");
    return $2EDO4.prototype.decode.call(this, input, options);
};

});



parcelRequire.register("bkl54", function(module, exports) {
"use strict";
const $83f1ea31bbddab73$var$base = module.exports;

$83f1ea31bbddab73$var$base.Reporter = (parcelRequire("a2ijA")).Reporter;

$83f1ea31bbddab73$var$base.DecoderBuffer = (parcelRequire("45VZO")).DecoderBuffer;

$83f1ea31bbddab73$var$base.EncoderBuffer = (parcelRequire("45VZO")).EncoderBuffer;

$83f1ea31bbddab73$var$base.Node = (parcelRequire("5eqeq"));

});

parcelRequire.register("eLaky", function(module, exports) {
"use strict";
const $abed77eac51d544e$var$constants = module.exports;
// Helper
$abed77eac51d544e$var$constants._reverse = function reverse(map) {
    const res = {};
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
};

$abed77eac51d544e$var$constants.der = (parcelRequire("8pIYT"));

});


parcelRequire.register("ifj66", function(module, exports) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen
"use strict";

var $cvVCJ = parcelRequire("cvVCJ");
var $d488711009d462f6$var$Time = $cvVCJ.define("Time", function() {
    this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
    });
});
var $d488711009d462f6$var$AttributeTypeValue = $cvVCJ.define("AttributeTypeValue", function() {
    this.seq().obj(this.key("type").objid(), this.key("value").any());
});
var $d488711009d462f6$var$AlgorithmIdentifier = $cvVCJ.define("AlgorithmIdentifier", function() {
    this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
});
var $d488711009d462f6$var$SubjectPublicKeyInfo = $cvVCJ.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(this.key("algorithm").use($d488711009d462f6$var$AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
});
var $d488711009d462f6$var$RelativeDistinguishedName = $cvVCJ.define("RelativeDistinguishedName", function() {
    this.setof($d488711009d462f6$var$AttributeTypeValue);
});
var $d488711009d462f6$var$RDNSequence = $cvVCJ.define("RDNSequence", function() {
    this.seqof($d488711009d462f6$var$RelativeDistinguishedName);
});
var $d488711009d462f6$var$Name = $cvVCJ.define("Name", function() {
    this.choice({
        rdnSequence: this.use($d488711009d462f6$var$RDNSequence)
    });
});
var $d488711009d462f6$var$Validity = $cvVCJ.define("Validity", function() {
    this.seq().obj(this.key("notBefore").use($d488711009d462f6$var$Time), this.key("notAfter").use($d488711009d462f6$var$Time));
});
var $d488711009d462f6$var$Extension = $cvVCJ.define("Extension", function() {
    this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(false), this.key("extnValue").octstr());
});
var $d488711009d462f6$var$TBSCertificate = $cvVCJ.define("TBSCertificate", function() {
    this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use($d488711009d462f6$var$AlgorithmIdentifier), this.key("issuer").use($d488711009d462f6$var$Name), this.key("validity").use($d488711009d462f6$var$Validity), this.key("subject").use($d488711009d462f6$var$Name), this.key("subjectPublicKeyInfo").use($d488711009d462f6$var$SubjectPublicKeyInfo), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof($d488711009d462f6$var$Extension).optional());
});
var $d488711009d462f6$var$X509Certificate = $cvVCJ.define("X509Certificate", function() {
    this.seq().obj(this.key("tbsCertificate").use($d488711009d462f6$var$TBSCertificate), this.key("signatureAlgorithm").use($d488711009d462f6$var$AlgorithmIdentifier), this.key("signatureValue").bitstr());
});
module.exports = $d488711009d462f6$var$X509Certificate;

});


parcelRequire.register("kNNl1", function(module, exports) {
module.exports = JSON.parse('{"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}');

});

parcelRequire.register("jfQPs", function(module, exports) {
// adapted from https://github.com/apatil/pemstrip
var $e04865c072a70e48$var$findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
var $e04865c072a70e48$var$startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
var $e04865c072a70e48$var$fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;

var $60byP = parcelRequire("60byP");

var $3xfw9 = parcelRequire("3xfw9");

var $iUdYW = parcelRequire("iUdYW");
var $e04865c072a70e48$require$Buffer = $iUdYW.Buffer;
module.exports = function(okey, password) {
    var key = okey.toString();
    var match = key.match($e04865c072a70e48$var$findProc);
    var decrypted;
    if (!match) {
        var match2 = key.match($e04865c072a70e48$var$fullRegex);
        decrypted = $e04865c072a70e48$require$Buffer.from(match2[2].replace(/[\r\n]/g, ""), "base64");
    } else {
        var suite = "aes" + match[1];
        var iv = $e04865c072a70e48$require$Buffer.from(match[2], "hex");
        var cipherText = $e04865c072a70e48$require$Buffer.from(match[3].replace(/[\r\n]/g, ""), "base64");
        var cipherKey = $60byP(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = $3xfw9.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        decrypted = $e04865c072a70e48$require$Buffer.concat(out);
    }
    var tag = key.match($e04865c072a70e48$var$startRegex)[1];
    return {
        tag: tag,
        data: decrypted
    };
};

});


parcelRequire.register("7FRDK", function(module, exports) {
module.exports = JSON.parse('{"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}');

});


parcelRequire.register("6agQI", function(module, exports) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js

var $iUdYW = parcelRequire("iUdYW");
var $47d0bf2b0643b4db$require$Buffer = $iUdYW.Buffer;

var $03UvU = parcelRequire("03UvU");

var $eGOZX = parcelRequire("eGOZX");
var $47d0bf2b0643b4db$require$EC = $eGOZX.ec;

var $4oqj4 = parcelRequire("4oqj4");

var $7FRDK = parcelRequire("7FRDK");
function $47d0bf2b0643b4db$var$verify(sig, hash, key, signType, tag) {
    var pub = $4oqj4(key);
    if (pub.type === "ec") {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== "ecdsa" && signType !== "ecdsa/rsa") throw new Error("wrong public key type");
        return $47d0bf2b0643b4db$var$ecVerify(sig, hash, pub);
    } else if (pub.type === "dsa") {
        if (signType !== "dsa") throw new Error("wrong public key type");
        return $47d0bf2b0643b4db$var$dsaVerify(sig, hash, pub);
    } else {
        if (signType !== "rsa" && signType !== "ecdsa/rsa") throw new Error("wrong public key type");
    }
    hash = $47d0bf2b0643b4db$require$Buffer.concat([
        tag,
        hash
    ]);
    var len = pub.modulus.byteLength();
    var pad = [
        1
    ];
    var padNum = 0;
    while(hash.length + pad.length + 2 < len){
        pad.push(0xff);
        padNum++;
    }
    pad.push(0x00);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    pad = $47d0bf2b0643b4db$require$Buffer.from(pad);
    var red = $03UvU.mont(pub.modulus);
    sig = new $03UvU(sig).toRed(red);
    sig = sig.redPow(new $03UvU(pub.publicExponent));
    sig = $47d0bf2b0643b4db$require$Buffer.from(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len = Math.min(sig.length, pad.length);
    if (sig.length !== pad.length) out = 1;
    i = -1;
    while(++i < len)out |= sig[i] ^ pad[i];
    return out === 0;
}
function $47d0bf2b0643b4db$var$ecVerify(sig, hash, pub) {
    var curveId = $7FRDK[pub.data.algorithm.curve.join(".")];
    if (!curveId) throw new Error("unknown curve " + pub.data.algorithm.curve.join("."));
    var curve = new $47d0bf2b0643b4db$require$EC(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;
    return curve.verify(hash, sig, pubkey);
}
function $47d0bf2b0643b4db$var$dsaVerify(sig, hash, pub) {
    var p = pub.data.p;
    var q = pub.data.q;
    var g = pub.data.g;
    var y = pub.data.pub_key;
    var unpacked = $4oqj4.signature.decode(sig, "der");
    var s = unpacked.s;
    var r = unpacked.r;
    $47d0bf2b0643b4db$var$checkValue(s, q);
    $47d0bf2b0643b4db$var$checkValue(r, q);
    var montp = $03UvU.mont(p);
    var w = s.invm(q);
    var v = g.toRed(montp).redPow(new $03UvU(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
    return v.cmp(r) === 0;
}
function $47d0bf2b0643b4db$var$checkValue(b, q) {
    if (b.cmpn(0) <= 0) throw new Error("invalid sig");
    if (b.cmp(q) >= q) throw new Error("invalid sig");
}
module.exports = $47d0bf2b0643b4db$var$verify;

});


parcelRequire.register("kmbpA", function(module, exports) {

var $ed1eb6d97ebd1876$require$Buffer = $bFvJb$buffer.Buffer;

var $eGOZX = parcelRequire("eGOZX");

var $kyIGk = parcelRequire("kyIGk");
module.exports = function createECDH(curve) {
    return new $ed1eb6d97ebd1876$var$ECDH(curve);
};
var $ed1eb6d97ebd1876$var$aliases = {
    secp256k1: {
        name: "secp256k1",
        byteLength: 32
    },
    secp224r1: {
        name: "p224",
        byteLength: 28
    },
    prime256v1: {
        name: "p256",
        byteLength: 32
    },
    prime192v1: {
        name: "p192",
        byteLength: 24
    },
    ed25519: {
        name: "ed25519",
        byteLength: 32
    },
    secp384r1: {
        name: "p384",
        byteLength: 48
    },
    secp521r1: {
        name: "p521",
        byteLength: 66
    }
};
$ed1eb6d97ebd1876$var$aliases.p224 = $ed1eb6d97ebd1876$var$aliases.secp224r1;
$ed1eb6d97ebd1876$var$aliases.p256 = $ed1eb6d97ebd1876$var$aliases.secp256r1 = $ed1eb6d97ebd1876$var$aliases.prime256v1;
$ed1eb6d97ebd1876$var$aliases.p192 = $ed1eb6d97ebd1876$var$aliases.secp192r1 = $ed1eb6d97ebd1876$var$aliases.prime192v1;
$ed1eb6d97ebd1876$var$aliases.p384 = $ed1eb6d97ebd1876$var$aliases.secp384r1;
$ed1eb6d97ebd1876$var$aliases.p521 = $ed1eb6d97ebd1876$var$aliases.secp521r1;
function $ed1eb6d97ebd1876$var$ECDH(curve) {
    this.curveType = $ed1eb6d97ebd1876$var$aliases[curve];
    if (!this.curveType) this.curveType = {
        name: curve
    };
    this.curve = new $eGOZX.ec(this.curveType.name) // eslint-disable-line new-cap
    ;
    this.keys = void 0;
}
$ed1eb6d97ebd1876$var$ECDH.prototype.generateKeys = function(enc, format) {
    this.keys = this.curve.genKeyPair();
    return this.getPublicKey(enc, format);
};
$ed1eb6d97ebd1876$var$ECDH.prototype.computeSecret = function(other, inenc, enc) {
    inenc = inenc || "utf8";
    if (!$ed1eb6d97ebd1876$require$Buffer.isBuffer(other)) other = new $ed1eb6d97ebd1876$require$Buffer(other, inenc);
    var otherPub = this.curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul(this.keys.getPrivate()).getX();
    return $ed1eb6d97ebd1876$var$formatReturnValue(out, enc, this.curveType.byteLength);
};
$ed1eb6d97ebd1876$var$ECDH.prototype.getPublicKey = function(enc, format) {
    var key = this.keys.getPublic(format === "compressed", true);
    if (format === "hybrid") {
        if (key[key.length - 1] % 2) key[0] = 7;
        else key[0] = 6;
    }
    return $ed1eb6d97ebd1876$var$formatReturnValue(key, enc);
};
$ed1eb6d97ebd1876$var$ECDH.prototype.getPrivateKey = function(enc) {
    return $ed1eb6d97ebd1876$var$formatReturnValue(this.keys.getPrivate(), enc);
};
$ed1eb6d97ebd1876$var$ECDH.prototype.setPublicKey = function(pub, enc) {
    enc = enc || "utf8";
    if (!$ed1eb6d97ebd1876$require$Buffer.isBuffer(pub)) pub = new $ed1eb6d97ebd1876$require$Buffer(pub, enc);
    this.keys._importPublic(pub);
    return this;
};
$ed1eb6d97ebd1876$var$ECDH.prototype.setPrivateKey = function(priv, enc) {
    enc = enc || "utf8";
    if (!$ed1eb6d97ebd1876$require$Buffer.isBuffer(priv)) priv = new $ed1eb6d97ebd1876$require$Buffer(priv, enc);
    var _priv = new $kyIGk(priv);
    _priv = _priv.toString(16);
    this.keys = this.curve.genKeyPair();
    this.keys._importPrivate(_priv);
    return this;
};
function $ed1eb6d97ebd1876$var$formatReturnValue(bn, enc, len) {
    if (!Array.isArray(bn)) bn = bn.toArray();
    var buf = new $ed1eb6d97ebd1876$require$Buffer(bn);
    if (len && buf.length < len) {
        var zeros = new $ed1eb6d97ebd1876$require$Buffer(len - buf.length);
        zeros.fill(0);
        buf = $ed1eb6d97ebd1876$require$Buffer.concat([
            zeros,
            buf
        ]);
    }
    if (!enc) return buf;
    else return buf.toString(enc);
}

});
parcelRequire.register("kyIGk", function(module, exports) {

(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = (parcelRequire("fNNvm")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});


parcelRequire.register("1cA5r", function(module, exports) {

$parcel$export(module.exports, "publicEncrypt", () => $0e02e783d92fd54b$export$512823e338ddb1b7, (v) => $0e02e783d92fd54b$export$512823e338ddb1b7 = v);
$parcel$export(module.exports, "privateDecrypt", () => $0e02e783d92fd54b$export$7efb24e2fddf99b9, (v) => $0e02e783d92fd54b$export$7efb24e2fddf99b9 = v);
$parcel$export(module.exports, "privateEncrypt", () => $0e02e783d92fd54b$export$9d0e0c0c4a8d30f3, (v) => $0e02e783d92fd54b$export$9d0e0c0c4a8d30f3 = v);
$parcel$export(module.exports, "publicDecrypt", () => $0e02e783d92fd54b$export$b9d55ff329113abd, (v) => $0e02e783d92fd54b$export$b9d55ff329113abd = v);
var $0e02e783d92fd54b$export$512823e338ddb1b7;
var $0e02e783d92fd54b$export$7efb24e2fddf99b9;
var $0e02e783d92fd54b$export$9d0e0c0c4a8d30f3;
var $0e02e783d92fd54b$export$b9d55ff329113abd;

$0e02e783d92fd54b$export$512823e338ddb1b7 = (parcelRequire("dOTiY"));

$0e02e783d92fd54b$export$7efb24e2fddf99b9 = (parcelRequire("aRxU2"));
$0e02e783d92fd54b$export$9d0e0c0c4a8d30f3 = function privateEncrypt(key, buf) {
    return $0e02e783d92fd54b$export$512823e338ddb1b7(key, buf, true);
};
$0e02e783d92fd54b$export$b9d55ff329113abd = function publicDecrypt(key, buf) {
    return $0e02e783d92fd54b$export$7efb24e2fddf99b9(key, buf, true);
};

});
parcelRequire.register("dOTiY", function(module, exports) {

var $4oqj4 = parcelRequire("4oqj4");

var $pV6F5 = parcelRequire("pV6F5");

var $2CNNr = parcelRequire("2CNNr");

var $3zo0b = parcelRequire("3zo0b");

var $4eq4e = parcelRequire("4eq4e");

var $56FgC = parcelRequire("56FgC");

var $9w5EF = parcelRequire("9w5EF");

var $1w2rX = parcelRequire("1w2rX");

var $iUdYW = parcelRequire("iUdYW");
var $a0fad8498656a7d3$require$Buffer = $iUdYW.Buffer;
module.exports = function publicEncrypt(publicKey, msg, reverse) {
    var padding;
    if (publicKey.padding) padding = publicKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = $4oqj4(publicKey);
    var paddedMsg;
    if (padding === 4) paddedMsg = $a0fad8498656a7d3$var$oaep(key, msg);
    else if (padding === 1) paddedMsg = $a0fad8498656a7d3$var$pkcs1(key, msg, reverse);
    else if (padding === 3) {
        paddedMsg = new $56FgC(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) throw new Error("data too long for modulus");
    } else throw new Error("unknown padding");
    if (reverse) return $1w2rX(paddedMsg, key);
    else return $9w5EF(paddedMsg, key);
};
function $a0fad8498656a7d3$var$oaep(key, msg) {
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = $2CNNr("sha1").update($a0fad8498656a7d3$require$Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k - hLen2 - 2) throw new Error("message too long");
    var ps = $a0fad8498656a7d3$require$Buffer.alloc(k - mLen - hLen2 - 2);
    var dblen = k - hLen - 1;
    var seed = $pV6F5(hLen);
    var maskedDb = $4eq4e($a0fad8498656a7d3$require$Buffer.concat([
        iHash,
        ps,
        $a0fad8498656a7d3$require$Buffer.alloc(1, 1),
        msg
    ], dblen), $3zo0b(seed, dblen));
    var maskedSeed = $4eq4e(seed, $3zo0b(maskedDb, hLen));
    return new $56FgC($a0fad8498656a7d3$require$Buffer.concat([
        $a0fad8498656a7d3$require$Buffer.alloc(1),
        maskedSeed,
        maskedDb
    ], k));
}
function $a0fad8498656a7d3$var$pkcs1(key, msg, reverse) {
    var mLen = msg.length;
    var k = key.modulus.byteLength();
    if (mLen > k - 11) throw new Error("message too long");
    var ps;
    if (reverse) ps = $a0fad8498656a7d3$require$Buffer.alloc(k - mLen - 3, 0xff);
    else ps = $a0fad8498656a7d3$var$nonZero(k - mLen - 3);
    return new $56FgC($a0fad8498656a7d3$require$Buffer.concat([
        $a0fad8498656a7d3$require$Buffer.from([
            0,
            reverse ? 1 : 2
        ]),
        ps,
        $a0fad8498656a7d3$require$Buffer.alloc(1),
        msg
    ], k));
}
function $a0fad8498656a7d3$var$nonZero(len) {
    var out = $a0fad8498656a7d3$require$Buffer.allocUnsafe(len);
    var i = 0;
    var cache = $pV6F5(len * 2);
    var cur = 0;
    var num;
    while(i < len){
        if (cur === cache.length) {
            cache = $pV6F5(len * 2);
            cur = 0;
        }
        num = cache[cur++];
        if (num) out[i++] = num;
    }
    return out;
}

});
parcelRequire.register("3zo0b", function(module, exports) {

var $2CNNr = parcelRequire("2CNNr");

var $iUdYW = parcelRequire("iUdYW");
var $299742456c8bd723$require$Buffer = $iUdYW.Buffer;
module.exports = function(seed, len) {
    var t = $299742456c8bd723$require$Buffer.alloc(0);
    var i = 0;
    var c;
    while(t.length < len){
        c = $299742456c8bd723$var$i2ops(i++);
        t = $299742456c8bd723$require$Buffer.concat([
            t,
            $2CNNr("sha1").update(seed).update(c).digest()
        ]);
    }
    return t.slice(0, len);
};
function $299742456c8bd723$var$i2ops(c) {
    var out = $299742456c8bd723$require$Buffer.allocUnsafe(4);
    out.writeUInt32BE(c, 0);
    return out;
}

});

parcelRequire.register("4eq4e", function(module, exports) {
module.exports = function xor(a, b) {
    var len = a.length;
    var i = -1;
    while(++i < len)a[i] ^= b[i];
    return a;
};

});

parcelRequire.register("56FgC", function(module, exports) {

(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = (parcelRequire("fNNvm")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("9w5EF", function(module, exports) {

var $56FgC = parcelRequire("56FgC");

var $iUdYW = parcelRequire("iUdYW");
var $6edb7d2d5bb606bd$require$Buffer = $iUdYW.Buffer;
function $6edb7d2d5bb606bd$var$withPublic(paddedMsg, key) {
    return $6edb7d2d5bb606bd$require$Buffer.from(paddedMsg.toRed($56FgC.mont(key.modulus)).redPow(new $56FgC(key.publicExponent)).fromRed().toArray());
}
module.exports = $6edb7d2d5bb606bd$var$withPublic;

});


parcelRequire.register("aRxU2", function(module, exports) {

var $4oqj4 = parcelRequire("4oqj4");

var $3zo0b = parcelRequire("3zo0b");

var $4eq4e = parcelRequire("4eq4e");

var $56FgC = parcelRequire("56FgC");

var $1w2rX = parcelRequire("1w2rX");

var $2CNNr = parcelRequire("2CNNr");

var $9w5EF = parcelRequire("9w5EF");

var $iUdYW = parcelRequire("iUdYW");
var $7e89270040664840$require$Buffer = $iUdYW.Buffer;
module.exports = function privateDecrypt(privateKey, enc, reverse) {
    var padding;
    if (privateKey.padding) padding = privateKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = $4oqj4(privateKey);
    var k = key.modulus.byteLength();
    if (enc.length > k || new $56FgC(enc).cmp(key.modulus) >= 0) throw new Error("decryption error");
    var msg;
    if (reverse) msg = $9w5EF(new $56FgC(enc), key);
    else msg = $1w2rX(enc, key);
    var zBuffer = $7e89270040664840$require$Buffer.alloc(k - msg.length);
    msg = $7e89270040664840$require$Buffer.concat([
        zBuffer,
        msg
    ], k);
    if (padding === 4) return $7e89270040664840$var$oaep(key, msg);
    else if (padding === 1) return $7e89270040664840$var$pkcs1(key, msg, reverse);
    else if (padding === 3) return msg;
    else throw new Error("unknown padding");
};
function $7e89270040664840$var$oaep(key, msg) {
    var k = key.modulus.byteLength();
    var iHash = $2CNNr("sha1").update($7e89270040664840$require$Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) throw new Error("decryption error");
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb = msg.slice(hLen + 1);
    var seed = $4eq4e(maskedSeed, $3zo0b(maskedDb, hLen));
    var db = $4eq4e(maskedDb, $3zo0b(seed, k - hLen - 1));
    if ($7e89270040664840$var$compare(iHash, db.slice(0, hLen))) throw new Error("decryption error");
    var i = hLen;
    while(db[i] === 0)i++;
    if (db[i++] !== 1) throw new Error("decryption error");
    return db.slice(i);
}
function $7e89270040664840$var$pkcs1(key, msg, reverse) {
    var p1 = msg.slice(0, 2);
    var i = 2;
    var status = 0;
    while(msg[i++] !== 0)if (i >= msg.length) {
        status++;
        break;
    }
    var ps = msg.slice(2, i - 1);
    if (p1.toString("hex") !== "0002" && !reverse || p1.toString("hex") !== "0001" && reverse) status++;
    if (ps.length < 8) status++;
    if (status) throw new Error("decryption error");
    return msg.slice(i);
}
function $7e89270040664840$var$compare(a, b) {
    a = $7e89270040664840$require$Buffer.from(a);
    b = $7e89270040664840$require$Buffer.from(b);
    var dif = 0;
    var len = a.length;
    if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
    }
    var i = -1;
    while(++i < len)dif += a[i] ^ b[i];
    return dif;
}

});


parcelRequire.register("a454F", function(module, exports) {

$parcel$export(module.exports, "randomFill", () => $753e36bfa02bef43$export$bb1abf2ce84fc7e8, (v) => $753e36bfa02bef43$export$bb1abf2ce84fc7e8 = v);
$parcel$export(module.exports, "randomFillSync", () => $753e36bfa02bef43$export$2f7171e78e524d5e, (v) => $753e36bfa02bef43$export$2f7171e78e524d5e = v);
var $753e36bfa02bef43$export$bb1abf2ce84fc7e8;
var $753e36bfa02bef43$export$2f7171e78e524d5e;

"use strict";
function $753e36bfa02bef43$var$oldBrowser() {
    throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
}

var $iUdYW = parcelRequire("iUdYW");

var $pV6F5 = parcelRequire("pV6F5");
var $753e36bfa02bef43$var$Buffer = $iUdYW.Buffer;
var $753e36bfa02bef43$var$kBufferMaxLength = $iUdYW.kMaxLength;
var $753e36bfa02bef43$var$crypto = $parcel$global.crypto || $parcel$global.msCrypto;
var $753e36bfa02bef43$var$kMaxUint32 = Math.pow(2, 32) - 1;
function $753e36bfa02bef43$var$assertOffset(offset, length) {
    if (typeof offset !== "number" || offset !== offset) throw new TypeError("offset must be a number");
    if (offset > $753e36bfa02bef43$var$kMaxUint32 || offset < 0) throw new TypeError("offset must be a uint32");
    if (offset > $753e36bfa02bef43$var$kBufferMaxLength || offset > length) throw new RangeError("offset out of range");
}
function $753e36bfa02bef43$var$assertSize(size, offset, length) {
    if (typeof size !== "number" || size !== size) throw new TypeError("size must be a number");
    if (size > $753e36bfa02bef43$var$kMaxUint32 || size < 0) throw new TypeError("size must be a uint32");
    if (size + offset > length || size > $753e36bfa02bef43$var$kBufferMaxLength) throw new RangeError("buffer too small");
}
if ($753e36bfa02bef43$var$crypto && $753e36bfa02bef43$var$crypto.getRandomValues || false) {
    $753e36bfa02bef43$export$bb1abf2ce84fc7e8 = $753e36bfa02bef43$var$randomFill;
    $753e36bfa02bef43$export$2f7171e78e524d5e = $753e36bfa02bef43$var$randomFillSync;
} else {
    $753e36bfa02bef43$export$bb1abf2ce84fc7e8 = $753e36bfa02bef43$var$oldBrowser;
    $753e36bfa02bef43$export$2f7171e78e524d5e = $753e36bfa02bef43$var$oldBrowser;
}
function $753e36bfa02bef43$var$randomFill(buf, offset, size, cb) {
    if (!$753e36bfa02bef43$var$Buffer.isBuffer(buf) && !(buf instanceof $parcel$global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    if (typeof offset === "function") {
        cb = offset;
        offset = 0;
        size = buf.length;
    } else if (typeof size === "function") {
        cb = size;
        size = buf.length - offset;
    } else if (typeof cb !== "function") throw new TypeError('"cb" argument must be a function');
    $753e36bfa02bef43$var$assertOffset(offset, buf.length);
    $753e36bfa02bef43$var$assertSize(size, offset, buf.length);
    return $753e36bfa02bef43$var$actualFill(buf, offset, size, cb);
}
function $753e36bfa02bef43$var$actualFill(buf, offset, size, cb) {
    var ourBuf = buf.buffer;
    var uint = new Uint8Array(ourBuf, offset, size);
    $753e36bfa02bef43$var$crypto.getRandomValues(uint);
    if (cb) {
        $bFvJb$process.nextTick(function() {
            cb(null, buf);
        });
        return;
    }
    return buf;
    if (cb) {
        $pV6F5(size, function(err, bytes) {
            if (err) return cb(err);
            bytes.copy(buf, offset);
            cb(null, buf);
        });
        return;
    }
    var bytes = $pV6F5(size);
    bytes.copy(buf, offset);
    return buf;
}
function $753e36bfa02bef43$var$randomFillSync(buf, offset, size) {
    if (typeof offset === "undefined") offset = 0;
    if (!$753e36bfa02bef43$var$Buffer.isBuffer(buf) && !(buf instanceof $parcel$global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    $753e36bfa02bef43$var$assertOffset(offset, buf.length);
    if (size === undefined) size = buf.length - offset;
    $753e36bfa02bef43$var$assertSize(size, offset, buf.length);
    return $753e36bfa02bef43$var$actualFill(buf, offset, size);
}

});


parcelRequire.register("iLW83", function(module, exports) {

module.exports = Object.assign({}, $bFvJb$node_url, {
    "URL": URL
});

});

parcelRequire.register("gHFdE", function(module, exports) {

var $c290a2c5331aa914$require$Buffer = $bFvJb$buffer.Buffer;
"use strict";
var $c290a2c5331aa914$var$__awaiter = module.exports && module.exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $c290a2c5331aa914$var$__importDefault = module.exports && module.exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

const $c290a2c5331aa914$var$net_1 = $c290a2c5331aa914$var$__importDefault($bFvJb$net);

const $c290a2c5331aa914$var$tls_1 = $c290a2c5331aa914$var$__importDefault($bFvJb$tls);

const $c290a2c5331aa914$var$url_1 = $c290a2c5331aa914$var$__importDefault((parcelRequire("iLW83")));

const $c290a2c5331aa914$var$assert_1 = $c290a2c5331aa914$var$__importDefault($bFvJb$assert);

const $c290a2c5331aa914$var$debug_1 = $c290a2c5331aa914$var$__importDefault((parcelRequire("5bTfS")));

var $7glbN = parcelRequire("7glbN");

const $c290a2c5331aa914$var$parse_proxy_response_1 = $c290a2c5331aa914$var$__importDefault((parcelRequire("hQ2TC")));
const $c290a2c5331aa914$var$debug = $c290a2c5331aa914$var$debug_1.default("https-proxy-agent:agent");
/**
 * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to
 * the specified "HTTP(s) proxy server" in order to proxy HTTPS requests.
 *
 * Outgoing HTTP requests are first tunneled through the proxy server using the
 * `CONNECT` HTTP request method to establish a connection to the proxy server,
 * and then the proxy server connects to the destination target and issues the
 * HTTP request from the proxy server.
 *
 * `https:` requests have their socket connection upgraded to TLS once
 * the connection to the proxy server has been established.
 *
 * @api public
 */ class $c290a2c5331aa914$var$HttpsProxyAgent extends $7glbN.Agent {
    constructor(_opts){
        let opts;
        if (typeof _opts === "string") opts = $c290a2c5331aa914$var$url_1.default.parse(_opts);
        else opts = _opts;
        if (!opts) throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");
        $c290a2c5331aa914$var$debug("creating new HttpsProxyAgent instance: %o", opts);
        super(opts);
        const proxy = Object.assign({}, opts);
        // If `true`, then connect to the proxy server over TLS.
        // Defaults to `false`.
        this.secureProxy = opts.secureProxy || $c290a2c5331aa914$var$isHTTPS(proxy.protocol);
        // Prefer `hostname` over `host`, and set the `port` if needed.
        proxy.host = proxy.hostname || proxy.host;
        if (typeof proxy.port === "string") proxy.port = parseInt(proxy.port, 10);
        if (!proxy.port && proxy.host) proxy.port = this.secureProxy ? 443 : 80;
        // ALPN is supported by Node.js >= v5.
        // attempt to negotiate http/1.1 for proxy servers that support http/2
        if (this.secureProxy && !("ALPNProtocols" in proxy)) proxy.ALPNProtocols = [
            "http 1.1"
        ];
        if (proxy.host && proxy.path) {
            // If both a `host` and `path` are specified then it's most likely
            // the result of a `url.parse()` call... we need to remove the
            // `path` portion so that `net.connect()` doesn't attempt to open
            // that as a Unix socket file.
            delete proxy.path;
            delete proxy.pathname;
        }
        this.proxy = proxy;
    }
    /**
     * Called when the node-core HTTP client library is creating a
     * new HTTP request.
     *
     * @api protected
     */ callback(req, opts) {
        return $c290a2c5331aa914$var$__awaiter(this, void 0, void 0, function*() {
            const { proxy: proxy, secureProxy: secureProxy } = this;
            // Create a socket connection to the proxy server.
            let socket;
            if (secureProxy) {
                $c290a2c5331aa914$var$debug("Creating `tls.Socket`: %o", proxy);
                socket = $c290a2c5331aa914$var$tls_1.default.connect(proxy);
            } else {
                $c290a2c5331aa914$var$debug("Creating `net.Socket`: %o", proxy);
                socket = $c290a2c5331aa914$var$net_1.default.connect(proxy);
            }
            const headers = Object.assign({}, proxy.headers);
            const hostname = `${opts.host}:${opts.port}`;
            let payload = `CONNECT ${hostname} HTTP/1.1\r\n`;
            // Inject the `Proxy-Authorization` header if necessary.
            if (proxy.auth) headers["Proxy-Authorization"] = `Basic ${$c290a2c5331aa914$require$Buffer.from(proxy.auth).toString("base64")}`;
            // The `Host` header should only include the port
            // number when it is not the default port.
            let { host: host, port: port, secureEndpoint: secureEndpoint } = opts;
            if (!$c290a2c5331aa914$var$isDefaultPort(port, secureEndpoint)) host += `:${port}`;
            headers.Host = host;
            headers.Connection = "close";
            for (const name of Object.keys(headers))payload += `${name}: ${headers[name]}\r\n`;
            const proxyResponsePromise = $c290a2c5331aa914$var$parse_proxy_response_1.default(socket);
            socket.write(`${payload}\r\n`);
            const { statusCode: statusCode, buffered: buffered } = yield proxyResponsePromise;
            if (statusCode === 200) {
                req.once("socket", $c290a2c5331aa914$var$resume);
                if (opts.secureEndpoint) {
                    // The proxy is connecting to a TLS server, so upgrade
                    // this socket connection to a TLS connection.
                    $c290a2c5331aa914$var$debug("Upgrading socket connection to TLS");
                    const servername = opts.servername || opts.host;
                    return $c290a2c5331aa914$var$tls_1.default.connect(Object.assign(Object.assign({}, $c290a2c5331aa914$var$omit(opts, "host", "hostname", "path", "port")), {
                        socket: socket,
                        servername: servername
                    }));
                }
                return socket;
            }
            // Some other status code that's not 200... need to re-play the HTTP
            // header "data" events onto the socket once the HTTP machinery is
            // attached so that the node core `http` can parse and handle the
            // error status code.
            // Close the original socket, and a new "fake" socket is returned
            // instead, so that the proxy doesn't get the HTTP request
            // written to it (which may contain `Authorization` headers or other
            // sensitive data).
            //
            // See: https://hackerone.com/reports/541502
            socket.destroy();
            const fakeSocket = new $c290a2c5331aa914$var$net_1.default.Socket({
                writable: false
            });
            fakeSocket.readable = true;
            // Need to wait for the "socket" event to re-play the "data" events.
            req.once("socket", (s)=>{
                $c290a2c5331aa914$var$debug("replaying proxy buffer for failed request");
                $c290a2c5331aa914$var$assert_1.default(s.listenerCount("data") > 0);
                // Replay the "buffered" Buffer onto the fake `socket`, since at
                // this point the HTTP module machinery has been hooked up for
                // the user.
                s.push(buffered);
                s.push(null);
            });
            return fakeSocket;
        });
    }
}
module.exports.default = $c290a2c5331aa914$var$HttpsProxyAgent;
function $c290a2c5331aa914$var$resume(socket) {
    socket.resume();
}
function $c290a2c5331aa914$var$isDefaultPort(port, secure) {
    return Boolean(!secure && port === 80 || secure && port === 443);
}
function $c290a2c5331aa914$var$isHTTPS(protocol) {
    return typeof protocol === "string" ? /^https:?$/i.test(protocol) : false;
}
function $c290a2c5331aa914$var$omit(obj, ...keys) {
    const ret = {};
    let key;
    for(key in obj)if (!keys.includes(key)) ret[key] = obj[key];
    return ret;
}

});
parcelRequire.register("5bTfS", function(module, exports) {
/* eslint-env browser */ /**
 * This is the web browser implementation of `debug()`.
 */ 
module.exports.formatArgs = $3c78d75a32e8b344$var$formatArgs;
module.exports.save = $3c78d75a32e8b344$var$save;
module.exports.load = $3c78d75a32e8b344$var$load;
module.exports.useColors = $3c78d75a32e8b344$var$useColors;
module.exports.storage = $3c78d75a32e8b344$var$localstorage();
module.exports.destroy = (()=>{
    let warned = false;
    return ()=>{
        if (!warned) {
            warned = true;
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
    };
})();
/**
 * Colors.
 */ module.exports.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */ // eslint-disable-next-line complexity
function $3c78d75a32e8b344$var$useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) return true;
    // Internet Explorer and Edge do not support colors.
    if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return false;
    // Is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
    typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
    typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */ function $3c78d75a32e8b344$var$formatArgs(args) {
    args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
    if (!this.useColors) return;
    const c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    // The final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match)=>{
        if (match === "%%") return;
        index++;
        if (match === "%c") // We only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
    });
    args.splice(lastC, 0, c);
}
/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */ module.exports.log = console.debug || console.log || (()=>{});
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function $3c78d75a32e8b344$var$save(namespaces) {
    try {
        if (namespaces) module.exports.storage.setItem("debug", namespaces);
        else module.exports.storage.removeItem("debug");
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function $3c78d75a32e8b344$var$load() {
    let r;
    try {
        r = module.exports.storage.getItem("debug");
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof $bFvJb$process !== "undefined" && "env" in $bFvJb$process) r = undefined;
    return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */ function $3c78d75a32e8b344$var$localstorage() {
    try {
        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
        // The Browser also has localStorage in the global context.
        return localStorage;
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}

module.exports = (parcelRequire("eOt1Z"))(module.exports);
const { formatters: $3c78d75a32e8b344$var$formatters } = module.exports;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */ $3c78d75a32e8b344$var$formatters.j = function(v) {
    try {
        return JSON.stringify(v);
    } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
    }
};

});
parcelRequire.register("eOt1Z", function(module, exports) {
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */ 
function $ac8c4132005fecad$var$setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = (parcelRequire("jbZbq"));
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key)=>{
        createDebug[key] = env[key];
    });
    /**
	* The currently active debug mode names, and names to skip.
	*/ createDebug.names = [];
    createDebug.skips = [];
    /**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/ createDebug.formatters = {};
    /**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/ function selectColor(namespace) {
        let hash = 0;
        for(let i = 0; i < namespace.length; i++){
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    /**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/ function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
            // Disabled?
            if (!debug.enabled) return;
            const self = debug;
            // Set `diff` timestamp
            const curr = Number(new Date());
            const ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== "string") // Anything else let's inspect with %O
            args.unshift("%O");
            // Apply any `formatters` transformations
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format)=>{
                // If we encounter an escaped % then don't increase the array index
                if (match === "%%") return "%";
                index++;
                const formatter = createDebug.formatters[format];
                if (typeof formatter === "function") {
                    const val = args[index];
                    match = formatter.call(self, val);
                    // Now we need to remove `args[index]` since it's inlined in the `format`
                    args.splice(index, 1);
                    index--;
                }
                return match;
            });
            // Apply env-specific formatting (colors, etc.)
            createDebug.formatArgs.call(self, args);
            const logFn = self.log || createDebug.log;
            logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.
        Object.defineProperty(debug, "enabled", {
            enumerable: true,
            configurable: false,
            get: ()=>{
                if (enableOverride !== null) return enableOverride;
                if (namespacesCache !== createDebug.namespaces) {
                    namespacesCache = createDebug.namespaces;
                    enabledCache = createDebug.enabled(namespace);
                }
                return enabledCache;
            },
            set: (v)=>{
                enableOverride = v;
            }
        });
        // Env-specific initialization logic for debug instances
        if (typeof createDebug.init === "function") createDebug.init(debug);
        return debug;
    }
    function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
    }
    /**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/ function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for(i = 0; i < len; i++){
            if (!split[i]) continue;
            namespaces = split[i].replace(/\*/g, ".*?");
            if (namespaces[0] === "-") createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
            else createDebug.names.push(new RegExp("^" + namespaces + "$"));
        }
    }
    /**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/ function disable() {
        const namespaces = [
            ...createDebug.names.map(toNamespace),
            ...createDebug.skips.map(toNamespace).map((namespace)=>"-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
    }
    /**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/ function enabled(name) {
        if (name[name.length - 1] === "*") return true;
        let i;
        let len;
        for(i = 0, len = createDebug.skips.length; i < len; i++){
            if (createDebug.skips[i].test(name)) return false;
        }
        for(i = 0, len = createDebug.names.length; i < len; i++){
            if (createDebug.names[i].test(name)) return true;
        }
        return false;
    }
    /**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/ function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
    }
    /**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/ function coerce(val) {
        if (val instanceof Error) return val.stack || val.message;
        return val;
    }
    /**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/ function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
}
module.exports = $ac8c4132005fecad$var$setup;

});
parcelRequire.register("jbZbq", function(module, exports) {
/**
 * Helpers.
 */ var $df8e81228cb3a90c$var$s = 1000;
var $df8e81228cb3a90c$var$m = $df8e81228cb3a90c$var$s * 60;
var $df8e81228cb3a90c$var$h = $df8e81228cb3a90c$var$m * 60;
var $df8e81228cb3a90c$var$d = $df8e81228cb3a90c$var$h * 24;
var $df8e81228cb3a90c$var$w = $df8e81228cb3a90c$var$d * 7;
var $df8e81228cb3a90c$var$y = $df8e81228cb3a90c$var$d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */ module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) return $df8e81228cb3a90c$var$parse(val);
    else if (type === "number" && isFinite(val)) return options.long ? $df8e81228cb3a90c$var$fmtLong(val) : $df8e81228cb3a90c$var$fmtShort(val);
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */ function $df8e81228cb3a90c$var$parse(str) {
    str = String(str);
    if (str.length > 100) return;
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) return;
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch(type){
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
            return n * $df8e81228cb3a90c$var$y;
        case "weeks":
        case "week":
        case "w":
            return n * $df8e81228cb3a90c$var$w;
        case "days":
        case "day":
        case "d":
            return n * $df8e81228cb3a90c$var$d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
            return n * $df8e81228cb3a90c$var$h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
            return n * $df8e81228cb3a90c$var$m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
            return n * $df8e81228cb3a90c$var$s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
            return n;
        default:
            return undefined;
    }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function $df8e81228cb3a90c$var$fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= $df8e81228cb3a90c$var$d) return Math.round(ms / $df8e81228cb3a90c$var$d) + "d";
    if (msAbs >= $df8e81228cb3a90c$var$h) return Math.round(ms / $df8e81228cb3a90c$var$h) + "h";
    if (msAbs >= $df8e81228cb3a90c$var$m) return Math.round(ms / $df8e81228cb3a90c$var$m) + "m";
    if (msAbs >= $df8e81228cb3a90c$var$s) return Math.round(ms / $df8e81228cb3a90c$var$s) + "s";
    return ms + "ms";
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function $df8e81228cb3a90c$var$fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= $df8e81228cb3a90c$var$d) return $df8e81228cb3a90c$var$plural(ms, msAbs, $df8e81228cb3a90c$var$d, "day");
    if (msAbs >= $df8e81228cb3a90c$var$h) return $df8e81228cb3a90c$var$plural(ms, msAbs, $df8e81228cb3a90c$var$h, "hour");
    if (msAbs >= $df8e81228cb3a90c$var$m) return $df8e81228cb3a90c$var$plural(ms, msAbs, $df8e81228cb3a90c$var$m, "minute");
    if (msAbs >= $df8e81228cb3a90c$var$s) return $df8e81228cb3a90c$var$plural(ms, msAbs, $df8e81228cb3a90c$var$s, "second");
    return ms + " ms";
}
/**
 * Pluralization helper.
 */ function $df8e81228cb3a90c$var$plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
}

});



parcelRequire.register("7glbN", function(module, exports) {
"use strict";
var $549a76c0303a36f1$var$__importDefault = module.exports && module.exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};


const $549a76c0303a36f1$var$debug_1 = $549a76c0303a36f1$var$__importDefault((parcelRequire("5bTfS")));

const $549a76c0303a36f1$var$promisify_1 = $549a76c0303a36f1$var$__importDefault((parcelRequire("kGWdJ")));
const $549a76c0303a36f1$var$debug = $549a76c0303a36f1$var$debug_1.default("agent-base");
function $549a76c0303a36f1$var$isAgent(v) {
    return Boolean(v) && typeof v.addRequest === "function";
}
function $549a76c0303a36f1$var$isSecureEndpoint() {
    const { stack: stack } = new Error();
    if (typeof stack !== "string") return false;
    return stack.split("\n").some((l)=>l.indexOf("(https.js:") !== -1 || l.indexOf("node:https:") !== -1);
}
function $549a76c0303a36f1$var$createAgent(callback, opts) {
    return new $549a76c0303a36f1$var$createAgent.Agent(callback, opts);
}
(function(createAgent) {
    /**
     * Base `http.Agent` implementation.
     * No pooling/keep-alive is implemented by default.
     *
     * @param {Function} callback
     * @api public
     */ class Agent extends $bFvJb$events.EventEmitter {
        constructor(callback, _opts){
            super();
            let opts = _opts;
            if (typeof callback === "function") this.callback = callback;
            else if (callback) opts = callback;
            // Timeout for the socket to be returned from the callback
            this.timeout = null;
            if (opts && typeof opts.timeout === "number") this.timeout = opts.timeout;
            // These aren't actually used by `agent-base`, but are required
            // for the TypeScript definition files in `@types/node` :/
            this.maxFreeSockets = 1;
            this.maxSockets = 1;
            this.maxTotalSockets = Infinity;
            this.sockets = {};
            this.freeSockets = {};
            this.requests = {};
            this.options = {};
        }
        get defaultPort() {
            if (typeof this.explicitDefaultPort === "number") return this.explicitDefaultPort;
            return $549a76c0303a36f1$var$isSecureEndpoint() ? 443 : 80;
        }
        set defaultPort(v) {
            this.explicitDefaultPort = v;
        }
        get protocol() {
            if (typeof this.explicitProtocol === "string") return this.explicitProtocol;
            return $549a76c0303a36f1$var$isSecureEndpoint() ? "https:" : "http:";
        }
        set protocol(v) {
            this.explicitProtocol = v;
        }
        callback(req, opts, fn) {
            throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`');
        }
        /**
         * Called by node-core's "_http_client.js" module when creating
         * a new HTTP request with this Agent instance.
         *
         * @api public
         */ addRequest(req, _opts) {
            const opts = Object.assign({}, _opts);
            if (typeof opts.secureEndpoint !== "boolean") opts.secureEndpoint = $549a76c0303a36f1$var$isSecureEndpoint();
            if (opts.host == null) opts.host = "localhost";
            if (opts.port == null) opts.port = opts.secureEndpoint ? 443 : 80;
            if (opts.protocol == null) opts.protocol = opts.secureEndpoint ? "https:" : "http:";
            if (opts.host && opts.path) // If both a `host` and `path` are specified then it's most
            // likely the result of a `url.parse()` call... we need to
            // remove the `path` portion so that `net.connect()` doesn't
            // attempt to open that as a unix socket file.
            delete opts.path;
            delete opts.agent;
            delete opts.hostname;
            delete opts._defaultAgent;
            delete opts.defaultPort;
            delete opts.createConnection;
            // Hint to use "Connection: close"
            // XXX: non-documented `http` module API :(
            req._last = true;
            req.shouldKeepAlive = false;
            let timedOut = false;
            let timeoutId = null;
            const timeoutMs = opts.timeout || this.timeout;
            const onerror = (err)=>{
                if (req._hadError) return;
                req.emit("error", err);
                // For Safety. Some additional errors might fire later on
                // and we need to make sure we don't double-fire the error event.
                req._hadError = true;
            };
            const ontimeout = ()=>{
                timeoutId = null;
                timedOut = true;
                const err = new Error(`A "socket" was not created for HTTP request before ${timeoutMs}ms`);
                err.code = "ETIMEOUT";
                onerror(err);
            };
            const callbackError = (err)=>{
                if (timedOut) return;
                if (timeoutId !== null) {
                    clearTimeout(timeoutId);
                    timeoutId = null;
                }
                onerror(err);
            };
            const onsocket = (socket)=>{
                if (timedOut) return;
                if (timeoutId != null) {
                    clearTimeout(timeoutId);
                    timeoutId = null;
                }
                if ($549a76c0303a36f1$var$isAgent(socket)) {
                    // `socket` is actually an `http.Agent` instance, so
                    // relinquish responsibility for this `req` to the Agent
                    // from here on
                    $549a76c0303a36f1$var$debug("Callback returned another Agent instance %o", socket.constructor.name);
                    socket.addRequest(req, opts);
                    return;
                }
                if (socket) {
                    socket.once("free", ()=>{
                        this.freeSocket(socket, opts);
                    });
                    req.onSocket(socket);
                    return;
                }
                const err = new Error(`no Duplex stream was returned to agent-base for \`${req.method} ${req.path}\``);
                onerror(err);
            };
            if (typeof this.callback !== "function") {
                onerror(new Error("`callback` is not defined"));
                return;
            }
            if (!this.promisifiedCallback) {
                if (this.callback.length >= 3) {
                    $549a76c0303a36f1$var$debug("Converting legacy callback function to promise");
                    this.promisifiedCallback = $549a76c0303a36f1$var$promisify_1.default(this.callback);
                } else this.promisifiedCallback = this.callback;
            }
            if (typeof timeoutMs === "number" && timeoutMs > 0) timeoutId = setTimeout(ontimeout, timeoutMs);
            if ("port" in opts && typeof opts.port !== "number") opts.port = Number(opts.port);
            try {
                $549a76c0303a36f1$var$debug("Resolving socket for %o request: %o", opts.protocol, `${req.method} ${req.path}`);
                Promise.resolve(this.promisifiedCallback(req, opts)).then(onsocket, callbackError);
            } catch (err) {
                Promise.reject(err).catch(callbackError);
            }
        }
        freeSocket(socket, opts) {
            $549a76c0303a36f1$var$debug("Freeing socket %o %o", socket.constructor.name, opts);
            socket.destroy();
        }
        destroy() {
            $549a76c0303a36f1$var$debug("Destroying agent %o", this.constructor.name);
        }
    }
    createAgent.Agent = Agent;
    // So that `instanceof` works correctly
    createAgent.prototype = createAgent.Agent.prototype;
})($549a76c0303a36f1$var$createAgent || ($549a76c0303a36f1$var$createAgent = {}));
module.exports = $549a76c0303a36f1$var$createAgent;

});
parcelRequire.register("kGWdJ", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
function $f104e43ed3e0d334$var$promisify(fn) {
    return function(req, opts) {
        return new Promise((resolve, reject)=>{
            fn.call(this, req, opts, (err, rtn)=>{
                if (err) reject(err);
                else resolve(rtn);
            });
        });
    };
}
module.exports.default = $f104e43ed3e0d334$var$promisify;

});


parcelRequire.register("hQ2TC", function(module, exports) {

var $cfc98a12b6b34bec$require$Buffer = $bFvJb$buffer.Buffer;
"use strict";
var $cfc98a12b6b34bec$var$__importDefault = module.exports && module.exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

const $cfc98a12b6b34bec$var$debug_1 = $cfc98a12b6b34bec$var$__importDefault((parcelRequire("5bTfS")));
const $cfc98a12b6b34bec$var$debug = $cfc98a12b6b34bec$var$debug_1.default("https-proxy-agent:parse-proxy-response");
function $cfc98a12b6b34bec$var$parseProxyResponse(socket) {
    return new Promise((resolve, reject)=>{
        // we need to buffer any HTTP traffic that happens with the proxy before we get
        // the CONNECT response, so that if the response is anything other than an "200"
        // response code, then we can re-play the "data" events on the socket once the
        // HTTP parser is hooked up...
        let buffersLength = 0;
        const buffers = [];
        function read() {
            const b = socket.read();
            if (b) ondata(b);
            else socket.once("readable", read);
        }
        function cleanup() {
            socket.removeListener("end", onend);
            socket.removeListener("error", onerror);
            socket.removeListener("close", onclose);
            socket.removeListener("readable", read);
        }
        function onclose(err) {
            $cfc98a12b6b34bec$var$debug("onclose had error %o", err);
        }
        function onend() {
            $cfc98a12b6b34bec$var$debug("onend");
        }
        function onerror(err) {
            cleanup();
            $cfc98a12b6b34bec$var$debug("onerror %o", err);
            reject(err);
        }
        function ondata(b) {
            buffers.push(b);
            buffersLength += b.length;
            const buffered = $cfc98a12b6b34bec$require$Buffer.concat(buffers, buffersLength);
            const endOfHeaders = buffered.indexOf("\r\n\r\n");
            if (endOfHeaders === -1) {
                // keep buffering
                $cfc98a12b6b34bec$var$debug("have not received end of HTTP headers yet...");
                read();
                return;
            }
            const firstLine = buffered.toString("ascii", 0, buffered.indexOf("\r\n"));
            const statusCode = +firstLine.split(" ")[1];
            $cfc98a12b6b34bec$var$debug("got proxy server response: %o", firstLine);
            resolve({
                statusCode: statusCode,
                buffered: buffered
            });
        }
        socket.on("error", onerror);
        socket.on("close", onclose);
        socket.on("end", onend);
        read();
    });
}
module.exports.default = $cfc98a12b6b34bec$var$parseProxyResponse;

});


var $754ad0fe791d57df$exports = {};
"use strict";
var $754ad0fe791d57df$var$__createBinding = $754ad0fe791d57df$exports && $754ad0fe791d57df$exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $754ad0fe791d57df$var$__exportStar = $754ad0fe791d57df$exports && $754ad0fe791d57df$exports.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) $754ad0fe791d57df$var$__createBinding(exports1, m, p);
};
Object.defineProperty($754ad0fe791d57df$exports, "__esModule", {
    value: true
});
$754ad0fe791d57df$exports.basicLogger = $754ad0fe791d57df$exports.init = void 0;

var $70e31617e9c789b1$exports = {};
"use strict";
Object.defineProperty($70e31617e9c789b1$exports, "__esModule", {
    value: true
});



var $aSbYK = parcelRequire("aSbYK");
var $db395bb86894740e$exports = {};
"use strict";
Object.defineProperty($db395bb86894740e$exports, "__esModule", {
    value: true
});

var $c24ca4f9d81c27b5$exports = {};
"use strict";
Object.defineProperty($c24ca4f9d81c27b5$exports, "__esModule", {
    value: true
});
$c24ca4f9d81c27b5$exports.Emits = void 0;
/**
 * Adds the implementation of an event emitter to something that contains
 * a field of `emitter` with type `EventEmitter`.
 * @param Base The class to derive the mixin from.
 * @returns A class extending the base with an event emitter.
 */ function $c24ca4f9d81c27b5$var$Emits(Base) {
    return class WithEvents extends Base {
        on(eventName, listener) {
            this.emitter.on(eventName, listener);
            return this;
        }
        addListener(eventName, listener) {
            this.emitter.addListener(eventName, listener);
            return this;
        }
        once(eventName, listener) {
            this.emitter.once(eventName, listener);
            return this;
        }
        removeListener(eventName, listener) {
            this.emitter.removeListener(eventName, listener);
            return this;
        }
        off(eventName, listener) {
            this.emitter.off(eventName, listener);
            return this;
        }
        removeAllListeners(event) {
            this.emitter.removeAllListeners(event);
            return this;
        }
        setMaxListeners(n) {
            this.emitter.setMaxListeners(n);
            return this;
        }
        getMaxListeners() {
            return this.emitter.getMaxListeners();
        }
        listeners(eventName) {
            return this.emitter.listeners(eventName);
        }
        rawListeners(eventName) {
            return this.emitter.rawListeners(eventName);
        }
        emit(eventName, ...args) {
            return this.emitter.emit(eventName, args);
        }
        listenerCount(eventName) {
            return this.emitter.listenerCount(eventName);
        }
        prependListener(eventName, listener) {
            this.emitter.prependListener(eventName, listener);
            return this;
        }
        prependOnceListener(eventName, listener) {
            this.emitter.prependOnceListener(eventName, listener);
            return this;
        }
        eventNames() {
            return this.emitter.eventNames();
        }
    };
}
$c24ca4f9d81c27b5$exports.Emits = $c24ca4f9d81c27b5$var$Emits;


/**
 * @ignore
 */ class $db395bb86894740e$var$BigSegmentStoreStatusProviderNode {
    constructor(provider){
        this.provider = provider;
        this.emitter = new $bFvJb$events.EventEmitter();
        this.provider.setListener((status)=>{
            this.dispatch("change", status);
        });
    }
    getStatus() {
        return this.provider.getStatus();
    }
    requireStatus() {
        return this.provider.requireStatus();
    }
    dispatch(eventType, status) {
        this.emitter.emit(eventType, status);
    }
    on(event, listener) {
        this.emitter.on(event, listener);
        return this;
    }
}
$db395bb86894740e$exports.default = (0, $c24ca4f9d81c27b5$exports.Emits)($db395bb86894740e$var$BigSegmentStoreStatusProviderNode);



var $0e742c370a2a5446$exports = {};
"use strict";
Object.defineProperty($0e742c370a2a5446$exports, "__esModule", {
    value: true
});
var $cc4e3a58c6b8d9ee$exports = {};
"use strict";
Object.defineProperty($cc4e3a58c6b8d9ee$exports, "__esModule", {
    value: true
});

var $d2RPc = parcelRequire("d2RPc");
class $cc4e3a58c6b8d9ee$var$NodeCrypto {
    createHash(algorithm) {
        return (0, $d2RPc.createHash)(algorithm);
    }
    createHmac(algorithm, key) {
        return (0, $d2RPc.createHmac)(algorithm, key);
    }
    randomUUID() {
        return (0, $d2RPc.randomUUID)();
    }
}
$cc4e3a58c6b8d9ee$exports.default = $cc4e3a58c6b8d9ee$var$NodeCrypto;


var $461270eba23c50b4$exports = {};
"use strict";
Object.defineProperty($461270eba23c50b4$exports, "__esModule", {
    value: true
});

const $461270eba23c50b4$var$fsPromises = $bFvJb$fs.promises;
class $461270eba23c50b4$var$NodeFilesystem {
    async getFileTimestamp(path) {
        const stat = await $461270eba23c50b4$var$fsPromises.stat(path);
        return stat.mtimeMs;
    }
    async readFile(path) {
        return $461270eba23c50b4$var$fsPromises.readFile(path, "utf8");
    }
    watch(path, callback) {
        return $bFvJb$fs.watch(path, {
            persistent: false
        }, (eventType)=>{
            callback(eventType, path);
        });
    }
}
$461270eba23c50b4$exports.default = $461270eba23c50b4$var$NodeFilesystem;


var $bca8de018495b976$exports = {};

"use strict";
Object.defineProperty($bca8de018495b976$exports, "__esModule", {
    value: true
});
var $995bd5ce3699069e$export$edf525f30916fbb8;
var $995bd5ce3699069e$export$640106f6dc7d2706;
var $995bd5ce3699069e$export$3ea386628068cf62;
var $995bd5ce3699069e$export$749d472264fad440;
var $995bd5ce3699069e$export$8b931a48d9488767;
var $995bd5ce3699069e$export$83d89fbfd8236492;
var $995bd5ce3699069e$export$9123f37609399513;
var $995bd5ce3699069e$export$9b60beb643db4d69;
var $995bd5ce3699069e$export$bf9fb029d174d554;
var $995bd5ce3699069e$export$23d3fad09dc44362;
var $995bd5ce3699069e$export$d2f3c2f7e0c7dcf5;
var $995bd5ce3699069e$export$3bf7c33313eba0fe;
var $995bd5ce3699069e$export$7925d89f138dad5b;
var $995bd5ce3699069e$export$722a64dea1b767dc;
var $995bd5ce3699069e$export$9e6c06a7d47f9af7;
var $995bd5ce3699069e$export$6b76988456c0292f;
var $995bd5ce3699069e$export$266d3b9babd1fc45;
var $995bd5ce3699069e$export$c1d46b5ea6262c0b;
$995bd5ce3699069e$export$edf525f30916fbb8 = function() {
    return "LE";
};
$995bd5ce3699069e$export$640106f6dc7d2706 = function() {
    if (typeof location !== "undefined") return location.hostname;
    else return "";
};
$995bd5ce3699069e$export$3ea386628068cf62 = function() {
    return [];
};
$995bd5ce3699069e$export$749d472264fad440 = function() {
    return 0;
};
$995bd5ce3699069e$export$8b931a48d9488767 = function() {
    return Number.MAX_VALUE;
};
$995bd5ce3699069e$export$83d89fbfd8236492 = function() {
    return undefined;
};
$995bd5ce3699069e$export$9123f37609399513 = function() {
    return Number.MAX_VALUE;
};
$995bd5ce3699069e$export$9b60beb643db4d69 = function() {
    return [];
};
$995bd5ce3699069e$export$bf9fb029d174d554 = function() {
    return "Browser";
};
$995bd5ce3699069e$export$23d3fad09dc44362 = function() {
    if (typeof navigator !== "undefined") return navigator.appVersion;
    return "";
};
$995bd5ce3699069e$export$d2f3c2f7e0c7dcf5 = $995bd5ce3699069e$export$3bf7c33313eba0fe = function() {
    return {};
};
$995bd5ce3699069e$export$7925d89f138dad5b = function() {
    return "javascript";
};
$995bd5ce3699069e$export$722a64dea1b767dc = function() {
    return "browser";
};
$995bd5ce3699069e$export$9e6c06a7d47f9af7 = $995bd5ce3699069e$export$6b76988456c0292f = function() {
    return "/tmp";
};
$995bd5ce3699069e$export$266d3b9babd1fc45 = "\n";
$995bd5ce3699069e$export$c1d46b5ea6262c0b = function() {
    return "/";
};


var $5a7acf8f691ab255$exports = {};
$5a7acf8f691ab255$exports = JSON.parse('{"name":"@launchdarkly/node-server-sdk","version":"8.2.2","description":"LaunchDarkly Server-Side SDK for Node.js","homepage":"https://github.com/launchdarkly/js-core/tree/main/packages/sdk/server-node","repository":{"type":"git","url":"https://github.com/launchdarkly/js-core.git"},"type":"commonjs","main":"./dist/src/index.js","types":"./dist/src/index.d.ts","exports":{".":{"types":"./dist/src/index.d.ts","default":"./dist/src/index.js"},"./integrations":{"types":"./dist/src/integrations.d.ts","default":"./dist/src/integrations.js"}},"typesVersions":{"*":{"integrations":["./dist/src/integrations.d.ts"]}},"files":["dist"],"keywords":["launchdarkly","analytics","client"],"scripts":{"doc":"../../../scripts/build-doc.sh .","clean":"npx tsc --build --clean","//":"We run the tests in-band because the FS tests work best sequential.","test":"npx jest --ci --runInBand","build":"npx tsc","lint":"npx eslint . --ext .ts","lint:fix":"yarn run lint --fix"},"license":"Apache-2.0","dependencies":{"@launchdarkly/js-server-sdk-common":"1.2.1","https-proxy-agent":"^5.0.1","launchdarkly-eventsource":"2.0.0"},"devDependencies":{"@trivago/prettier-plugin-sort-imports":"^4.1.1","@types/jest":"^29.4.0","@typescript-eslint/eslint-plugin":"^6.1.0","@typescript-eslint/parser":"^6.1.0","eslint":"^8.45.0","eslint-config-airbnb-base":"^15.0.0","eslint-config-airbnb-typescript":"^17.1.0","eslint-config-prettier":"^8.8.0","eslint-plugin-import":"^2.27.5","eslint-plugin-prettier":"^5.0.0","jest":"^29.5.0","launchdarkly-js-test-helpers":"^2.2.0","prettier":"^3.0.0","ts-jest":"^29.0.5","typedoc":"0.23.26","typescript":"^5.1.6"}}');


function $bca8de018495b976$var$processPlatformName(name) {
    switch(name){
        case "darwin":
            return "MacOS";
        case "win32":
            return "Windows";
        case "linux":
            return "Linux";
        default:
            return name;
    }
}
class $bca8de018495b976$var$NodeInfo {
    platformData() {
        return {
            os: {
                name: $bca8de018495b976$var$processPlatformName($995bd5ce3699069e$export$722a64dea1b767dc()),
                version: $995bd5ce3699069e$export$83d89fbfd8236492(),
                arch: $995bd5ce3699069e$export$7925d89f138dad5b()
            },
            name: "Node",
            additional: {
                nodeVersion: $bFvJb$process.versions.node
            }
        };
    }
    sdkData() {
        return {
            name: $5a7acf8f691ab255$exports.name,
            version: $5a7acf8f691ab255$exports.version,
            userAgentBase: "NodeJSClient"
        };
    }
}
$bca8de018495b976$exports.default = $bca8de018495b976$var$NodeInfo;


var $24149a0a18d842d0$exports = {};

var $24149a0a18d842d0$require$Buffer = $bFvJb$buffer.Buffer;
"use strict";
Object.defineProperty($24149a0a18d842d0$exports, "__esModule", {
    value: true
});

var $9d900215b8d60930$exports = {};
var $fa35fad917f6152e$exports = {};


var $iLW83 = parcelRequire("iLW83");
var $fa35fad917f6152e$var$https = $fa35fad917f6152e$exports;
for(var $fa35fad917f6152e$var$key in $bFvJb$http)if ($bFvJb$http.hasOwnProperty($fa35fad917f6152e$var$key)) $fa35fad917f6152e$var$https[$fa35fad917f6152e$var$key] = $bFvJb$http[$fa35fad917f6152e$var$key];
$fa35fad917f6152e$var$https.request = function(params, cb) {
    params = $fa35fad917f6152e$var$validateParams(params);
    return $bFvJb$http.request.call(this, params, cb);
};
$fa35fad917f6152e$var$https.get = function(params, cb) {
    params = $fa35fad917f6152e$var$validateParams(params);
    return $bFvJb$http.get.call(this, params, cb);
};
function $fa35fad917f6152e$var$validateParams(params) {
    if (typeof params === "string") params = $iLW83.parse(params);
    if (!params.protocol) params.protocol = "https:";
    if (params.protocol !== "https:") throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"');
    return params;
}



var $iLW83 = parcelRequire("iLW83");
var $9d900215b8d60930$require$parse = $iLW83.parse;
$9d900215b8d60930$exports = Object.assign({}, $fa35fad917f6152e$exports);
$9d900215b8d60930$exports.request = function request(url, options, callback) {
    if (arguments.length == 3) return $fa35fad917f6152e$exports.request(Object.assign({}, options || {}, $9d900215b8d60930$require$parse(url)), callback);
    else {
        callback = options;
        options = url;
        return $fa35fad917f6152e$exports.request(options, callback);
    }
};


var $ddcd91a1a165abdf$exports = {};
"use strict";
var $ddcd91a1a165abdf$var$__importDefault = $ddcd91a1a165abdf$exports && $ddcd91a1a165abdf$exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};

const $ddcd91a1a165abdf$var$agent_1 = $ddcd91a1a165abdf$var$__importDefault((parcelRequire("gHFdE")));
function $ddcd91a1a165abdf$var$createHttpsProxyAgent(opts) {
    return new $ddcd91a1a165abdf$var$agent_1.default(opts);
}
(function(createHttpsProxyAgent) {
    createHttpsProxyAgent.HttpsProxyAgent = $ddcd91a1a165abdf$var$agent_1.default;
    createHttpsProxyAgent.prototype = $ddcd91a1a165abdf$var$agent_1.default.prototype;
})($ddcd91a1a165abdf$var$createHttpsProxyAgent || ($ddcd91a1a165abdf$var$createHttpsProxyAgent = {}));
$ddcd91a1a165abdf$exports = $ddcd91a1a165abdf$var$createHttpsProxyAgent;


var $cbfb3e17e08a5b20$exports = {};


var $cbfb3e17e08a5b20$require$Buffer = $bFvJb$buffer.Buffer;
var $e50eec36577c1ef0$exports = {};
// Encapsulation of configurable backoff/jitter behavior.
//
// - The system can either be in a "good" state or a "bad" state. The initial state is "bad"; the
// caller is responsible for indicating when it transitions to "good". When we ask for a new retry
// delay, that implies the state is now transitioning to "bad".
//
// - There is a configurable base delay, which can be changed at any time (if the SSE server sends
// us a "retry:" directive).
//
// - There are optional strategies for applying backoff and jitter to the delay.
function $e50eec36577c1ef0$var$RetryDelayStrategy(baseDelayMillis, resetIntervalMillis, backoff, jitter) {
    var currentBaseDelay = baseDelayMillis;
    var retryCount = 0;
    var goodSince;
    return {
        nextRetryDelay: function(currentTimeMillis) {
            if (goodSince && resetIntervalMillis && currentTimeMillis - goodSince >= resetIntervalMillis) retryCount = 0;
            goodSince = null;
            var delay = backoff ? backoff(currentBaseDelay, retryCount) : currentBaseDelay;
            retryCount++;
            return jitter ? jitter(delay) : delay;
        },
        setGoodSince: function(goodSinceTimeMillis) {
            goodSince = goodSinceTimeMillis;
        },
        setBaseDelay: function(baseDelay) {
            currentBaseDelay = baseDelay;
            retryCount = 0;
        }
    };
}
function $e50eec36577c1ef0$var$defaultBackoff(maxDelayMillis) {
    return function(baseDelayMillis, retryCount) {
        var d = baseDelayMillis * Math.pow(2, retryCount);
        return d > maxDelayMillis ? maxDelayMillis : d;
    };
}
function $e50eec36577c1ef0$var$defaultJitter(ratio) {
    return function(computedDelayMillis) {
        return computedDelayMillis - Math.trunc(Math.random() * ratio * computedDelayMillis);
    };
}
$e50eec36577c1ef0$exports = {
    RetryDelayStrategy: $e50eec36577c1ef0$var$RetryDelayStrategy,
    defaultBackoff: $e50eec36577c1ef0$var$defaultBackoff,
    defaultJitter: $e50eec36577c1ef0$var$defaultJitter
};


var $f148f1458bcd6af0$exports = {};
/**
 * Determine if a new capacity is needed for a buffer, and if it is, then what
 * that new capacity should be.
 *
 * @param {number} currentCapacity The current capacity of the buffer.
 * @param {number} requiredCapacity The required capacity from the buffer.
 * @param {number} maxOverAllocation The maximum extra capacity to allocate.
 * This is how much the capacity can exceed the required capacity. If the over
 * allocation exceeds this amount (from doubling), then instead the amount
 * over allocated will be equal to maxOverAllocation.
 *
 * @returns {[boolean, number]} Either [false, 0] if no allocation is needed, or [true, <capacity>] if an
 * allocation is needed.
 */ 
var $f148f1458bcd6af0$require$Buffer = $bFvJb$buffer.Buffer;
function $f148f1458bcd6af0$var$CalculateCapacity(currentCapacity, requiredCapacity, maxOverAllocation) {
    if (requiredCapacity > currentCapacity) {
        let newCapacity = requiredCapacity;
        // Might as well start with a buffer of the maximum size that can be pooled.
        // It is unlikely the initial buffer would be small enough to encounter
        // this case.
        if (newCapacity < $f148f1458bcd6af0$require$Buffer.poolSize) newCapacity = $f148f1458bcd6af0$require$Buffer.poolSize;
        // Exponential doubling capacity scaling.
        let doubleCapacity = currentCapacity * 2;
        if (newCapacity < doubleCapacity) newCapacity = doubleCapacity;
        // Doubling could become problematic over a certain size, so limit the total
        // amount of extra capacity allocated.
        const overAllocation = newCapacity - requiredCapacity;
        if (overAllocation > maxOverAllocation) newCapacity = requiredCapacity + maxOverAllocation;
        return [
            true,
            newCapacity
        ];
    }
    return [
        false,
        0
    ];
}
$f148f1458bcd6af0$exports = $f148f1458bcd6af0$var$CalculateCapacity;



var $iLW83 = parcelRequire("iLW83");
var $cbfb3e17e08a5b20$require$parse = $iLW83.parse;

var $iLW83 = parcelRequire("iLW83");
var $cbfb3e17e08a5b20$require$URL = $iLW83.URL;




var $cbfb3e17e08a5b20$var$httpsOptions = [
    "pfx",
    "key",
    "passphrase",
    "cert",
    "ca",
    "ciphers",
    "rejectUnauthorized",
    "secureProtocol",
    "servername",
    "checkServerIdentity"
];
var $cbfb3e17e08a5b20$var$bom = [
    239,
    187,
    191
];
var $cbfb3e17e08a5b20$var$colon = 58;
var $cbfb3e17e08a5b20$var$space = 32;
var $cbfb3e17e08a5b20$var$lineFeed = 10;
var $cbfb3e17e08a5b20$var$carriageReturn = 13;
const $cbfb3e17e08a5b20$var$MAX_OVER_ALLOCATION = 1048576 // 1 MiB
;
function $cbfb3e17e08a5b20$var$hasBom(buf) {
    return $cbfb3e17e08a5b20$var$bom.every(function(charCode, index) {
        return buf[index] === charCode;
    });
}
/**
 * Creates a new EventSource object
 *
 * @param {String} url the URL to which to connect
 * @param {Object} [eventSourceInitDict] extra init params. See README for details.
 * @api public
 **/ function $cbfb3e17e08a5b20$var$EventSource(url, eventSourceInitDict) {
    var readyState = $cbfb3e17e08a5b20$var$EventSource.CONNECTING;
    var config = eventSourceInitDict || {};
    Object.defineProperty(this, "readyState", {
        get: function() {
            return readyState;
        }
    });
    Object.defineProperty(this, "url", {
        get: function() {
            return url;
        }
    });
    var self = this;
    self.reconnectInterval = 1000;
    var req;
    var lastEventId = "";
    if (config.headers && config.headers["Last-Event-ID"]) lastEventId = config.headers["Last-Event-ID"];
    var discardTrailingNewline = false;
    var data, eventName, eventId;
    var reconnectUrl = null;
    var retryDelayStrategy = new $e50eec36577c1ef0$exports.RetryDelayStrategy(config.initialRetryDelayMillis !== null && config.initialRetryDelayMillis !== undefined ? config.initialRetryDelayMillis : 1000, config.retryResetIntervalMillis, config.maxBackoffMillis ? $e50eec36577c1ef0$exports.defaultBackoff(config.maxBackoffMillis) : null, config.jitterRatio ? $e50eec36577c1ef0$exports.defaultJitter(config.jitterRatio) : null);
    var streamOriginUrl = new $cbfb3e17e08a5b20$require$URL(url).origin;
    function makeRequestUrlAndOptions() {
        // Returns { url, options }; url is null/undefined if the URL properties are in options
        var actualUrl = url;
        var options = {
            headers: {}
        };
        if (!config.skipDefaultHeaders) {
            options.headers["Cache-Control"] = "no-cache";
            options.headers["Accept"] = "text/event-stream";
        }
        if (lastEventId) options.headers["Last-Event-ID"] = lastEventId;
        if (config.headers) {
            for(var key in config.headers)if (config.headers.hasOwnProperty(key)) options.headers[key] = config.headers[key];
        }
        // Legacy: this should be specified as `eventSourceInitDict.https.rejectUnauthorized`,
        // but for now exists as a backwards-compatibility layer
        options.rejectUnauthorized = !!config.rejectUnauthorized;
        // If specify http proxy, make the request to sent to the proxy server,
        // and include the original url in path and Host headers
        if (config.proxy) {
            actualUrl = null;
            var parsedUrl = $cbfb3e17e08a5b20$require$parse(url);
            var proxy = $cbfb3e17e08a5b20$require$parse(config.proxy);
            options.protocol = proxy.protocol === "https:" ? "https:" : "http:";
            options.path = url;
            options.headers.Host = parsedUrl.host;
            options.hostname = proxy.hostname;
            options.host = proxy.host;
            options.port = proxy.port;
            if (proxy.username) options.auth = proxy.username + ":" + proxy.password;
        }
        // When running in Node, proxies can also be specified as an agent
        if (config.agent) options.agent = config.agent;
        // If https options are specified, merge them into the request options
        if (config.https) for(var optName in config.https){
            if ($cbfb3e17e08a5b20$var$httpsOptions.indexOf(optName) === -1) continue;
            var option = config.https[optName];
            if (option !== undefined) options[optName] = option;
        }
        // Pass this on to the XHR
        if (config.withCredentials !== undefined) options.withCredentials = config.withCredentials;
        if (config.method) options.method = config.method;
        return {
            url: actualUrl,
            options: options
        };
    }
    function defaultErrorFilter(error) {
        if (error.status) {
            var s = error.status;
            return s === 500 || s === 502 || s === 503 || s === 504;
        }
        return true // always return I/O errors
        ;
    }
    function failed(error) {
        if (readyState === $cbfb3e17e08a5b20$var$EventSource.CLOSED) return;
        var errorEvent = error ? new $cbfb3e17e08a5b20$var$Event("error", error) : new $cbfb3e17e08a5b20$var$Event("end");
        var shouldRetry = (config.errorFilter || defaultErrorFilter)(errorEvent);
        if (shouldRetry) {
            readyState = $cbfb3e17e08a5b20$var$EventSource.CONNECTING;
            _emit(errorEvent);
            scheduleReconnect();
        } else {
            _emit(errorEvent);
            readyState = $cbfb3e17e08a5b20$var$EventSource.CLOSED;
            _emit(new $cbfb3e17e08a5b20$var$Event("closed"));
        }
    }
    function scheduleReconnect() {
        if (readyState !== $cbfb3e17e08a5b20$var$EventSource.CONNECTING) return;
        var delay = retryDelayStrategy.nextRetryDelay(new Date().getTime());
        // The url may have been changed by a temporary redirect. If that's the case, revert it now.
        if (reconnectUrl) {
            url = reconnectUrl;
            reconnectUrl = null;
        }
        var event = new $cbfb3e17e08a5b20$var$Event("retrying");
        event.delayMillis = delay;
        _emit(event);
        setTimeout(function() {
            if (readyState !== $cbfb3e17e08a5b20$var$EventSource.CONNECTING) return;
            connect();
        }, delay);
    }
    function connect() {
        var urlAndOptions = makeRequestUrlAndOptions();
        var isSecure = urlAndOptions.options.protocol === "https:" || urlAndOptions.url && urlAndOptions.url.startsWith("https:");
        var callback = function(res) {
            // Handle HTTP redirects
            if (res.statusCode === 301 || res.statusCode === 307) {
                if (!res.headers.location) {
                    // Server sent redirect response without Location header.
                    failed({
                        status: res.statusCode,
                        message: res.statusMessage
                    });
                    return;
                }
                if (res.statusCode === 307) reconnectUrl = url;
                url = res.headers.location;
                $bFvJb$process.nextTick(connect) // don't go through the scheduleReconnect logic since this isn't an error
                ;
                return;
            }
            // Handle HTTP errors
            if (res.statusCode !== 200) {
                failed({
                    status: res.statusCode,
                    message: res.statusMessage
                });
                return;
            }
            data = "";
            eventName = "";
            eventId = undefined;
            readyState = $cbfb3e17e08a5b20$var$EventSource.OPEN;
            res.on("close", function() {
                res.removeAllListeners("close");
                res.removeAllListeners("end");
                failed();
            });
            res.on("end", function() {
                res.removeAllListeners("close");
                res.removeAllListeners("end");
                failed();
            });
            _emit(new $cbfb3e17e08a5b20$var$Event("open"));
            // text/event-stream parser adapted from webkit's
            // Source/WebCore/page/EventSource.cpp
            var isFirst = true;
            var buf;
            var startingPos = 0;
            var startingFieldLength = -1;
            let sizeUsed = 0;
            res.on("data", function(chunk) {
                if (!buf) {
                    buf = chunk;
                    if (isFirst && $cbfb3e17e08a5b20$var$hasBom(buf)) {
                        buf = buf.slice($cbfb3e17e08a5b20$var$bom.length);
                        sizeUsed -= $cbfb3e17e08a5b20$var$bom.length;
                    }
                } else {
                    // allocate new buffer
                    const [resize, newCapacity] = $f148f1458bcd6af0$exports(buf.length, chunk.length + sizeUsed, $cbfb3e17e08a5b20$var$MAX_OVER_ALLOCATION);
                    if (resize) {
                        let newBuffer = $cbfb3e17e08a5b20$require$Buffer.alloc(newCapacity);
                        buf.copy(newBuffer, 0, 0, sizeUsed);
                        buf = newBuffer;
                    }
                    chunk.copy(buf, sizeUsed);
                }
                sizeUsed += chunk.length;
                isFirst = false;
                let pos = 0;
                const length = sizeUsed;
                while(pos < length){
                    if (discardTrailingNewline) {
                        if (buf[pos] === $cbfb3e17e08a5b20$var$lineFeed) ++pos;
                        discardTrailingNewline = false;
                    }
                    var lineLength = -1;
                    var fieldLength = startingFieldLength;
                    var c;
                    for(var i = startingPos; lineLength < 0 && i < length; ++i){
                        c = buf[i];
                        if (c === $cbfb3e17e08a5b20$var$colon) {
                            if (fieldLength < 0) fieldLength = i - pos;
                        } else if (c === $cbfb3e17e08a5b20$var$carriageReturn) {
                            discardTrailingNewline = true;
                            lineLength = i - pos;
                        } else if (c === $cbfb3e17e08a5b20$var$lineFeed) lineLength = i - pos;
                    }
                    if (lineLength < 0) {
                        startingPos = length - pos;
                        startingFieldLength = fieldLength;
                        break;
                    } else {
                        startingPos = 0;
                        startingFieldLength = -1;
                    }
                    parseEventStreamLine(buf, pos, fieldLength, lineLength);
                    pos += lineLength + 1;
                }
                if (pos === length) {
                    buf = void 0;
                    sizeUsed = 0;
                } else if (pos > 0) {
                    buf = buf.slice(pos);
                    sizeUsed = buf.length;
                }
            });
        };
        var api = isSecure ? $9d900215b8d60930$exports : $bFvJb$http;
        req = urlAndOptions.url ? api.request(urlAndOptions.url, urlAndOptions.options, callback) : api.request(urlAndOptions.options, callback);
        if (config.readTimeoutMillis) req.setTimeout(config.readTimeoutMillis);
        if (config.body) req.write(config.body);
        req.on("error", function(err) {
            failed({
                message: err.message
            });
        });
        req.on("timeout", function() {
            failed({
                message: "Read timeout, received no data in " + config.readTimeoutMillis + "ms, assuming connection is dead"
            });
        });
        if (req.setNoDelay) req.setNoDelay(true);
        req.end();
    }
    connect();
    function _emit(event) {
        if (event) self.emit(event.type, event);
    }
    this._close = function() {
        if (readyState === $cbfb3e17e08a5b20$var$EventSource.CLOSED) return;
        readyState = $cbfb3e17e08a5b20$var$EventSource.CLOSED;
        if (req.abort) req.abort();
        if (req.xhr && req.xhr.abort) req.xhr.abort();
        _emit(new $cbfb3e17e08a5b20$var$Event("closed"));
    };
    function receivedEvent(event) {
        retryDelayStrategy.setGoodSince(new Date().getTime());
        _emit(event);
    }
    function parseEventStreamLine(buf, pos, fieldLength, lineLength) {
        if (lineLength === 0) {
            if (data.length > 0) {
                var type = eventName || "message";
                if (eventId !== undefined) lastEventId = eventId;
                var event = new $cbfb3e17e08a5b20$var$MessageEvent(type, {
                    data: data.slice(0, -1),
                    lastEventId: lastEventId,
                    origin: streamOriginUrl
                });
                data = "";
                eventId = undefined;
                receivedEvent(event);
            }
            eventName = void 0;
        } else {
            var noValue = fieldLength < 0;
            var step = 0;
            var field = buf.slice(pos, pos + (noValue ? lineLength : fieldLength)).toString();
            if (noValue) step = lineLength;
            else if (buf[pos + fieldLength + 1] !== $cbfb3e17e08a5b20$var$space) step = fieldLength + 1;
            else step = fieldLength + 2;
            pos += step;
            var valueLength = lineLength - step;
            var value = buf.slice(pos, pos + valueLength).toString();
            if (field === "data") data += value + "\n";
            else if (field === "event") eventName = value;
            else if (field === "id") {
                if (!value.includes("\x00")) eventId = value;
            } else if (field === "retry") {
                var retry = parseInt(value, 10);
                if (!Number.isNaN(retry)) {
                    self.reconnectInterval = retry;
                    retryDelayStrategy.setBaseDelay(retry);
                }
            }
        }
    }
}
$cbfb3e17e08a5b20$exports = {
    EventSource: $cbfb3e17e08a5b20$var$EventSource
};
$bFvJb$util.inherits($cbfb3e17e08a5b20$var$EventSource, $bFvJb$events.EventEmitter);
$cbfb3e17e08a5b20$var$EventSource.prototype.constructor = $cbfb3e17e08a5b20$var$EventSource; // make stacktraces readable
[
    "open",
    "end",
    "error",
    "message",
    "retrying",
    "closed"
].forEach(function(method) {
    Object.defineProperty($cbfb3e17e08a5b20$var$EventSource.prototype, "on" + method, {
        /**
     * Returns the current listener
     *
     * @return {Mixed} the set function or undefined
     * @api private
     */ get: function get() {
            var listener = this.listeners(method)[0];
            return listener ? listener._listener ? listener._listener : listener : undefined;
        },
        /**
     * Start listening for events
     *
     * @param {Function} listener the listener
     * @return {Mixed} the set function or undefined
     * @api private
     */ set: function set(listener) {
            this.removeAllListeners(method);
            this.addEventListener(method, listener);
        }
    });
});
/**
 * Ready states
 */ Object.defineProperty($cbfb3e17e08a5b20$var$EventSource, "CONNECTING", {
    enumerable: true,
    value: 0
});
Object.defineProperty($cbfb3e17e08a5b20$var$EventSource, "OPEN", {
    enumerable: true,
    value: 1
});
Object.defineProperty($cbfb3e17e08a5b20$var$EventSource, "CLOSED", {
    enumerable: true,
    value: 2
});
$cbfb3e17e08a5b20$var$EventSource.prototype.CONNECTING = 0;
$cbfb3e17e08a5b20$var$EventSource.prototype.OPEN = 1;
$cbfb3e17e08a5b20$var$EventSource.prototype.CLOSED = 2;
/**
 * Adds the EventSource.supportedOptions property that allows application code to know which
 * custom options are supported by this polyfill.
 */ var $cbfb3e17e08a5b20$var$supportedOptions = [
    "errorFilter",
    "headers",
    "https",
    "initialRetryDelayMillis",
    "jitterRatio",
    "maxBackoffMillis",
    "method",
    "proxy",
    "retryResetIntervalMillis",
    "skipDefaultHeaders",
    "withCredentials"
];
var $cbfb3e17e08a5b20$var$supportedOptionsObject = {};
for(var $cbfb3e17e08a5b20$var$i in $cbfb3e17e08a5b20$var$supportedOptions)Object.defineProperty($cbfb3e17e08a5b20$var$supportedOptionsObject, $cbfb3e17e08a5b20$var$supportedOptions[$cbfb3e17e08a5b20$var$i], {
    enumerable: true,
    value: true
});
Object.defineProperty($cbfb3e17e08a5b20$var$EventSource, "supportedOptions", {
    enumerable: true,
    value: $cbfb3e17e08a5b20$var$supportedOptionsObject
});
/**
 * Closes the connection, if one is made, and sets the readyState attribute to 2 (closed)
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventSource/close
 * @api public
 */ $cbfb3e17e08a5b20$var$EventSource.prototype.close = function() {
    this._close();
};
/**
 * Emulates the W3C Browser based WebSocket interface using addEventListener.
 *
 * @param {String} type A string representing the event type to listen out for
 * @param {Function} listener callback
 * @see https://developer.mozilla.org/en/DOM/element.addEventListener
 * @see http://dev.w3.org/html5/websockets/#the-websocket-interface
 * @api public
 */ $cbfb3e17e08a5b20$var$EventSource.prototype.addEventListener = function addEventListener(type, listener) {
    if (typeof listener === "function") {
        // store a reference so we can return the original function again
        listener._listener = listener;
        this.on(type, listener);
    }
};
/**
 * Emulates the W3C Browser based WebSocket interface using dispatchEvent.
 *
 * @param {Event} event An event to be dispatched
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent
 * @api public
 */ $cbfb3e17e08a5b20$var$EventSource.prototype.dispatchEvent = function dispatchEvent(event) {
    if (!event.type) throw new Error("UNSPECIFIED_EVENT_TYPE_ERR");
    // if event is instance of an CustomEvent (or has 'details' property),
    // send the detail object as the payload for the event
    this.emit(event.type, event.detail);
};
/**
 * Emulates the W3C Browser based WebSocket interface using removeEventListener.
 *
 * @param {String} type A string representing the event type to remove
 * @param {Function} listener callback
 * @see https://developer.mozilla.org/en/DOM/element.removeEventListener
 * @see http://dev.w3.org/html5/websockets/#the-websocket-interface
 * @api public
 */ $cbfb3e17e08a5b20$var$EventSource.prototype.removeEventListener = function removeEventListener(type, listener) {
    if (typeof listener === "function") {
        listener._listener = undefined;
        this.removeListener(type, listener);
    }
};
/**
 * W3C Event
 *
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#interface-Event
 * @api private
 */ function $cbfb3e17e08a5b20$var$Event(type, optionalProperties) {
    Object.defineProperty(this, "type", {
        writable: false,
        value: type,
        enumerable: true
    });
    if (optionalProperties) {
        for(var f in optionalProperties)if (optionalProperties.hasOwnProperty(f)) Object.defineProperty(this, f, {
            writable: false,
            value: optionalProperties[f],
            enumerable: true
        });
    }
}
/**
 * W3C MessageEvent
 *
 * @see http://www.w3.org/TR/webmessaging/#event-definitions
 * @api private
 */ function $cbfb3e17e08a5b20$var$MessageEvent(type, eventInitDict) {
    Object.defineProperty(this, "type", {
        writable: false,
        value: type,
        enumerable: true
    });
    for(var f in eventInitDict)if (eventInitDict.hasOwnProperty(f)) Object.defineProperty(this, f, {
        writable: false,
        value: eventInitDict[f],
        enumerable: true
    });
}


var $757b5fe8ea8b5905$exports = {};

var $757b5fe8ea8b5905$require$Buffer = $bFvJb$buffer.Buffer;
"use strict";
Object.defineProperty($757b5fe8ea8b5905$exports, "__esModule", {
    value: true
});
var $3051206dc477173f$exports = {};
"use strict";
Object.defineProperty($3051206dc477173f$exports, "__esModule", {
    value: true
});
/**
 * Wraps the headers to match those used by fetch APIs.
 * @internal
 */ class $3051206dc477173f$var$HeaderWrapper {
    constructor(headers){
        this.headers = headers;
    }
    headerVal(name) {
        const val = this.headers[name];
        if (val === undefined || val === null) return null;
        if (Array.isArray(val)) return val.join(", ");
        return val;
    }
    get(name) {
        return this.headerVal(name);
    }
    keys() {
        return Object.keys(this.headers);
    }
    // We want to use generators here for the simplicity of maintaining
    // this interface. Also they aren't expected to be high frequency usage.
    *values() {
        // eslint-disable-next-line no-restricted-syntax
        for (const key of this.keys()){
            const val = this.get(key);
            if (val !== null) yield val;
        }
    }
    *entries() {
        // eslint-disable-next-line no-restricted-syntax
        for (const key of this.keys()){
            const val = this.get(key);
            if (val !== null) yield [
                key,
                val
            ];
        }
    }
    has(name) {
        return Object.prototype.hasOwnProperty.call(this.headers, name);
    }
}
$3051206dc477173f$exports.default = $3051206dc477173f$var$HeaderWrapper;


class $757b5fe8ea8b5905$var$NodeResponse {
    constructor(res){
        this.body = [];
        this.headers = new $3051206dc477173f$exports.default(res.headers);
        // Status code is optionally typed, but will always be present for this
        // use case.
        this.status = res.statusCode || 0;
        this.incomingMessage = res;
        this.promise = new Promise((resolve, reject)=>{
            res.on("data", (chunk)=>{
                this.body.push(chunk);
            });
            res.on("error", (err)=>{
                reject(err);
            });
            res.on("end", ()=>{
                resolve($757b5fe8ea8b5905$require$Buffer.concat(this.body).toString());
            });
        });
    }
    text() {
        return this.promise;
    }
    async json() {
        const stringValue = await this.promise;
        return JSON.parse(stringValue);
    }
}
$757b5fe8ea8b5905$exports.default = $757b5fe8ea8b5905$var$NodeResponse;


function $24149a0a18d842d0$var$processTlsOptions(tlsOptions) {
    const options = {
        ca: tlsOptions.ca,
        cert: tlsOptions.cert,
        checkServerIdentity: tlsOptions.checkServerIdentity,
        ciphers: tlsOptions.ciphers,
        // Our interface says object for the pfx object. But the node
        // type is more strict. This is also true for the key and KeyObject.
        // @ts-ignore
        pfx: tlsOptions.pfx,
        // @ts-ignore
        key: tlsOptions.key,
        passphrase: tlsOptions.passphrase,
        rejectUnauthorized: tlsOptions.rejectUnauthorized,
        secureProtocol: tlsOptions.secureProtocol,
        servername: tlsOptions.servername
    };
    // Node does not take kindly to undefined keys.
    Object.keys(options).forEach((key)=>{
        if (options[key] === undefined) delete options[key];
    });
    return options;
}
function $24149a0a18d842d0$var$processProxyOptions(proxyOptions, additional = {}) {
    var _a;
    const protocol = ((_a = proxyOptions.scheme) === null || _a === void 0 ? void 0 : _a.startsWith("https")) ? "https:" : "http";
    const parsedOptions = Object.assign({
        port: proxyOptions.port,
        host: proxyOptions.host,
        protocol: protocol
    }, additional);
    if (proxyOptions.auth) parsedOptions.headers = {
        "Proxy-Authorization": `Basic ${$24149a0a18d842d0$require$Buffer.from(proxyOptions.auth).toString("base64")}}`
    };
    // Node does not take kindly to undefined keys.
    Object.keys(parsedOptions).forEach((key)=>{
        if (parsedOptions[key] === undefined) delete parsedOptions[key];
    });
    return $ddcd91a1a165abdf$exports(parsedOptions);
}
function $24149a0a18d842d0$var$createAgent(tlsOptions, proxyOptions, logger) {
    var _a;
    if (!((_a = proxyOptions === null || proxyOptions === void 0 ? void 0 : proxyOptions.auth) === null || _a === void 0 ? void 0 : _a.startsWith("https")) && tlsOptions) logger === null || logger === void 0 || logger.warn("Proxy configured with TLS options, but is not using an https auth.");
    if (tlsOptions) {
        const agentOptions = $24149a0a18d842d0$var$processTlsOptions(tlsOptions);
        if (proxyOptions) return $24149a0a18d842d0$var$processProxyOptions(proxyOptions, agentOptions);
        return new $9d900215b8d60930$exports.Agent(agentOptions);
    }
    if (proxyOptions) return $24149a0a18d842d0$var$processProxyOptions(proxyOptions);
    return undefined;
}
class $24149a0a18d842d0$var$NodeRequests {
    constructor(tlsOptions, proxyOptions, logger){
        this.hasProxy = false;
        this.hasProxyAuth = false;
        this.agent = $24149a0a18d842d0$var$createAgent(tlsOptions, proxyOptions, logger);
        this.hasProxy = !!proxyOptions;
        this.hasProxyAuth = !!(proxyOptions === null || proxyOptions === void 0 ? void 0 : proxyOptions.auth);
    }
    fetch(url, options = {}) {
        const isSecure = url.startsWith("https://");
        const impl = isSecure ? $9d900215b8d60930$exports : $bFvJb$http;
        return new Promise((resolve, reject)=>{
            const req = impl.request(url, {
                timeout: options.timeout,
                headers: options.headers,
                method: options.method,
                agent: this.agent
            }, (res)=>resolve(new $757b5fe8ea8b5905$exports.default(res)));
            if (options.body) req.write(options.body);
            req.on("error", (err)=>{
                reject(err);
            });
            req.end();
        });
    }
    createEventSource(url, eventSourceInitDict) {
        const expandedOptions = Object.assign(Object.assign({}, eventSourceInitDict), {
            agent: this.agent,
            tlsParams: this.tlsOptions
        });
        return new $cbfb3e17e08a5b20$exports.EventSource(url, expandedOptions);
    }
    usingProxy() {
        return this.hasProxy;
    }
    usingProxyAuth() {
        return this.hasProxyAuth;
    }
}
$24149a0a18d842d0$exports.default = $24149a0a18d842d0$var$NodeRequests;


class $0e742c370a2a5446$var$NodePlatform {
    constructor(options){
        this.info = new $bca8de018495b976$exports.default();
        this.fileSystem = new $461270eba23c50b4$exports.default();
        this.crypto = new $cc4e3a58c6b8d9ee$exports.default();
        this.requests = new $24149a0a18d842d0$exports.default(options.tlsParams, options.proxyOptions, options.logger);
    }
}
$0e742c370a2a5446$exports.default = $0e742c370a2a5446$var$NodePlatform;


class $70e31617e9c789b1$var$ClientEmitter extends $bFvJb$events.EventEmitter {
}
/**
 * @ignore
 */ class $70e31617e9c789b1$var$LDClientNode extends $aSbYK.LDClientImpl {
    constructor(sdkKey, options){
        const fallbackLogger = new $aSbYK.BasicLogger({
            level: "info",
            // eslint-disable-next-line no-console
            destination: console.error,
            formatter: $bFvJb$util.format
        });
        const emitter = new $70e31617e9c789b1$var$ClientEmitter();
        const logger = options.logger ? new $aSbYK.SafeLogger(options.logger, fallbackLogger) : fallbackLogger;
        super(sdkKey, new $0e742c370a2a5446$exports.default(Object.assign(Object.assign({}, options), {
            logger: logger
        })), Object.assign(Object.assign({}, options), {
            logger: logger
        }), {
            onError: (err)=>{
                if (emitter.listenerCount("error")) emitter.emit("error", err);
            },
            onFailed: (err)=>{
                emitter.emit("failed", err);
            },
            onReady: ()=>{
                emitter.emit("ready");
            },
            onUpdate: (key)=>{
                emitter.emit("update", {
                    key: key
                });
                emitter.emit(`update:${key}`, {
                    key: key
                });
            },
            hasEventListeners: ()=>emitter.eventNames().some((name)=>name === "update" || typeof name === "string" && name.startsWith("update:"))
        });
        this.emitter = emitter;
        this.bigSegmentStoreStatusProvider = new $db395bb86894740e$exports.default(this.bigSegmentStatusProviderInternal);
    }
}
$70e31617e9c789b1$exports.default = (0, $c24ca4f9d81c27b5$exports.Emits)($70e31617e9c789b1$var$LDClientNode);



$754ad0fe791d57df$var$__exportStar((parcelRequire("aSbYK")), $754ad0fe791d57df$exports);
/**
 * Creates an instance of the LaunchDarkly client.
 *
 * Applications should instantiate a single instance for the lifetime of the application.
 * The client will begin attempting to connect to LaunchDarkly as soon as it is created. To
 * determine when it is ready to use, call {@link LDClient.waitForInitialization}, or register an
 * event listener for the `"ready"` event using {@link LDClient.on}.
 *
 * **Important:** Do **not** try to instantiate `LDClient` with its constructor
 * (`new LDClient()/new LDClientImpl()/new LDClientNode()`); the SDK does not currently support
 * this.
 *
 * @param key
 *   The SDK key.
 * @param options
 *   Optional configuration settings.
 * @return
 *   The new {@link LDClient} instance.
 */ function $754ad0fe791d57df$var$init(sdkKey, options = {}) {
    return new $70e31617e9c789b1$exports.default(sdkKey, options);
}
$754ad0fe791d57df$exports.init = $754ad0fe791d57df$var$init;
/**
 * Provides a simple {@link LDLogger} implementation.
 *
 * This logging implementation uses a simple format that includes only the log level
 * and the message text. Output is written to the standard error stream (`console.error`).
 * You can filter by log level as described in [[BasicLoggerOptions.level]].
 *
 * To use the logger created by this function, put it into {@link LDOptions.logger}. If
 * you do not set {@link LDOptions.logger} to anything, the SDK uses a default logger
 * that is equivalent to `basicLogger({ level: 'info' })`.
 *
 * @param options Configuration for the logger. If no options are specified, the
 *   logger uses `{ level: 'info' }`.
 *
 * @example
 * This example shows how to use `basicLogger` in your SDK options to enable console
 * logging only at `warn` and `error` levels.
 * ```javascript
 *   const ldOptions = {
 *     logger: basicLogger({ level: 'warn' }),
 *   };
 * ```
 *
 * @example
 * This example shows how to use `basicLogger` in your SDK options to cause log
 * output to go to `console.log` instead of `console.error`.
 * ```javascript
 *   const ldOptions = {
 *     logger: ld.basicLogger({ destination: console.log }),
 *   };
 * ```
 */ function $754ad0fe791d57df$var$basicLogger(options) {
    return new (parcelRequire("aSbYK")).BasicLogger(options);
}
$754ad0fe791d57df$exports.basicLogger = $754ad0fe791d57df$var$basicLogger;


module.exports = $754ad0fe791d57df$exports;


//# sourceMappingURL=browser.js.map
